
adda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800b338  0800b338  0000c338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b744  0800b744  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b744  0800b744  0000c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b74c  0800b74c  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b74c  0800b74c  0000c74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b750  0800b750  0000c750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b754  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f10  2000007c  0800b7d0  0000d07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f8c  0800b7d0  0000df8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b922  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003caa  00000000  00000000  000289ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0002c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011cf  00000000  00000000  0002dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f78  00000000  00000000  0002ef1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d381  00000000  00000000  00054e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e15d2  00000000  00000000  00072218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001537ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006850  00000000  00000000  00153830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0015a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b320 	.word	0x0800b320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800b320 	.word	0x0800b320

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <compute_dft_max_amplitude>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float compute_dft_max_amplitude(float *samples, int signal_length, float sample_rate, int start_freq, int end_freq) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b098      	sub	sp, #96	@ 0x60
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6178      	str	r0, [r7, #20]
 8000d00:	6139      	str	r1, [r7, #16]
 8000d02:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d10:	4875      	ldr	r0, [pc, #468]	@ (8000ee8 <compute_dft_max_amplitude+0x1f0>)
 8000d12:	f001 ff6b 	bl	8002bec <HAL_GPIO_WritePin>
    float max_amplitude_squared = 0.0f; // We werken met kwadraten om worteltrekken te vermijden
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Bereken de DFT-indexen k_start en k_end
    int k_start = (int)(start_freq * signal_length / sample_rate);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d38:	ee17 3a90 	vmov	r3, s15
 8000d3c:	643b      	str	r3, [r7, #64]	@ 0x40
    int k_end = (int)(end_freq * signal_length / sample_rate);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	ee07 3a90 	vmov	s15, r3
 8000d4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d5a:	ee17 3a90 	vmov	r3, s15
 8000d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Vooraf berekende constante voor de hoeken
    float two_pi_over_N = 2.0f * M_PI / signal_length;
 8000d60:	6938      	ldr	r0, [r7, #16]
 8000d62:	f7ff fb83 	bl	800046c <__aeabi_i2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	a15d      	add	r1, pc, #372	@ (adr r1, 8000ee0 <compute_dft_max_amplitude+0x1e8>)
 8000d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d70:	f7ff fd10 	bl	8000794 <__aeabi_ddiv>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fdf2 	bl	8000964 <__aeabi_d2f>
 8000d80:	4603      	mov	r3, r0
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int k = k_start; k <= k_end; k++) {
 8000d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d88:	e093      	b.n	8000eb2 <compute_dft_max_amplitude+0x1ba>
        float real_part = 0.0f;
 8000d8a:	f04f 0300 	mov.w	r3, #0
 8000d8e:	657b      	str	r3, [r7, #84]	@ 0x54
        float imag_part = 0.0f;
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	653b      	str	r3, [r7, #80]	@ 0x50
        float angle_increment = two_pi_over_N * k;
 8000d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        float cos_angle = 1.0f; // cos(0) = 1
 8000dac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        float sin_angle = 0.0f; // sin(0) = 0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	64bb      	str	r3, [r7, #72]	@ 0x48
        float cos_step = cosf(angle_increment);
 8000db8:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8000dbc:	f009 fd2e 	bl	800a81c <cosf>
 8000dc0:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
        float sin_step = sinf(angle_increment);
 8000dc4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8000dc8:	f009 fd6c 	bl	800a8a4 <sinf>
 8000dcc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

        for (int n = 0; n < signal_length; n++) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dd4:	e046      	b.n	8000e64 <compute_dft_max_amplitude+0x16c>
            float sample = samples[n];
 8000dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4413      	add	r3, r2
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24

            // Bereken real en imaginary met behulp van de huidige hoeken
            real_part += sample * cos_angle;
 8000de2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000de6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dee:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
            imag_part += -sample * sin_angle;
 8000dfa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000dfe:	eeb1 7a67 	vneg.f32	s14, s15
 8000e02:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e12:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

            // Update hoeken met behulp van rotatiematrix (vermijd herberekenen van cos(n * angle))
            float new_cos = cos_angle * cos_step - sin_angle * sin_step;
 8000e16:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000e1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e22:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000e26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a08 	vstr	s15, [r7, #32]
            float new_sin = cos_angle * sin_step + sin_angle * cos_step;
 8000e36:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000e3a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e42:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000e46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	edc7 7a07 	vstr	s15, [r7, #28]
            cos_angle = new_cos;
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
            sin_angle = new_sin;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (int n = 0; n < signal_length; n++) {
 8000e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e60:	3301      	adds	r3, #1
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbb4      	blt.n	8000dd6 <compute_dft_max_amplitude+0xde>
        }

        // Bereken het kwadraat van de amplitude en schaal met 1/N^2 (i.p.v. sqrt op het einde)
        float amplitude_squared = (real_part * real_part + imag_part * imag_part) / (signal_length * signal_length);
 8000e6c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000e70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e74:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e7c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	fb03 f303 	mul.w	r3, r3, r3
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e92:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        // Controleer of dit de grootste amplitude^2 is
        if (amplitude_squared > max_amplitude_squared) {
 8000e96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000e9a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea6:	dd01      	ble.n	8000eac <compute_dft_max_amplitude+0x1b4>
            max_amplitude_squared = amplitude_squared;
 8000ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (int k = k_start; k <= k_end; k++) {
 8000eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000eae:	3301      	adds	r3, #1
 8000eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	f77f af67 	ble.w	8000d8a <compute_dft_max_amplitude+0x92>
        }
    }

    HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ec2:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <compute_dft_max_amplitude+0x1f0>)
 8000ec4:	f001 fe92 	bl	8002bec <HAL_GPIO_WritePin>
    return sqrtf(max_amplitude_squared); // Uiteindelijk pas de wortel nemen
 8000ec8:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8000ecc:	f009 fc88 	bl	800a7e0 <sqrtf>
 8000ed0:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	3760      	adds	r7, #96	@ 0x60
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	54442d18 	.word	0x54442d18
 8000ee4:	401921fb 	.word	0x401921fb
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f000 fe70 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f84c 	bl	8000f90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 fa80 	bl	80013fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000efc:	f000 f98a 	bl	8001214 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000f00:	f009 f818 	bl	8009f34 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000f04:	f000 f8ae 	bl	8001064 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f08:	f000 f8fe 	bl	8001108 <MX_ADC2_Init>
  MX_DAC_Init();
 8000f0c:	f000 f94e 	bl	80011ac <MX_DAC_Init>
  MX_TIM3_Init();
 8000f10:	f000 f9fc 	bl	800130c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f14:	f000 f9ac 	bl	8001270 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 fa46 	bl	80013a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);				// start the interrupt timer 3
 8000f1c:	4816      	ldr	r0, [pc, #88]	@ (8000f78 <main+0x8c>)
 8000f1e:	f004 fddf 	bl	8005ae0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
    {
	  if (buffer_full)
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <main+0x90>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d020      	beq.n	8000f6c <main+0x80>
	      {
	          buffer_full = false;  // Reset de vlag
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <main+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	          // Voer de FFT uit
	          MaxAmplitude[0] = compute_dft_max_amplitude(samples, SAMPLE_SIZE, SAMPLE_RATE, 100, 200);
 8000f30:	23c8      	movs	r3, #200	@ 0xc8
 8000f32:	2264      	movs	r2, #100	@ 0x64
 8000f34:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000f80 <main+0x94>
 8000f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <main+0x98>)
 8000f3e:	f7ff fedb 	bl	8000cf8 <compute_dft_max_amplitude>
 8000f42:	eef0 7a40 	vmov.f32	s15, s0
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <main+0x9c>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]

	          HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, MaxAmplitude[0]);	// setvalue on DAC1	PA4
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <main+0x9c>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f56:	ee17 3a90 	vmov	r3, s15
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <main+0xa0>)
 8000f60:	f001 fc24 	bl	80027ac <HAL_DAC_SetValue>
	          HAL_DAC_Start(&hdac, DAC_CHANNEL_1);							// execute new value
 8000f64:	2100      	movs	r1, #0
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <main+0xa0>)
 8000f68:	f001 fbc9 	bl	80026fe <HAL_DAC_Start>

	      }



	HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	@ 0x64
 8000f6e:	f000 fea3 	bl	8001cb8 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f72:	f009 f805 	bl	8009f80 <MX_USB_HOST_Process>
	  if (buffer_full)
 8000f76:	e7d4      	b.n	8000f22 <main+0x36>
 8000f78:	200001d8 	.word	0x200001d8
 8000f7c:	2000067c 	.word	0x2000067c
 8000f80:	44fa0000 	.word	0x44fa0000
 8000f84:	20000278 	.word	0x20000278
 8000f88:	20000268 	.word	0x20000268
 8000f8c:	20000128 	.word	0x20000128

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	@ 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fb90 	bl	800a6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <SystemClock_Config+0xcc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <SystemClock_Config+0xcc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001004:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001008:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800100e:	2307      	movs	r3, #7
 8001010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f87a 	bl	8005110 <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001022:	f000 fb09 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2105      	movs	r1, #5
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fadb 	bl	8005600 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001050:	f000 faf2 	bl	8001638 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	@ 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <MX_ADC1_Init+0x9c>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_ADC1_Init+0x98>)
 800107e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001082:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010a6:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <MX_ADC1_Init+0xa0>)
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010c6:	f000 fe1b 	bl	8001d00 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 fab2 	bl	8001638 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010d4:	230b      	movs	r3, #11
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010e6:	f000 ffb9 	bl	800205c <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010f0:	f000 faa2 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000098 	.word	0x20000098
 8001100:	40012000 	.word	0x40012000
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800111c:	4a21      	ldr	r2, [pc, #132]	@ (80011a4 <MX_ADC2_Init+0x9c>)
 800111e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001122:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001126:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <MX_ADC2_Init+0xa0>)
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001162:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_ADC2_Init+0x98>)
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001168:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800116a:	f000 fdc9 	bl	8001d00 <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001174:	f000 fa60 	bl	8001638 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001178:	230c      	movs	r3, #12
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <MX_ADC2_Init+0x98>)
 800118a:	f000 ff67 	bl	800205c <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001194:	f000 fa50 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200000e0 	.word	0x200000e0
 80011a4:	40012100 	.word	0x40012100
 80011a8:	0f000001 	.word	0x0f000001

080011ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_DAC_Init+0x60>)
 80011bc:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <MX_DAC_Init+0x64>)
 80011be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c0:	4812      	ldr	r0, [pc, #72]	@ (800120c <MX_DAC_Init+0x60>)
 80011c2:	f001 fa7a 	bl	80026ba <HAL_DAC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011cc:	f000 fa34 	bl	8001638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	@ (800120c <MX_DAC_Init+0x60>)
 80011e0:	f001 fb0e 	bl	8002800 <HAL_DAC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ea:	f000 fa25 	bl	8001638 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	2210      	movs	r2, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_DAC_Init+0x60>)
 80011f6:	f001 fb03 	bl	8002800 <HAL_DAC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 fa1a 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000128 	.word	0x20000128
 8001210:	40007400 	.word	0x40007400

08001214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f003 fe19 	bl	8004e88 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 f9ec 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000013c 	.word	0x2000013c
 8001268:	40005400 	.word	0x40005400
 800126c:	000186a0 	.word	0x000186a0

08001270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_TIM2_Init+0x98>)
 800128e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2800-1;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_TIM2_Init+0x98>)
 8001296:	f640 22ef 	movw	r2, #2799	@ 0xaef
 800129a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_TIM2_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_TIM2_Init+0x98>)
 80012a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_TIM2_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_TIM2_Init+0x98>)
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b6:	4814      	ldr	r0, [pc, #80]	@ (8001308 <MX_TIM2_Init+0x98>)
 80012b8:	f004 fbc2 	bl	8005a40 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012c2:	f000 f9b9 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_TIM2_Init+0x98>)
 80012d4:	f004 fd64 	bl	8005da0 <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012de:	f000 f9ab 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <MX_TIM2_Init+0x98>)
 80012f0:	f004 ff96 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012fa:	f000 f99d 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000190 	.word	0x20000190

0800130c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	// note that the APB timerclock is used. In this example 168MHz/2 = 84MHz
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  // timer 0.1 sec = 1000*8400 / 84000
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_TIM3_Init+0x94>)
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <MX_TIM3_Init+0x98>)
 800132c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 420-1;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_TIM3_Init+0x94>)
 8001330:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_TIM3_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_TIM3_Init+0x94>)
 800133e:	2263      	movs	r2, #99	@ 0x63
 8001340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_TIM3_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_TIM3_Init+0x94>)
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_TIM3_Init+0x94>)
 8001350:	f004 fb76 	bl	8005a40 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800135a:	f000 f96d 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_TIM3_Init+0x94>)
 800136c:	f004 fd18 	bl	8005da0 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f95f 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_TIM3_Init+0x94>)
 8001388:	f004 ff4a 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001392:	f000 f951 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001d8 	.word	0x200001d8
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f004 ffae 	bl	8006340 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f925 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000220 	.word	0x20000220
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	@ 0x30
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b82      	ldr	r3, [pc, #520]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a81      	ldr	r2, [pc, #516]	@ (8001620 <MX_GPIO_Init+0x224>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b7f      	ldr	r3, [pc, #508]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b7b      	ldr	r3, [pc, #492]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a7a      	ldr	r2, [pc, #488]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b78      	ldr	r3, [pc, #480]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b74      	ldr	r3, [pc, #464]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a73      	ldr	r2, [pc, #460]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b71      	ldr	r3, [pc, #452]	@ (8001620 <MX_GPIO_Init+0x224>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b6d      	ldr	r3, [pc, #436]	@ (8001620 <MX_GPIO_Init+0x224>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a6c      	ldr	r2, [pc, #432]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b66      	ldr	r3, [pc, #408]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a65      	ldr	r2, [pc, #404]	@ (8001620 <MX_GPIO_Init+0x224>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b63      	ldr	r3, [pc, #396]	@ (8001620 <MX_GPIO_Init+0x224>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001620 <MX_GPIO_Init+0x224>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001620 <MX_GPIO_Init+0x224>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001620 <MX_GPIO_Init+0x224>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2108      	movs	r1, #8
 80014be:	4859      	ldr	r0, [pc, #356]	@ (8001624 <MX_GPIO_Init+0x228>)
 80014c0:	f001 fb94 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2101      	movs	r1, #1
 80014c8:	4857      	ldr	r0, [pc, #348]	@ (8001628 <MX_GPIO_Init+0x22c>)
 80014ca:	f001 fb8f 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ce:	2200      	movs	r2, #0
 80014d0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80014d4:	4855      	ldr	r0, [pc, #340]	@ (800162c <MX_GPIO_Init+0x230>)
 80014d6:	f001 fb89 	bl	8002bec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014da:	2308      	movs	r3, #8
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	484c      	ldr	r0, [pc, #304]	@ (8001624 <MX_GPIO_Init+0x228>)
 80014f2:	f001 f9df 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4846      	ldr	r0, [pc, #280]	@ (8001628 <MX_GPIO_Init+0x22c>)
 800150e:	f001 f9d1 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001512:	2308      	movs	r3, #8
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001522:	2305      	movs	r3, #5
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	483e      	ldr	r0, [pc, #248]	@ (8001628 <MX_GPIO_Init+0x22c>)
 800152e:	f001 f9c1 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001536:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	483a      	ldr	r0, [pc, #232]	@ (8001630 <MX_GPIO_Init+0x234>)
 8001548:	f001 f9b4 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800154c:	23c0      	movs	r3, #192	@ 0xc0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155c:	2305      	movs	r3, #5
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4832      	ldr	r0, [pc, #200]	@ (8001630 <MX_GPIO_Init+0x234>)
 8001568:	f001 f9a4 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800156c:	2304      	movs	r3, #4
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	482d      	ldr	r0, [pc, #180]	@ (8001634 <MX_GPIO_Init+0x238>)
 8001580:	f001 f998 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001596:	2305      	movs	r3, #5
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4824      	ldr	r0, [pc, #144]	@ (8001634 <MX_GPIO_Init+0x238>)
 80015a2:	f001 f987 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	481b      	ldr	r0, [pc, #108]	@ (800162c <MX_GPIO_Init+0x230>)
 80015c0:	f001 f978 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d6:	2306      	movs	r3, #6
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4811      	ldr	r0, [pc, #68]	@ (8001628 <MX_GPIO_Init+0x22c>)
 80015e2:	f001 f967 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015e6:	2320      	movs	r3, #32
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_GPIO_Init+0x230>)
 80015fa:	f001 f95b 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015fe:	2302      	movs	r3, #2
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001602:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <MX_GPIO_Init+0x228>)
 8001614:	f001 f94e 	bl	80028b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001618:	bf00      	nop
 800161a:	3730      	adds	r7, #48	@ 0x30
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40021000 	.word	0x40021000
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <HAL_MspInit+0x4c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001686:	2007      	movs	r0, #7
 8001688:	f000 ffd6 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001770 <HAL_ADC_MspInit+0xd8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d128      	bne.n	800170c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a25      	ldr	r2, [pc, #148]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	481c      	ldr	r0, [pc, #112]	@ (8001778 <HAL_ADC_MspInit+0xe0>)
 8001706:	f001 f8d5 	bl	80028b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800170a:	e02c      	b.n	8001766 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <HAL_ADC_MspInit+0xe4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d127      	bne.n	8001766 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	4a15      	ldr	r2, [pc, #84]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001724:	6453      	str	r3, [r2, #68]	@ 0x44
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <HAL_ADC_MspInit+0xdc>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800174e:	2306      	movs	r3, #6
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <HAL_ADC_MspInit+0xe0>)
 8001762:	f001 f8a7 	bl	80028b4 <HAL_GPIO_Init>
}
 8001766:	bf00      	nop
 8001768:	3730      	adds	r7, #48	@ 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40012000 	.word	0x40012000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020800 	.word	0x40020800
 800177c:	40012100 	.word	0x40012100

08001780 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <HAL_DAC_MspInit+0x7c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d127      	bne.n	80017f2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_DAC_MspInit+0x80>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a15      	ldr	r2, [pc, #84]	@ (8001800 <HAL_DAC_MspInit+0x80>)
 80017ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_DAC_MspInit+0x80>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_DAC_MspInit+0x80>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_DAC_MspInit+0x80>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_DAC_MspInit+0x80>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017da:	2330      	movs	r3, #48	@ 0x30
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	@ (8001804 <HAL_DAC_MspInit+0x84>)
 80017ee:	f001 f861 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40007400 	.word	0x40007400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	@ (800188c <HAL_I2C_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12c      	bne.n	8001884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001846:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184c:	2312      	movs	r3, #18
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001850:	2301      	movs	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001858:	2304      	movs	r3, #4
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	480c      	ldr	r0, [pc, #48]	@ (8001894 <HAL_I2C_MspInit+0x8c>)
 8001864:	f001 f826 	bl	80028b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001872:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001876:	6413      	str	r3, [r2, #64]	@ 0x40
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005400 	.word	0x40005400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020400 	.word	0x40020400

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a8:	d116      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a19      	ldr	r2, [pc, #100]	@ (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	201c      	movs	r0, #28
 80018cc:	f000 febf 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d0:	201c      	movs	r0, #28
 80018d2:	f000 fed8 	bl	8002686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d6:	e01a      	b.n	800190e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d115      	bne.n	800190e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	201d      	movs	r0, #29
 8001904:	f000 fea3 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001908:	201d      	movs	r0, #29
 800190a:	f000 febc 	bl	8002686 <HAL_NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40000400 	.word	0x40000400

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_UART_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_UART_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_UART_MspInit+0x8c>)
 8001996:	f000 ff8d 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	bf00      	nop
 80019c4:	e7fd      	b.n	80019c2 <HardFault_Handler+0x4>

080019c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	bf00      	nop
 80019d4:	e7fd      	b.n	80019d2 <BusFault_Handler+0x4>

080019d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019da:	bf00      	nop
 80019dc:	e7fd      	b.n	80019da <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f934 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <TIM2_IRQHandler+0x3c>)
 8001a1c:	f004 f8d0 	bl	8005bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  uint8_t message[] = "Hallo vanaf STM32 via RS232!\r\n";
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <TIM2_IRQHandler+0x40>)
 8001a22:	463c      	mov	r4, r7
 8001a24:	461d      	mov	r5, r3
 8001a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a2e:	c407      	stmia	r4!, {r0, r1, r2}
 8001a30:	8023      	strh	r3, [r4, #0]
 8001a32:	3402      	adds	r4, #2
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, message, sizeof(message) - 1, HAL_MAX_DELAY);
 8001a38:	4639      	mov	r1, r7
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3e:	221e      	movs	r2, #30
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <TIM2_IRQHandler+0x44>)
 8001a42:	f004 fccd 	bl	80063e0 <HAL_UART_Transmit>


  /* USER CODE END TIM2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000190 	.word	0x20000190
 8001a54:	0800b338 	.word	0x0800b338
 8001a58:	20000220 	.word	0x20000220

08001a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a62:	4817      	ldr	r0, [pc, #92]	@ (8001ac0 <TIM3_IRQHandler+0x64>)
 8001a64:	f004 f8ac 	bl	8005bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  HAL_ADC_Start(&hadc1);										// start conversion
 8001a68:	4816      	ldr	r0, [pc, #88]	@ (8001ac4 <TIM3_IRQHandler+0x68>)
 8001a6a:	f000 f98d 	bl	8001d88 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,11);							// wait for conversion to end -- mux ADC123_IN11 input PC1
 8001a6e:	210b      	movs	r1, #11
 8001a70:	4814      	ldr	r0, [pc, #80]	@ (8001ac4 <TIM3_IRQHandler+0x68>)
 8001a72:	f000 fa5b 	bl	8001f2c <HAL_ADC_PollForConversion>
  float newValue = HAL_ADC_GetValue(&hadc1);
 8001a76:	4813      	ldr	r0, [pc, #76]	@ (8001ac4 <TIM3_IRQHandler+0x68>)
 8001a78:	f000 fae3 	bl	8002042 <HAL_ADC_GetValue>
 8001a7c:	ee07 0a90 	vmov	s15, r0
 8001a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a84:	edc7 7a01 	vstr	s15, [r7, #4]

  samples[sample_index] = newValue;  // Vervang de oudste waarde met de nieuwe waarde
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <TIM3_IRQHandler+0x6c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <TIM3_IRQHandler+0x70>)
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]

  // Controleer of de pointer "teruggesprongen" is
  if (sample_index == SAMPLE_SIZE - 1) {
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <TIM3_IRQHandler+0x6c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2bff      	cmp	r3, #255	@ 0xff
 8001a9c:	d102      	bne.n	8001aa4 <TIM3_IRQHandler+0x48>
          // Pointer gaat van het einde terug naar het begin
          buffer_full = true;  // Buffer is "vol"
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <TIM3_IRQHandler+0x74>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
      }

  // Verhoog de index en maak er een circulaire buffer van
  sample_index = (sample_index + 1) % SAMPLE_SIZE;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <TIM3_IRQHandler+0x6c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	425a      	negs	r2, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	bf58      	it	pl
 8001ab2:	4253      	negpl	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <TIM3_IRQHandler+0x6c>)
 8001ab6:	6013      	str	r3, [r2, #0]



  /* USER CODE END TIM3_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001d8 	.word	0x200001d8
 8001ac4:	20000098 	.word	0x20000098
 8001ac8:	20000678 	.word	0x20000678
 8001acc:	20000278 	.word	0x20000278
 8001ad0:	2000067c 	.word	0x2000067c

08001ad4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <OTG_FS_IRQHandler+0x10>)
 8001ada:	f001 fb81 	bl	80031e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000a64 	.word	0x20000a64

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f008 fdec 	bl	800a6f4 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20020000 	.word	0x20020000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	20000680 	.word	0x20000680
 8001b50:	20000f90 	.word	0x20000f90

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <SystemInit+0x28>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <SystemInit+0x28>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b68:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <SystemInit+0x28>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b86:	e003      	b.n	8001b90 <LoopCopyDataInit>

08001b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b8e:	3104      	adds	r1, #4

08001b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b90:	480b      	ldr	r0, [pc, #44]	@ (8001bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b98:	d3f6      	bcc.n	8001b88 <CopyDataInit>
  ldr  r2, =_sbss
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b9c:	e002      	b.n	8001ba4 <LoopFillZerobss>

08001b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba0:	f842 3b04 	str.w	r3, [r2], #4

08001ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ba8:	d3f9      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001baa:	f7ff ffd3 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f008 fda7 	bl	800a700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7ff f99b 	bl	8000eec <main>
  bx  lr    
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bbc:	0800b754 	.word	0x0800b754
  ldr  r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001bc8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001bcc:	20000f8c 	.word	0x20000f8c

08001bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_Init+0x40>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_Init+0x40>)
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_Init+0x40>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 fd1b 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fd1e 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fd33 	bl	80026a2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c54:	f000 fcfb 	bl	800264e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000684 	.word	0x20000684

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000684 	.word	0x20000684

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008

08001d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e033      	b.n	8001d7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fcba 	bl	8001698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d46:	f023 0302 	bic.w	r3, r3, #2
 8001d4a:	f043 0202 	orr.w	r2, r3, #2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 faa4 	bl	80022a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d6e:	e001      	b.n	8001d74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Start+0x1a>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e0b2      	b.n	8001f08 <HAL_ADC_Start+0x180>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d018      	beq.n	8001dea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc8:	4b52      	ldr	r3, [pc, #328]	@ (8001f14 <HAL_ADC_Start+0x18c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_ADC_Start+0x190>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9a      	lsrs	r2, r3, #18
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d17a      	bne.n	8001eee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3c:	f023 0206 	bic.w	r2, r3, #6
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e54:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_ADC_Start+0x194>)
 8001e56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e60:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d12a      	bne.n	8001ec4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2b      	ldr	r2, [pc, #172]	@ (8001f20 <HAL_ADC_Start+0x198>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d015      	beq.n	8001ea4 <HAL_ADC_Start+0x11c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <HAL_ADC_Start+0x19c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_Start+0x106>
 8001e82:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_ADC_Start+0x194>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a25      	ldr	r2, [pc, #148]	@ (8001f28 <HAL_ADC_Start+0x1a0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d136      	bne.n	8001f06 <HAL_ADC_Start+0x17e>
 8001e98:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <HAL_ADC_Start+0x194>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d130      	bne.n	8001f06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d129      	bne.n	8001f06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	e020      	b.n	8001f06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a15      	ldr	r2, [pc, #84]	@ (8001f20 <HAL_ADC_Start+0x198>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d11b      	bne.n	8001f06 <HAL_ADC_Start+0x17e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d114      	bne.n	8001f06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e00b      	b.n	8001f06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000000 	.word	0x20000000
 8001f18:	431bde83 	.word	0x431bde83
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	40012000 	.word	0x40012000
 8001f24:	40012100 	.word	0x40012100
 8001f28:	40012200 	.word	0x40012200

08001f2c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f48:	d113      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f58:	d10b      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e063      	b.n	800203a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f72:	f7ff fe95 	bl	8001ca0 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f78:	e021      	b.n	8001fbe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f80:	d01d      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_ADC_PollForConversion+0x6c>
 8001f88:	f7ff fe8a 	bl	8001ca0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d212      	bcs.n	8001fbe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d00b      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f043 0204 	orr.w	r2, r3, #4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e03d      	b.n	800203a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d1d6      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0212 	mvn.w	r2, #18
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d123      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11f      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002010:	2b00      	cmp	r3, #0
 8002012:	d111      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e105      	b.n	8002284 <HAL_ADC_ConfigChannel+0x228>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d925      	bls.n	80020d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	3b1e      	subs	r3, #30
 800209e:	2207      	movs	r2, #7
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68d9      	ldr	r1, [r3, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	4603      	mov	r3, r0
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4403      	add	r3, r0
 80020c6:	3b1e      	subs	r3, #30
 80020c8:	409a      	lsls	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	e022      	b.n	800211a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	4603      	mov	r3, r0
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4403      	add	r3, r0
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d824      	bhi.n	800216c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b05      	subs	r3, #5
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b05      	subs	r3, #5
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
 800216a:	e04c      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d824      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b23      	subs	r3, #35	@ 0x23
 8002186:	221f      	movs	r2, #31
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43da      	mvns	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b23      	subs	r3, #35	@ 0x23
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80021bc:	e023      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b41      	subs	r3, #65	@ 0x41
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b41      	subs	r3, #65	@ 0x41
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <HAL_ADC_ConfigChannel+0x234>)
 8002208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a21      	ldr	r2, [pc, #132]	@ (8002294 <HAL_ADC_ConfigChannel+0x238>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d109      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1cc>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <HAL_ADC_ConfigChannel+0x238>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d123      	bne.n	800227a <HAL_ADC_ConfigChannel+0x21e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d003      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x1e6>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b11      	cmp	r3, #17
 8002240:	d11b      	bne.n	800227a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b10      	cmp	r3, #16
 8002254:	d111      	bne.n	800227a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_ADC_ConfigChannel+0x23c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_ADC_ConfigChannel+0x240>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9a      	lsrs	r2, r3, #18
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800226c:	e002      	b.n	8002274 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3b01      	subs	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40012300 	.word	0x40012300
 8002294:	40012000 	.word	0x40012000
 8002298:	20000000 	.word	0x20000000
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b79      	ldr	r3, [pc, #484]	@ (8002490 <ADC_Init+0x1f0>)
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800231a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <ADC_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e00f      	b.n	800239e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800239c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0202 	bic.w	r2, r2, #2
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
 80023b8:	005a      	lsls	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	035a      	lsls	r2, r3, #13
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e007      	b.n	8002414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002412:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	051a      	lsls	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	029a      	lsls	r2, r3, #10
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012300 	.word	0x40012300
 8002494:	0f000001 	.word	0x0f000001

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db0b      	blt.n	8002526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4907      	ldr	r1, [pc, #28]	@ (8002534 <__NVIC_EnableIRQ+0x38>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2001      	movs	r0, #1
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	@ (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	@ (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	@ 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
         );
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	@ 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002604:	d301      	bcc.n	800260a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002606:	2301      	movs	r3, #1
 8002608:	e00f      	b.n	800262a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260a:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <SysTick_Config+0x40>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002618:	f7ff ff8e 	bl	8002538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <SysTick_Config+0x40>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002622:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <SysTick_Config+0x40>)
 8002624:	2207      	movs	r2, #7
 8002626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	e000e010 	.word	0xe000e010

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff29 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002660:	f7ff ff3e 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff ff8e 	bl	800258c <NVIC_EncodePriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff5d 	bl	8002538 <__NVIC_SetPriority>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff31 	bl	80024fc <__NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffa2 	bl	80025f4 <SysTick_Config>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e014      	b.n	80026f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	791b      	ldrb	r3, [r3, #4]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff f84f 	bl	8001780 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e046      	b.n	80027a0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	795b      	ldrb	r3, [r3, #5]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_DAC_Start+0x20>
 800271a:	2302      	movs	r3, #2
 800271c:	e040      	b.n	80027a0 <HAL_DAC_Start+0xa2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2201      	movs	r2, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10f      	bne.n	8002768 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002752:	2b3c      	cmp	r3, #60	@ 0x3c
 8002754:	d11d      	bne.n	8002792 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e014      	b.n	8002792 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	213c      	movs	r1, #60	@ 0x3c
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	429a      	cmp	r2, r3
 8002780:	d107      	bne.n	8002792 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0202 	orr.w	r2, r2, #2
 8002790:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e015      	b.n	80027f4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3308      	adds	r3, #8
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e004      	b.n	80027ea <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	3314      	adds	r3, #20
 80027e8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	461a      	mov	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_DAC_ConfigChannel+0x1c>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e042      	b.n	80028a6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_DAC_ConfigChannel+0x2c>
 8002828:	2302      	movs	r3, #2
 800282a:	e03c      	b.n	80028a6 <HAL_DAC_ConfigChannel+0xa6>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2202      	movs	r2, #2
 8002836:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	22c0      	movs	r2, #192	@ 0xc0
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e16b      	b.n	8002ba8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f040 815a 	bne.w	8002ba2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d005      	beq.n	8002906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	2b02      	cmp	r3, #2
 8002904:	d130      	bne.n	8002968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 0201 	and.w	r2, r3, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d017      	beq.n	80029a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d123      	bne.n	80029f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80b4 	beq.w	8002ba2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b60      	ldr	r3, [pc, #384]	@ (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc0 <HAL_GPIO_Init+0x30c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a56:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc4 <HAL_GPIO_Init+0x310>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	@ (8002bc8 <HAL_GPIO_Init+0x314>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02b      	beq.n	8002ada <HAL_GPIO_Init+0x226>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a51      	ldr	r2, [pc, #324]	@ (8002bcc <HAL_GPIO_Init+0x318>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d025      	beq.n	8002ad6 <HAL_GPIO_Init+0x222>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a50      	ldr	r2, [pc, #320]	@ (8002bd0 <HAL_GPIO_Init+0x31c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01f      	beq.n	8002ad2 <HAL_GPIO_Init+0x21e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd4 <HAL_GPIO_Init+0x320>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d019      	beq.n	8002ace <HAL_GPIO_Init+0x21a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd8 <HAL_GPIO_Init+0x324>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x216>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8002bdc <HAL_GPIO_Init+0x328>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x212>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4c      	ldr	r2, [pc, #304]	@ (8002be0 <HAL_GPIO_Init+0x32c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x20e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8002be4 <HAL_GPIO_Init+0x330>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x20a>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e00e      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	e00c      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	e00a      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e008      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e004      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e002      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_GPIO_Init+0x228>
 8002ada:	2300      	movs	r3, #0
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f002 0203 	and.w	r2, r2, #3
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	4093      	lsls	r3, r2
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aec:	4935      	ldr	r1, [pc, #212]	@ (8002bc4 <HAL_GPIO_Init+0x310>)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1e:	4a32      	ldr	r2, [pc, #200]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b24:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b48:	4a27      	ldr	r2, [pc, #156]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <HAL_GPIO_Init+0x334>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	f67f ae90 	bls.w	80028d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40021400 	.word	0x40021400
 8002be0:	40021800 	.word	0x40021800
 8002be4:	40021c00 	.word	0x40021c00
 8002be8:	40013c00 	.word	0x40013c00

08002bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c08:	e003      	b.n	8002c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	041a      	lsls	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e059      	b.n	8002ce4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f007 f9d0 	bl	8009ff0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2203      	movs	r2, #3
 8002c54:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5e:	d102      	bne.n	8002c66 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 ffe9 	bl	8006c42 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7c1a      	ldrb	r2, [r3, #16]
 8002c78:	f88d 2000 	strb.w	r2, [sp]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c80:	f003 ff6a 	bl	8006b58 <USB_CoreInit>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e026      	b.n	8002ce4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 ffe1 	bl	8006c64 <USB_SetCurrentMode>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e017      	b.n	8002ce4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7c1a      	ldrb	r2, [r3, #16]
 8002cbc:	f88d 2000 	strb.w	r2, [sp]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc4:	f004 f984 	bl	8006fd0 <USB_HostInit>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e004      	b.n	8002ce4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b08b      	sub	sp, #44	@ 0x2c
 8002cf0:	af04      	add	r7, sp, #16
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	70fb      	strb	r3, [r7, #3]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70bb      	strb	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002d06:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002d08:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_HCD_HC_Init+0x2c>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e09d      	b.n	8002e54 <HAL_HCD_HC_Init+0x168>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3319      	adds	r3, #25
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3314      	adds	r3, #20
 8002d44:	787a      	ldrb	r2, [r7, #1]
 8002d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3315      	adds	r3, #21
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3326      	adds	r3, #38	@ 0x26
 8002d6c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002d70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	78bb      	ldrb	r3, [r7, #2]
 8002d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d7a:	b2d8      	uxtb	r0, r3
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3316      	adds	r3, #22
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fbc8 	bl	8003528 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da0a      	bge.n	8002db6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3317      	adds	r3, #23
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e009      	b.n	8002dca <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3317      	adds	r3, #23
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fa62 	bl	8007298 <USB_GetHostSpeed>
 8002dd4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002dd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10b      	bne.n	8002df6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002dde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_HCD_HC_Init+0x10a>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2bbc      	cmp	r3, #188	@ 0xbc
 8002df0:	d901      	bls.n	8002df6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002df2:	23bc      	movs	r3, #188	@ 0xbc
 8002df4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3318      	adds	r3, #24
 8002e06:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	b298      	uxth	r0, r3
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3328      	adds	r3, #40	@ 0x28
 8002e20:	4602      	mov	r2, r0
 8002e22:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	787c      	ldrb	r4, [r7, #1]
 8002e2e:	78ba      	ldrb	r2, [r7, #2]
 8002e30:	78f9      	ldrb	r1, [r7, #3]
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4623      	mov	r3, r4
 8002e42:	f004 fa51 	bl	80072e8 <USB_HC_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_HCD_HC_Halt+0x1e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e00f      	b.n	8002e9a <HAL_HCD_HC_Halt+0x3e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fde3 	bl	8007a56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	70fb      	strb	r3, [r7, #3]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	70bb      	strb	r3, [r7, #2]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3317      	adds	r3, #23
 8002ece:	78ba      	ldrb	r2, [r7, #2]
 8002ed0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3326      	adds	r3, #38	@ 0x26
 8002ee2:	787a      	ldrb	r2, [r7, #1]
 8002ee4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002ee6:	7c3b      	ldrb	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d114      	bne.n	8002f16 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	332a      	adds	r3, #42	@ 0x2a
 8002efc:	2203      	movs	r2, #3
 8002efe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3319      	adds	r3, #25
 8002f10:	7f3a      	ldrb	r2, [r7, #28]
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e009      	b.n	8002f2a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	332a      	adds	r3, #42	@ 0x2a
 8002f26:	2202      	movs	r2, #2
 8002f28:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f2a:	787b      	ldrb	r3, [r7, #1]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	f200 8102 	bhi.w	8003136 <HAL_HCD_HC_SubmitRequest+0x292>
 8002f32:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08003121 	.word	0x08003121
 8002f40:	0800300d 	.word	0x0800300d
 8002f44:	08003097 	.word	0x08003097
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f48:	7c3b      	ldrb	r3, [r7, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	f040 80f5 	bne.w	800313a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f50:	78bb      	ldrb	r3, [r7, #2]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d12d      	bne.n	8002fb2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f56:	8b3b      	ldrh	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	333d      	adds	r3, #61	@ 0x3d
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	333d      	adds	r3, #61	@ 0x3d
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	332a      	adds	r3, #42	@ 0x2a
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f9a:	e0ce      	b.n	800313a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	332a      	adds	r3, #42	@ 0x2a
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
      break;
 8002fb0:	e0c3      	b.n	800313a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331a      	adds	r3, #26
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 80b8 	bne.w	800313a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	333c      	adds	r3, #60	@ 0x3c
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	332a      	adds	r3, #42	@ 0x2a
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
      break;
 8002ff4:	e0a1      	b.n	800313a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	332a      	adds	r3, #42	@ 0x2a
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	e096      	b.n	800313a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800300c:	78bb      	ldrb	r3, [r7, #2]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d120      	bne.n	8003054 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	333d      	adds	r3, #61	@ 0x3d
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	332a      	adds	r3, #42	@ 0x2a
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800303c:	e07e      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	332a      	adds	r3, #42	@ 0x2a
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
      break;
 8003052:	e073      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	333c      	adds	r3, #60	@ 0x3c
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	332a      	adds	r3, #42	@ 0x2a
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
      break;
 800307e:	e05d      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	332a      	adds	r3, #42	@ 0x2a
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]
      break;
 8003094:	e052      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003096:	78bb      	ldrb	r3, [r7, #2]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d120      	bne.n	80030de <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	333d      	adds	r3, #61	@ 0x3d
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	332a      	adds	r3, #42	@ 0x2a
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030c6:	e039      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	332a      	adds	r3, #42	@ 0x2a
 80030d8:	2202      	movs	r2, #2
 80030da:	701a      	strb	r2, [r3, #0]
      break;
 80030dc:	e02e      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333c      	adds	r3, #60	@ 0x3c
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	332a      	adds	r3, #42	@ 0x2a
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e018      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	332a      	adds	r3, #42	@ 0x2a
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]
      break;
 800311e:	e00d      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	332a      	adds	r3, #42	@ 0x2a
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e002      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800313a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	332c      	adds	r3, #44	@ 0x2c
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	8b39      	ldrh	r1, [r7, #24]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4403      	add	r3, r0
 8003160:	3334      	adds	r3, #52	@ 0x34
 8003162:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	334c      	adds	r3, #76	@ 0x4c
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3338      	adds	r3, #56	@ 0x38
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3315      	adds	r3, #21
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334d      	adds	r3, #77	@ 0x4d
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	3310      	adds	r3, #16
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	1d19      	adds	r1, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	799b      	ldrb	r3, [r3, #6]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f004 f9b6 	bl	8007540 <USB_HC_StartXfer>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop

080031e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 feaa 	bl	8006f50 <USB_GetMode>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80fb 	bne.w	80033fa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fe6d 	bl	8006ee8 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80f1 	beq.w	80033f8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f003 fe64 	bl	8006ee8 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800322a:	d104      	bne.n	8003236 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003234:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fe54 	bl	8006ee8 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800324a:	d104      	bne.n	8003256 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003254:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fe44 	bl	8006ee8 <USB_ReadInterrupts>
 8003260:	4603      	mov	r3, r0
 8003262:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800326a:	d104      	bne.n	8003276 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003274:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fe34 	bl	8006ee8 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d103      	bne.n	8003292 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fe26 	bl	8006ee8 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a6:	d120      	bne.n	80032ea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80032b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032c2:	2110      	movs	r1, #16
 80032c4:	6938      	ldr	r0, [r7, #16]
 80032c6:	f003 fd19 	bl	8006cfc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032ca:	6938      	ldr	r0, [r7, #16]
 80032cc:	f003 fd48 	bl	8006d60 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7a5b      	ldrb	r3, [r3, #9]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d105      	bne.n	80032e4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 ff3a 	bl	8007158 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f006 ff01 	bl	800a0ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fdfa 	bl	8006ee8 <USB_ReadInterrupts>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032fe:	d102      	bne.n	8003306 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f001 fd4d 	bl	8004da0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fdec 	bl	8006ee8 <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d106      	bne.n	8003328 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f006 feca 	bl	800a0b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2208      	movs	r2, #8
 8003326:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f003 fddb 	bl	8006ee8 <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800333c:	d139      	bne.n	80033b2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 fb76 	bl	8007a34 <USB_HC_ReadInterrupt>
 8003348:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e025      	b.n	800339c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d018      	beq.n	8003396 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800337a:	d106      	bne.n	800338a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f905 	bl	8003592 <HCD_HC_IN_IRQHandler>
 8003388:	e005      	b.n	8003396 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 ff67 	bl	8004264 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	795b      	ldrb	r3, [r3, #5]
 80033a0:	461a      	mov	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d3d3      	bcc.n	8003350 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 fd96 	bl	8006ee8 <USB_ReadInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d101      	bne.n	80033ca <HAL_HCD_IRQHandler+0x1ea>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_HCD_IRQHandler+0x1ec>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d014      	beq.n	80033fa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 fbfe 	bl	8004be2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0210 	orr.w	r2, r2, #16
 80033f4:	619a      	str	r2, [r3, #24]
 80033f6:	e000      	b.n	80033fa <HAL_HCD_IRQHandler+0x21a>
      return;
 80033f8:	bf00      	nop
    }
  }
}
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_HCD_Start+0x16>
 8003412:	2302      	movs	r3, #2
 8003414:	e013      	b.n	800343e <HAL_HCD_Start+0x3e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f003 fefe 	bl	8007226 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fbf6 	bl	8006c20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_HCD_Stop+0x16>
 8003458:	2302      	movs	r3, #2
 800345a:	e00d      	b.n	8003478 <HAL_HCD_Stop+0x32>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f004 fc51 	bl	8007d10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fea0 	bl	80071d2 <USB_ResetPort>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334c      	adds	r3, #76	@ 0x4c
 80034b8:	781b      	ldrb	r3, [r3, #0]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3338      	adds	r3, #56	@ 0x38
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fee2 	bl	80072c6 <USB_GetCurrentFrame>
 8003502:	4603      	mov	r3, r0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f003 febd 	bl	8007298 <USB_GetHostSpeed>
 800351e:	4603      	mov	r3, r0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	331a      	adds	r3, #26
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	331b      	adds	r3, #27
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3325      	adds	r3, #37	@ 0x25
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3324      	adds	r3, #36	@ 0x24
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fcac 	bl	8006f0e <USB_ReadChInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11a      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	2304      	movs	r3, #4
 80035d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	334d      	adds	r3, #77	@ 0x4d
 80035e2:	2207      	movs	r2, #7
 80035e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fa31 	bl	8007a56 <USB_HC_Halt>
 80035f4:	e09e      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 fc85 	bl	8006f0e <USB_ReadChInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360e:	d11b      	bne.n	8003648 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003622:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	334d      	adds	r3, #77	@ 0x4d
 8003634:	2208      	movs	r2, #8
 8003636:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fa08 	bl	8007a56 <USB_HC_Halt>
 8003646:	e075      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f003 fc5c 	bl	8006f0e <USB_ReadChInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d11a      	bne.n	8003696 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800366c:	461a      	mov	r2, r3
 800366e:	2308      	movs	r3, #8
 8003670:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	334d      	adds	r3, #77	@ 0x4d
 8003682:	2206      	movs	r2, #6
 8003684:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f004 f9e1 	bl	8007a56 <USB_HC_Halt>
 8003694:	e04e      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fc35 	bl	8006f0e <USB_ReadChInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ae:	d11b      	bne.n	80036e8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036bc:	461a      	mov	r2, r3
 80036be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	334d      	adds	r3, #77	@ 0x4d
 80036d4:	2209      	movs	r2, #9
 80036d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 f9b8 	bl	8007a56 <USB_HC_Halt>
 80036e6:	e025      	b.n	8003734 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 fc0c 	bl	8006f0e <USB_ReadChInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fc:	2b80      	cmp	r3, #128	@ 0x80
 80036fe:	d119      	bne.n	8003734 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	334d      	adds	r3, #77	@ 0x4d
 8003722:	2207      	movs	r2, #7
 8003724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f004 f991 	bl	8007a56 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f003 fbe6 	bl	8006f0e <USB_ReadChInterrupts>
 8003742:	4603      	mov	r3, r0
 8003744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800374c:	d112      	bne.n	8003774 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f004 f97d 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	f000 bd75 	b.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fbc6 	bl	8006f0e <USB_ReadChInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	f040 8128 	bne.w	80039de <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	2320      	movs	r3, #32
 800379e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	331b      	adds	r3, #27
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d119      	bne.n	80037ea <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	331b      	adds	r3, #27
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	799b      	ldrb	r3, [r3, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01b      	beq.n	800382a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3330      	adds	r3, #48	@ 0x30
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	1ac9      	subs	r1, r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4403      	add	r3, r0
 8003826:	3338      	adds	r3, #56	@ 0x38
 8003828:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	334d      	adds	r3, #77	@ 0x4d
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3344      	adds	r3, #68	@ 0x44
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385e:	461a      	mov	r2, r3
 8003860:	2301      	movs	r3, #1
 8003862:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3326      	adds	r3, #38	@ 0x26
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3326      	adds	r3, #38	@ 0x26
 800388a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800388c:	2b02      	cmp	r3, #2
 800388e:	d110      	bne.n	80038b2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f004 f8dc 	bl	8007a56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038aa:	461a      	mov	r2, r3
 80038ac:	2310      	movs	r3, #16
 80038ae:	6093      	str	r3, [r2, #8]
 80038b0:	e03d      	b.n	800392e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3326      	adds	r3, #38	@ 0x26
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d00a      	beq.n	80038de <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3326      	adds	r3, #38	@ 0x26
 80038d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d127      	bne.n	800392e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	0151      	lsls	r1, r2, #5
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	440a      	add	r2, r1
 80038f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	334c      	adds	r3, #76	@ 0x4c
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	334c      	adds	r3, #76	@ 0x4c
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f006 fbed 	bl	800a108 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	799b      	ldrb	r3, [r3, #6]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d13b      	bne.n	80039ae <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	3338      	adds	r3, #56	@ 0x38
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4403      	add	r3, r0
 8003956:	3328      	adds	r3, #40	@ 0x28
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	440b      	add	r3, r1
 800395c:	1e59      	subs	r1, r3, #1
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4403      	add	r3, r0
 800396c:	3328      	adds	r3, #40	@ 0x28
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	fbb1 f3f3 	udiv	r3, r1, r3
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8470 	beq.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	333c      	adds	r3, #60	@ 0x3c
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2d8      	uxtb	r0, r3
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	333c      	adds	r3, #60	@ 0x3c
 80039a6:	4602      	mov	r2, r0
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	f000 bc58 	b.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	333c      	adds	r3, #60	@ 0x3c
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	f083 0301 	eor.w	r3, r3, #1
 80039c6:	b2d8      	uxtb	r0, r3
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	333c      	adds	r3, #60	@ 0x3c
 80039d6:	4602      	mov	r2, r0
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	f000 bc40 	b.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fa91 	bl	8006f0e <USB_ReadChInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d131      	bne.n	8003a5a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	2320      	movs	r3, #32
 8003a06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	331a      	adds	r3, #26
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	f040 841f 	bne.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	331b      	adds	r3, #27
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	334d      	adds	r3, #77	@ 0x4d
 8003a44:	2203      	movs	r2, #3
 8003a46:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 f800 	bl	8007a56 <USB_HC_Halt>
 8003a56:	f000 bc02 	b.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f003 fa53 	bl	8006f0e <USB_ReadChInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	f040 8305 	bne.w	800407e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	2302      	movs	r3, #2
 8003a84:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334d      	adds	r3, #77	@ 0x4d
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d114      	bne.n	8003ac6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	334d      	adds	r3, #77	@ 0x4d
 8003aac:	2202      	movs	r2, #2
 8003aae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	334c      	adds	r3, #76	@ 0x4c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	e2cc      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334d      	adds	r3, #77	@ 0x4d
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b06      	cmp	r3, #6
 8003ada:	d114      	bne.n	8003b06 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	334d      	adds	r3, #77	@ 0x4d
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	@ 0x4c
 8003b00:	2205      	movs	r2, #5
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e2ac      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	334d      	adds	r3, #77	@ 0x4d
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b07      	cmp	r3, #7
 8003b1a:	d00b      	beq.n	8003b34 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334d      	adds	r3, #77	@ 0x4d
 8003b2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	f040 80a6 	bne.w	8003c80 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	334d      	adds	r3, #77	@ 0x4d
 8003b44:	2202      	movs	r2, #2
 8003b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	@ 0x44
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4403      	add	r3, r0
 8003b68:	3344      	adds	r3, #68	@ 0x44
 8003b6a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3344      	adds	r3, #68	@ 0x44
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d943      	bls.n	8003c0a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3344      	adds	r3, #68	@ 0x44
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	331a      	adds	r3, #26
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d123      	bne.n	8003bf4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	331b      	adds	r3, #27
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	331c      	adds	r3, #28
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	0151      	lsls	r1, r2, #5
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	440a      	add	r2, r1
 8003bea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	334c      	adds	r3, #76	@ 0x4c
 8003c04:	2204      	movs	r2, #4
 8003c06:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c08:	e229      	b.n	800405e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	334c      	adds	r3, #76	@ 0x4c
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3326      	adds	r3, #38	@ 0x26
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3326      	adds	r3, #38	@ 0x26
 8003c44:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	f040 8209 	bne.w	800405e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c62:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c6a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c7e:	e1ee      	b.n	800405e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334d      	adds	r3, #77	@ 0x4d
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	f040 80c8 	bne.w	8003e28 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	334d      	adds	r3, #77	@ 0x4d
 8003ca8:	2202      	movs	r2, #2
 8003caa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	331b      	adds	r3, #27
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	f040 81ce 	bne.w	8004060 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3326      	adds	r3, #38	@ 0x26
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d16b      	bne.n	8003db2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3348      	adds	r3, #72	@ 0x48
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c59      	adds	r1, r3, #1
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4403      	add	r3, r0
 8003cfa:	3348      	adds	r3, #72	@ 0x48
 8003cfc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3348      	adds	r3, #72	@ 0x48
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d943      	bls.n	8003d9c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	3348      	adds	r3, #72	@ 0x48
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	331b      	adds	r3, #27
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3344      	adds	r3, #68	@ 0x44
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d809      	bhi.n	8003d66 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331c      	adds	r3, #28
 8003d62:	2201      	movs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d84:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	334c      	adds	r3, #76	@ 0x4c
 8003d96:	2204      	movs	r2, #4
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e014      	b.n	8003dc6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	334c      	adds	r3, #76	@ 0x4c
 8003dac:	2202      	movs	r2, #2
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e009      	b.n	8003dc6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	334c      	adds	r3, #76	@ 0x4c
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3326      	adds	r3, #38	@ 0x26
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3326      	adds	r3, #38	@ 0x26
 8003dec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	f040 8136 	bne.w	8004060 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e11b      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334d      	adds	r3, #77	@ 0x4d
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	f040 8081 	bne.w	8003f42 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2202      	movs	r2, #2
 8003e52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	331b      	adds	r3, #27
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	f040 80fa 	bne.w	8004060 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	334c      	adds	r3, #76	@ 0x4c
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ebe:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eda:	f023 0320 	bic.w	r3, r3, #32
 8003ede:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3326      	adds	r3, #38	@ 0x26
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3326      	adds	r3, #38	@ 0x26
 8003f06:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	f040 80a9 	bne.w	8004060 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f24:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f2c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e08e      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334d      	adds	r3, #77	@ 0x4d
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d143      	bne.n	8003fe0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	2202      	movs	r2, #2
 8003f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334c      	adds	r3, #76	@ 0x4c
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3326      	adds	r3, #38	@ 0x26
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3326      	adds	r3, #38	@ 0x26
 8003fa6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d159      	bne.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fc2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e03f      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	334d      	adds	r3, #77	@ 0x4d
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d126      	bne.n	8004044 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334d      	adds	r3, #77	@ 0x4d
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3344      	adds	r3, #68	@ 0x44
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4403      	add	r3, r0
 800402a:	3344      	adds	r3, #68	@ 0x44
 800402c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	334c      	adds	r3, #76	@ 0x4c
 800403e:	2204      	movs	r2, #4
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	e00d      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	334d      	adds	r3, #77	@ 0x4d
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	f000 8100 	beq.w	800425c <HCD_HC_IN_IRQHandler+0xcca>
 800405c:	e000      	b.n	8004060 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800405e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	334c      	adds	r3, #76	@ 0x4c
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f006 f846 	bl	800a108 <HAL_HCD_HC_NotifyURBChange_Callback>
 800407c:	e0ef      	b.n	800425e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f002 ff41 	bl	8006f0e <USB_ReadChInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b40      	cmp	r3, #64	@ 0x40
 8004094:	d12f      	bne.n	80040f6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a2:	461a      	mov	r2, r3
 80040a4:	2340      	movs	r3, #64	@ 0x40
 80040a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	334d      	adds	r3, #77	@ 0x4d
 80040b8:	2205      	movs	r2, #5
 80040ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	331a      	adds	r3, #26
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	3344      	adds	r3, #68	@ 0x44
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f003 fcb1 	bl	8007a56 <USB_HC_Halt>
 80040f4:	e0b3      	b.n	800425e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f002 ff05 	bl	8006f0e <USB_ReadChInterrupts>
 8004104:	4603      	mov	r3, r0
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	f040 80a7 	bne.w	800425e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	3326      	adds	r3, #38	@ 0x26
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d11b      	bne.n	800415e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3344      	adds	r3, #68	@ 0x44
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	334d      	adds	r3, #77	@ 0x4d
 800414a:	2204      	movs	r2, #4
 800414c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fc7d 	bl	8007a56 <USB_HC_Halt>
 800415c:	e03f      	b.n	80041de <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	3326      	adds	r3, #38	@ 0x26
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3326      	adds	r3, #38	@ 0x26
 8004184:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004186:	2b02      	cmp	r3, #2
 8004188:	d129      	bne.n	80041de <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3344      	adds	r3, #68	@ 0x44
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	799b      	ldrb	r3, [r3, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HCD_HC_IN_IRQHandler+0xc2a>
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	331b      	adds	r3, #27
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d110      	bne.n	80041de <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	334d      	adds	r3, #77	@ 0x4d
 80041cc:	2204      	movs	r2, #4
 80041ce:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f003 fc3c 	bl	8007a56 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	331b      	adds	r3, #27
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d129      	bne.n	8004248 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	331b      	adds	r3, #27
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	440a      	add	r2, r1
 800421e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004226:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	440a      	add	r2, r1
 800423e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004242:	f043 0320 	orr.w	r3, r3, #32
 8004246:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004254:	461a      	mov	r2, r3
 8004256:	2310      	movs	r3, #16
 8004258:	6093      	str	r3, [r2, #8]
 800425a:	e000      	b.n	800425e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800425c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fe43 	bl	8006f0e <USB_ReadChInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d11b      	bne.n	80042ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429e:	461a      	mov	r2, r3
 80042a0:	2304      	movs	r3, #4
 80042a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	@ 0x4d
 80042b4:	2207      	movs	r2, #7
 80042b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 fbc8 	bl	8007a56 <USB_HC_Halt>
 80042c6:	f000 bc89 	b.w	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 fe1b 	bl	8006f0e <USB_ReadChInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	f040 8082 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f0:	461a      	mov	r2, r3
 80042f2:	2320      	movs	r3, #32
 80042f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3319      	adds	r3, #25
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d124      	bne.n	8004356 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3319      	adds	r3, #25
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	334c      	adds	r3, #76	@ 0x4c
 8004330:	2202      	movs	r2, #2
 8004332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	2203      	movs	r2, #3
 8004346:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f003 fb80 	bl	8007a56 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	331a      	adds	r3, #26
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 8437 	bne.w	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	331b      	adds	r3, #27
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 842b 	bne.w	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3326      	adds	r3, #38	@ 0x26
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d009      	beq.n	80043b0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	331b      	adds	r3, #27
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	334d      	adds	r3, #77	@ 0x4d
 80043c0:	2203      	movs	r2, #3
 80043c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f003 fb42 	bl	8007a56 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3344      	adds	r3, #68	@ 0x44
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e3f9      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f002 fd8c 	bl	8006f0e <USB_ReadChInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004400:	d111      	bne.n	8004426 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004414:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f003 fb19 	bl	8007a56 <USB_HC_Halt>
 8004424:	e3da      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f002 fd6d 	bl	8006f0e <USB_ReadChInterrupts>
 8004434:	4603      	mov	r3, r0
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d168      	bne.n	8004510 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3344      	adds	r3, #68	@ 0x44
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f002 fd57 	bl	8006f0e <USB_ReadChInterrupts>
 8004460:	4603      	mov	r3, r0
 8004462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d112      	bne.n	8004490 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3319      	adds	r3, #25
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448a:	461a      	mov	r2, r3
 800448c:	2340      	movs	r3, #64	@ 0x40
 800448e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	331b      	adds	r3, #27
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d019      	beq.n	80044da <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	331b      	adds	r3, #27
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e6:	461a      	mov	r2, r3
 80044e8:	2301      	movs	r3, #1
 80044ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	334d      	adds	r3, #77	@ 0x4d
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f003 faa4 	bl	8007a56 <USB_HC_Halt>
 800450e:	e365      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f002 fcf8 	bl	8006f0e <USB_ReadChInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d139      	bne.n	800459c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334d      	adds	r3, #77	@ 0x4d
 8004538:	2205      	movs	r2, #5
 800453a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	331a      	adds	r3, #26
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3319      	adds	r3, #25
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3344      	adds	r3, #68	@ 0x44
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f003 fa67 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004594:	461a      	mov	r2, r3
 8004596:	2340      	movs	r3, #64	@ 0x40
 8004598:	6093      	str	r3, [r2, #8]
 800459a:	e31f      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 fcb2 	bl	8006f0e <USB_ReadChInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d11a      	bne.n	80045ea <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	2308      	movs	r3, #8
 80045c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	334d      	adds	r3, #77	@ 0x4d
 80045d6:	2206      	movs	r2, #6
 80045d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 fa37 	bl	8007a56 <USB_HC_Halt>
 80045e8:	e2f8      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 fc8b 	bl	8006f0e <USB_ReadChInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d144      	bne.n	800468c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	3344      	adds	r3, #68	@ 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	334d      	adds	r3, #77	@ 0x4d
 8004626:	2204      	movs	r2, #4
 8004628:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	3319      	adds	r3, #25
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d114      	bne.n	800466a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3318      	adds	r3, #24
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	3319      	adds	r3, #25
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f003 f9ef 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004684:	461a      	mov	r2, r3
 8004686:	2310      	movs	r3, #16
 8004688:	6093      	str	r3, [r2, #8]
 800468a:	e2a7      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f002 fc3a 	bl	8006f0e <USB_ReadChInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a0:	2b80      	cmp	r3, #128	@ 0x80
 80046a2:	f040 8083 	bne.w	80047ac <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	799b      	ldrb	r3, [r3, #6]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d111      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334d      	adds	r3, #77	@ 0x4d
 80046be:	2207      	movs	r2, #7
 80046c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 f9c3 	bl	8007a56 <USB_HC_Halt>
 80046d0:	e062      	b.n	8004798 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3344      	adds	r3, #68	@ 0x44
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	1c59      	adds	r1, r3, #1
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4403      	add	r3, r0
 80046f2:	3344      	adds	r3, #68	@ 0x44
 80046f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	3344      	adds	r3, #68	@ 0x44
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d922      	bls.n	8004752 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3344      	adds	r3, #68	@ 0x44
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334c      	adds	r3, #76	@ 0x4c
 8004730:	2204      	movs	r2, #4
 8004732:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	334c      	adds	r3, #76	@ 0x4c
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f005 fcdc 	bl	800a108 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004750:	e022      	b.n	8004798 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	334c      	adds	r3, #76	@ 0x4c
 8004762:	2202      	movs	r2, #2
 8004764:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800477c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004784:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a4:	461a      	mov	r2, r3
 80047a6:	2380      	movs	r3, #128	@ 0x80
 80047a8:	6093      	str	r3, [r2, #8]
 80047aa:	e217      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f002 fbaa 	bl	8006f0e <USB_ReadChInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c4:	d11b      	bne.n	80047fe <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	334d      	adds	r3, #77	@ 0x4d
 80047d6:	2209      	movs	r2, #9
 80047d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f003 f937 	bl	8007a56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047fa:	6093      	str	r3, [r2, #8]
 80047fc:	e1ee      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f002 fb81 	bl	8006f0e <USB_ReadChInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	f040 81df 	bne.w	8004bd6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004824:	461a      	mov	r2, r3
 8004826:	2302      	movs	r3, #2
 8004828:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	334d      	adds	r3, #77	@ 0x4d
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	f040 8093 	bne.w	8004968 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	334d      	adds	r3, #77	@ 0x4d
 8004852:	2202      	movs	r2, #2
 8004854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	334c      	adds	r3, #76	@ 0x4c
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3326      	adds	r3, #38	@ 0x26
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d00b      	beq.n	8004898 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3326      	adds	r3, #38	@ 0x26
 8004890:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004892:	2b03      	cmp	r3, #3
 8004894:	f040 8190 	bne.w	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	799b      	ldrb	r3, [r3, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d115      	bne.n	80048cc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	333d      	adds	r3, #61	@ 0x3d
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	f083 0301 	eor.w	r3, r3, #1
 80048b8:	b2d8      	uxtb	r0, r3
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	333d      	adds	r3, #61	@ 0x3d
 80048c8:	4602      	mov	r2, r0
 80048ca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	799b      	ldrb	r3, [r3, #6]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	f040 8171 	bne.w	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3334      	adds	r3, #52	@ 0x34
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8165 	beq.w	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3334      	adds	r3, #52	@ 0x34
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4403      	add	r3, r0
 800490e:	3328      	adds	r3, #40	@ 0x28
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	440b      	add	r3, r1
 8004914:	1e59      	subs	r1, r3, #1
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4403      	add	r3, r0
 8004924:	3328      	adds	r3, #40	@ 0x28
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	fbb1 f3f3 	udiv	r3, r1, r3
 800492c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 813f 	beq.w	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	333d      	adds	r3, #61	@ 0x3d
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	f083 0301 	eor.w	r3, r3, #1
 8004952:	b2d8      	uxtb	r0, r3
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	333d      	adds	r3, #61	@ 0x3d
 8004962:	4602      	mov	r2, r0
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e127      	b.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	334d      	adds	r3, #77	@ 0x4d
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d120      	bne.n	80049c0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334d      	adds	r3, #77	@ 0x4d
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	331b      	adds	r3, #27
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 8107 	bne.w	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	334c      	adds	r3, #76	@ 0x4c
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e0fb      	b.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	334d      	adds	r3, #77	@ 0x4d
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d13a      	bne.n	8004a4c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	334d      	adds	r3, #77	@ 0x4d
 80049e6:	2202      	movs	r2, #2
 80049e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	334c      	adds	r3, #76	@ 0x4c
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	331b      	adds	r3, #27
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 80d1 	bne.w	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	331b      	adds	r3, #27
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a48:	6053      	str	r3, [r2, #4]
 8004a4a:	e0b5      	b.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334d      	adds	r3, #77	@ 0x4d
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d114      	bne.n	8004a8c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	334d      	adds	r3, #77	@ 0x4d
 8004a72:	2202      	movs	r2, #2
 8004a74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	334c      	adds	r3, #76	@ 0x4c
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e095      	b.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	@ 0x4d
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d114      	bne.n	8004acc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	334d      	adds	r3, #77	@ 0x4d
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334c      	adds	r3, #76	@ 0x4c
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e075      	b.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	334d      	adds	r3, #77	@ 0x4d
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b07      	cmp	r3, #7
 8004ae0:	d00a      	beq.n	8004af8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	334d      	adds	r3, #77	@ 0x4d
 8004af2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	d170      	bne.n	8004bda <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	334d      	adds	r3, #77	@ 0x4d
 8004b08:	2202      	movs	r2, #2
 8004b0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3344      	adds	r3, #68	@ 0x44
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4403      	add	r3, r0
 8004b2c:	3344      	adds	r3, #68	@ 0x44
 8004b2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3344      	adds	r3, #68	@ 0x44
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d914      	bls.n	8004b70 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3344      	adds	r3, #68	@ 0x44
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b5a:	78fa      	ldrb	r2, [r7, #3]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	334c      	adds	r3, #76	@ 0x4c
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b6e:	e022      	b.n	8004bb6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334c      	adds	r3, #76	@ 0x4c
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b9a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ba2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bb6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	334c      	adds	r3, #76	@ 0x4c
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f005 fa9a 	bl	800a108 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bd4:	e002      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004bda:	bf00      	nop
  }
}
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	@ 0x28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	0c5b      	lsrs	r3, r3, #17
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d004      	beq.n	8004c28 <HCD_RXQLVL_IRQHandler+0x46>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	f000 80b6 	beq.w	8004d92 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c26:	e0b7      	b.n	8004d98 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80b3 	beq.w	8004d96 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	332c      	adds	r3, #44	@ 0x2c
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a7 	beq.w	8004d96 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	3338      	adds	r3, #56	@ 0x38
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	18d1      	adds	r1, r2, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4403      	add	r3, r0
 8004c6c:	3334      	adds	r3, #52	@ 0x34
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4299      	cmp	r1, r3
 8004c72:	f200 8083 	bhi.w	8004d7c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	332c      	adds	r3, #44	@ 0x2c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	f002 f8d1 	bl	8006e38 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	332c      	adds	r3, #44	@ 0x2c
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	18d1      	adds	r1, r2, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4403      	add	r3, r0
 8004cba:	332c      	adds	r3, #44	@ 0x2c
 8004cbc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3338      	adds	r3, #56	@ 0x38
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	18d1      	adds	r1, r2, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4403      	add	r3, r0
 8004ce2:	3338      	adds	r3, #56	@ 0x38
 8004ce4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	0cdb      	lsrs	r3, r3, #19
 8004cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cfa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3328      	adds	r3, #40	@ 0x28
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d13f      	bne.n	8004d96 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03c      	beq.n	8004d96 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	333c      	adds	r3, #60	@ 0x3c
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2d8      	uxtb	r0, r3
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	333c      	adds	r3, #60	@ 0x3c
 8004d76:	4602      	mov	r2, r0
 8004d78:	701a      	strb	r2, [r3, #0]
      break;
 8004d7a:	e00c      	b.n	8004d96 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	334c      	adds	r3, #76	@ 0x4c
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	701a      	strb	r2, [r3, #0]
      break;
 8004d90:	e001      	b.n	8004d96 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d92:	bf00      	nop
 8004d94:	e000      	b.n	8004d98 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d96:	bf00      	nop
  }
}
 8004d98:	bf00      	nop
 8004d9a:	3728      	adds	r7, #40	@ 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004dcc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d10b      	bne.n	8004df0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f005 f974 	bl	800a0d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f043 0302 	orr.w	r3, r3, #2
 8004dee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d132      	bne.n	8004e60 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f043 0308 	orr.w	r3, r3, #8
 8004e00:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d126      	bne.n	8004e5a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7a5b      	ldrb	r3, [r3, #9]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d113      	bne.n	8004e3c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e1e:	d106      	bne.n	8004e2e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2102      	movs	r1, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 f996 	bl	8007158 <USB_InitFSLSPClkSel>
 8004e2c:	e011      	b.n	8004e52 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2101      	movs	r1, #1
 8004e34:	4618      	mov	r0, r3
 8004e36:	f002 f98f 	bl	8007158 <USB_InitFSLSPClkSel>
 8004e3a:	e00a      	b.n	8004e52 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	79db      	ldrb	r3, [r3, #7]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d106      	bne.n	8004e52 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004e50:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f005 f966 	bl	800a124 <HAL_HCD_PortEnabled_Callback>
 8004e58:	e002      	b.n	8004e60 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f005 f970 	bl	800a140 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d103      	bne.n	8004e72 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f043 0320 	orr.w	r3, r3, #32
 8004e70:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6013      	str	r3, [r2, #0]
}
 8004e7e:	bf00      	nop
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e12b      	b.n	80050f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fcaa 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	@ 0x24
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eec:	f000 fd80 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4a81      	ldr	r2, [pc, #516]	@ (80050fc <HAL_I2C_Init+0x274>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d807      	bhi.n	8004f0c <HAL_I2C_Init+0x84>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a80      	ldr	r2, [pc, #512]	@ (8005100 <HAL_I2C_Init+0x278>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	bf94      	ite	ls
 8004f04:	2301      	movls	r3, #1
 8004f06:	2300      	movhi	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e006      	b.n	8004f1a <HAL_I2C_Init+0x92>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8005104 <HAL_I2C_Init+0x27c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bf94      	ite	ls
 8004f14:	2301      	movls	r3, #1
 8004f16:	2300      	movhi	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0e7      	b.n	80050f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a78      	ldr	r2, [pc, #480]	@ (8005108 <HAL_I2C_Init+0x280>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0c9b      	lsrs	r3, r3, #18
 8004f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a6a      	ldr	r2, [pc, #424]	@ (80050fc <HAL_I2C_Init+0x274>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d802      	bhi.n	8004f5c <HAL_I2C_Init+0xd4>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e009      	b.n	8004f70 <HAL_I2C_Init+0xe8>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	4a69      	ldr	r2, [pc, #420]	@ (800510c <HAL_I2C_Init+0x284>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	099b      	lsrs	r3, r3, #6
 8004f6e:	3301      	adds	r3, #1
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	495c      	ldr	r1, [pc, #368]	@ (80050fc <HAL_I2C_Init+0x274>)
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	d819      	bhi.n	8004fc4 <HAL_I2C_Init+0x13c>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1e59      	subs	r1, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f9e:	1c59      	adds	r1, r3, #1
 8004fa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004fa4:	400b      	ands	r3, r1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_I2C_Init+0x138>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1e59      	subs	r1, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	e051      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	e04f      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d111      	bne.n	8004ff0 <HAL_I2C_Init+0x168>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1e58      	subs	r0, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	440b      	add	r3, r1
 8004fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e012      	b.n	8005016 <HAL_I2C_Init+0x18e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1e58      	subs	r0, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	0099      	lsls	r1, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	fbb0 f3f3 	udiv	r3, r0, r3
 8005006:	3301      	adds	r3, #1
 8005008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Init+0x196>
 800501a:	2301      	movs	r3, #1
 800501c:	e022      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <HAL_I2C_Init+0x1bc>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1e58      	subs	r0, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	440b      	add	r3, r1
 8005034:	fbb0 f3f3 	udiv	r3, r0, r3
 8005038:	3301      	adds	r3, #1
 800503a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005042:	e00f      	b.n	8005064 <HAL_I2C_Init+0x1dc>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1e58      	subs	r0, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	0099      	lsls	r1, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	fbb0 f3f3 	udiv	r3, r0, r3
 800505a:	3301      	adds	r3, #1
 800505c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	6809      	ldr	r1, [r1, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6911      	ldr	r1, [r2, #16]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68d2      	ldr	r2, [r2, #12]
 800509e:	4311      	orrs	r1, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	430b      	orrs	r3, r1
 80050a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	000186a0 	.word	0x000186a0
 8005100:	001e847f 	.word	0x001e847f
 8005104:	003d08ff 	.word	0x003d08ff
 8005108:	431bde83 	.word	0x431bde83
 800510c:	10624dd3 	.word	0x10624dd3

08005110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e267      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d075      	beq.n	800521a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800512e:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d00c      	beq.n	8005154 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513a:	4b85      	ldr	r3, [pc, #532]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005142:	2b08      	cmp	r3, #8
 8005144:	d112      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b82      	ldr	r3, [pc, #520]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005152:	d10b      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	4b7e      	ldr	r3, [pc, #504]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05b      	beq.n	8005218 <HAL_RCC_OscConfig+0x108>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d157      	bne.n	8005218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e242      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005174:	d106      	bne.n	8005184 <HAL_RCC_OscConfig+0x74>
 8005176:	4b76      	ldr	r3, [pc, #472]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a75      	ldr	r2, [pc, #468]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x98>
 800518e:	4b70      	ldr	r3, [pc, #448]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6f      	ldr	r2, [pc, #444]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b6d      	ldr	r3, [pc, #436]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6c      	ldr	r2, [pc, #432]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 80051a8:	4b69      	ldr	r3, [pc, #420]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a68      	ldr	r2, [pc, #416]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b66      	ldr	r3, [pc, #408]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a65      	ldr	r2, [pc, #404]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fc fd6a 	bl	8001ca0 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fc fd66 	bl	8001ca0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	@ 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e207      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xc0>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fc fd56 	bl	8001ca0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fc fd52 	bl	8001ca0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	@ 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e1f3      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	4b51      	ldr	r3, [pc, #324]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0xe8>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d063      	beq.n	80052ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005226:	4b4a      	ldr	r3, [pc, #296]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005232:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800523a:	2b08      	cmp	r3, #8
 800523c:	d11c      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523e:	4b44      	ldr	r3, [pc, #272]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d116      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524a:	4b41      	ldr	r3, [pc, #260]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d001      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e1c7      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005262:	4b3b      	ldr	r3, [pc, #236]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4937      	ldr	r1, [pc, #220]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005276:	e03a      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005280:	4b34      	ldr	r3, [pc, #208]	@ (8005354 <HAL_RCC_OscConfig+0x244>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fc fd0b 	bl	8001ca0 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528e:	f7fc fd07 	bl	8001ca0 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1a8      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4925      	ldr	r1, [pc, #148]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	e015      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c2:	4b24      	ldr	r3, [pc, #144]	@ (8005354 <HAL_RCC_OscConfig+0x244>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fc fcea 	bl	8001ca0 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d0:	f7fc fce6 	bl	8001ca0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e187      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d036      	beq.n	8005368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <HAL_RCC_OscConfig+0x248>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fc fcca 	bl	8001ca0 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005310:	f7fc fcc6 	bl	8001ca0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e167      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x200>
 800532e:	e01b      	b.n	8005368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <HAL_RCC_OscConfig+0x248>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005336:	f7fc fcb3 	bl	8001ca0 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	e00e      	b.n	800535c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533e:	f7fc fcaf 	bl	8001ca0 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d907      	bls.n	800535c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e150      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005350:	40023800 	.word	0x40023800
 8005354:	42470000 	.word	0x42470000
 8005358:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	4b88      	ldr	r3, [pc, #544]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ea      	bne.n	800533e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8097 	beq.w	80054a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537a:	4b81      	ldr	r3, [pc, #516]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	4b7d      	ldr	r3, [pc, #500]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	4a7c      	ldr	r2, [pc, #496]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005394:	6413      	str	r3, [r2, #64]	@ 0x40
 8005396:	4b7a      	ldr	r3, [pc, #488]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a6:	4b77      	ldr	r3, [pc, #476]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d118      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b2:	4b74      	ldr	r3, [pc, #464]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053be:	f7fc fc6f 	bl	8001ca0 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fc fc6b 	bl	8001ca0 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e10c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d106      	bne.n	80053fa <HAL_RCC_OscConfig+0x2ea>
 80053ec:	4b64      	ldr	r3, [pc, #400]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	4a63      	ldr	r2, [pc, #396]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f8:	e01c      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0x30c>
 8005402:	4b5f      	ldr	r3, [pc, #380]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005406:	4a5e      	ldr	r2, [pc, #376]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6713      	str	r3, [r2, #112]	@ 0x70
 800540e:	4b5c      	ldr	r3, [pc, #368]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005412:	4a5b      	ldr	r2, [pc, #364]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	@ 0x70
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 800541c:	4b58      	ldr	r3, [pc, #352]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005420:	4a57      	ldr	r2, [pc, #348]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	6713      	str	r3, [r2, #112]	@ 0x70
 8005428:	4b55      	ldr	r3, [pc, #340]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542c:	4a54      	ldr	r2, [pc, #336]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 0304 	bic.w	r3, r3, #4
 8005432:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fc fc30 	bl	8001ca0 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fc fc2c 	bl	8001ca0 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0cb      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545a:	4b49      	ldr	r3, [pc, #292]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0ee      	beq.n	8005444 <HAL_RCC_OscConfig+0x334>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7fc fc1a 	bl	8001ca0 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546e:	e00a      	b.n	8005486 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005470:	f7fc fc16 	bl	8001ca0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0b5      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ee      	bne.n	8005470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005498:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	4a38      	ldr	r2, [pc, #224]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a1 	beq.w	80055f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ae:	4b34      	ldr	r3, [pc, #208]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d05c      	beq.n	8005574 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d141      	bne.n	8005546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b31      	ldr	r3, [pc, #196]	@ (8005588 <HAL_RCC_OscConfig+0x478>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc fbea 	bl	8001ca0 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fc fbe6 	bl	8001ca0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e087      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	3b01      	subs	r3, #1
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	491b      	ldr	r1, [pc, #108]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005518:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <HAL_RCC_OscConfig+0x478>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fc fbbf 	bl	8001ca0 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005526:	f7fc fbbb 	bl	8001ca0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e05c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x416>
 8005544:	e054      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_RCC_OscConfig+0x478>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fc fba8 	bl	8001ca0 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fc fba4 	bl	8001ca0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e045      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x444>
 8005572:	e03d      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e038      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005580:	40023800 	.word	0x40023800
 8005584:	40007000 	.word	0x40007000
 8005588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCC_OscConfig+0x4ec>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d028      	beq.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d121      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d11a      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	3b01      	subs	r3, #1
 80055d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0cc      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005614:	4b68      	ldr	r3, [pc, #416]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d90c      	bls.n	800563c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b65      	ldr	r3, [pc, #404]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b63      	ldr	r3, [pc, #396]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0b8      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b59      	ldr	r3, [pc, #356]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a58      	ldr	r2, [pc, #352]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800565e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566c:	4b53      	ldr	r3, [pc, #332]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a52      	ldr	r2, [pc, #328]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b50      	ldr	r3, [pc, #320]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	494d      	ldr	r1, [pc, #308]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d044      	beq.n	8005720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d119      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d003      	beq.n	80056be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	4b3f      	ldr	r3, [pc, #252]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e06f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ce:	4b3b      	ldr	r3, [pc, #236]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e067      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056de:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4934      	ldr	r1, [pc, #208]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f0:	f7fc fad6 	bl	8001ca0 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fc fad2 	bl	8001ca0 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e04f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 020c 	and.w	r2, r3, #12
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	429a      	cmp	r2, r3
 800571e:	d1eb      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005720:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d20c      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b22      	ldr	r3, [pc, #136]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b19      	ldr	r3, [pc, #100]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4916      	ldr	r1, [pc, #88]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490e      	ldr	r1, [pc, #56]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005786:	f000 f821 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490a      	ldr	r1, [pc, #40]	@ (80057c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc fa36 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023c00 	.word	0x40023c00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	0800b35c 	.word	0x0800b35c
 80057c4:	20000000 	.word	0x20000000
 80057c8:	20000004 	.word	0x20000004

080057cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b094      	sub	sp, #80	@ 0x50
 80057d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057e4:	4b79      	ldr	r3, [pc, #484]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d00d      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x40>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	f200 80e1 	bhi.w	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x34>
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0x3a>
 80057fe:	e0db      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b73      	ldr	r3, [pc, #460]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005802:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005804:	e0db      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005806:	4b73      	ldr	r3, [pc, #460]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800580a:	e0d8      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800580c:	4b6f      	ldr	r3, [pc, #444]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005816:	4b6d      	ldr	r3, [pc, #436]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005822:	4b6a      	ldr	r3, [pc, #424]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	2200      	movs	r2, #0
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	633b      	str	r3, [r7, #48]	@ 0x30
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
 800583a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	0159      	lsls	r1, r3, #5
 800584c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005850:	0150      	lsls	r0, r2, #5
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4621      	mov	r1, r4
 8005858:	1a51      	subs	r1, r2, r1
 800585a:	6139      	str	r1, [r7, #16]
 800585c:	4629      	mov	r1, r5
 800585e:	eb63 0301 	sbc.w	r3, r3, r1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005870:	4659      	mov	r1, fp
 8005872:	018b      	lsls	r3, r1, #6
 8005874:	4651      	mov	r1, sl
 8005876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800587a:	4651      	mov	r1, sl
 800587c:	018a      	lsls	r2, r1, #6
 800587e:	4651      	mov	r1, sl
 8005880:	ebb2 0801 	subs.w	r8, r2, r1
 8005884:	4659      	mov	r1, fp
 8005886:	eb63 0901 	sbc.w	r9, r3, r1
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800589a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589e:	4690      	mov	r8, r2
 80058a0:	4699      	mov	r9, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	eb18 0303 	adds.w	r3, r8, r3
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	462b      	mov	r3, r5
 80058ac:	eb49 0303 	adc.w	r3, r9, r3
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058be:	4629      	mov	r1, r5
 80058c0:	024b      	lsls	r3, r1, #9
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058c8:	4621      	mov	r1, r4
 80058ca:	024a      	lsls	r2, r1, #9
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d2:	2200      	movs	r2, #0
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058dc:	f7fb f892 	bl	8000a04 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	e058      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ea:	4b38      	ldr	r3, [pc, #224]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	2200      	movs	r2, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	4611      	mov	r1, r2
 80058f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058fa:	623b      	str	r3, [r7, #32]
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	f04f 0000 	mov.w	r0, #0
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	0159      	lsls	r1, r3, #5
 8005912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005916:	0150      	lsls	r0, r2, #5
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4641      	mov	r1, r8
 800591e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005922:	4649      	mov	r1, r9
 8005924:	eb63 0b01 	sbc.w	fp, r3, r1
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800593c:	ebb2 040a 	subs.w	r4, r2, sl
 8005940:	eb63 050b 	sbc.w	r5, r3, fp
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00eb      	lsls	r3, r5, #3
 800594e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	4643      	mov	r3, r8
 800595a:	18e3      	adds	r3, r4, r3
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	464b      	mov	r3, r9
 8005960:	eb45 0303 	adc.w	r3, r5, r3
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005972:	4629      	mov	r1, r5
 8005974:	028b      	lsls	r3, r1, #10
 8005976:	4621      	mov	r1, r4
 8005978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800597c:	4621      	mov	r1, r4
 800597e:	028a      	lsls	r2, r1, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005986:	2200      	movs	r2, #0
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005990:	f7fb f838 	bl	8000a04 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4613      	mov	r3, r2
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059b6:	e002      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3750      	adds	r7, #80	@ 0x50
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	007a1200 	.word	0x007a1200

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000000 	.word	0x20000000

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800b36c 	.word	0x0800b36c

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a1c:	f7ff ffdc 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	0b5b      	lsrs	r3, r3, #13
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4903      	ldr	r1, [pc, #12]	@ (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	0800b36c 	.word	0x0800b36c

08005a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e041      	b.n	8005ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb ff16 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f000 fa88 	bl	8005f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e04e      	b.n	8005b96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a23      	ldr	r2, [pc, #140]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d022      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d01d      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d018      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	@ (8005bac <HAL_TIM_Base_Start_IT+0xcc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d013      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00e      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d010      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e007      	b.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40001800 	.word	0x40001800

08005bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0202 	mvn.w	r2, #2
 8005bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9a3 	bl	8005f56 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f995 	bl	8005f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f9a6 	bl	8005f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d020      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0204 	mvn.w	r2, #4
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f97d 	bl	8005f56 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f96f 	bl	8005f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f980 	bl	8005f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d020      	beq.n	8005cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0208 	mvn.w	r2, #8
 8005c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2204      	movs	r2, #4
 8005c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f957 	bl	8005f56 <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f949 	bl	8005f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f95a 	bl	8005f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d020      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01b      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f931 	bl	8005f56 <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f923 	bl	8005f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f934 	bl	8005f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0201 	mvn.w	r2, #1
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f901 	bl	8005f2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 faee 	bl	800632c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f905 	bl	8005f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0220 	mvn.w	r2, #32
 8005d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fac0 	bl	8006318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_ConfigClockSource+0x1c>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0b4      	b.n	8005f26 <HAL_TIM_ConfigClockSource+0x186>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d03e      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0xd4>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	f200 8087 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e02:	f000 8086 	beq.w	8005f12 <HAL_TIM_ConfigClockSource+0x172>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	d87f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b70      	cmp	r3, #112	@ 0x70
 8005e0e:	d01a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xa6>
 8005e10:	2b70      	cmp	r3, #112	@ 0x70
 8005e12:	d87b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b60      	cmp	r3, #96	@ 0x60
 8005e16:	d050      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x11a>
 8005e18:	2b60      	cmp	r3, #96	@ 0x60
 8005e1a:	d877      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b50      	cmp	r3, #80	@ 0x50
 8005e1e:	d03c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xfa>
 8005e20:	2b50      	cmp	r3, #80	@ 0x50
 8005e22:	d873      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	d058      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x13a>
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d86f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b30      	cmp	r3, #48	@ 0x30
 8005e2e:	d064      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e30:	2b30      	cmp	r3, #48	@ 0x30
 8005e32:	d86b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d060      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d867      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05c      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d05a      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x15a>
 8005e44:	e062      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e56:	f000 f9c3 	bl	80061e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
      break;
 8005e72:	e04f      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	f000 f9ac 	bl	80061e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e96:	609a      	str	r2, [r3, #8]
      break;
 8005e98:	e03c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 f920 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2150      	movs	r1, #80	@ 0x50
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f979 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e02c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 f93f 	bl	800614a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2160      	movs	r1, #96	@ 0x60
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f969 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e01c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 f900 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2140      	movs	r1, #64	@ 0x40
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f959 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e00c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f000 f950 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005f0a:	e003      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e000      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	d00f      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a43      	ldr	r2, [pc, #268]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a42      	ldr	r2, [pc, #264]	@ (80060c8 <TIM_Base_SetConfig+0x134>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a41      	ldr	r2, [pc, #260]	@ (80060cc <TIM_Base_SetConfig+0x138>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a40      	ldr	r2, [pc, #256]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d108      	bne.n	8005fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02b      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d027      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a32      	ldr	r2, [pc, #200]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d023      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a31      	ldr	r2, [pc, #196]	@ (80060c8 <TIM_Base_SetConfig+0x134>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01f      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a30      	ldr	r2, [pc, #192]	@ (80060cc <TIM_Base_SetConfig+0x138>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01b      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d017      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2e      	ldr	r2, [pc, #184]	@ (80060d4 <TIM_Base_SetConfig+0x140>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2d      	ldr	r2, [pc, #180]	@ (80060d8 <TIM_Base_SetConfig+0x144>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2c      	ldr	r2, [pc, #176]	@ (80060dc <TIM_Base_SetConfig+0x148>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2b      	ldr	r2, [pc, #172]	@ (80060e0 <TIM_Base_SetConfig+0x14c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2a      	ldr	r2, [pc, #168]	@ (80060e4 <TIM_Base_SetConfig+0x150>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a29      	ldr	r2, [pc, #164]	@ (80060e8 <TIM_Base_SetConfig+0x154>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a10      	ldr	r2, [pc, #64]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0xf8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a12      	ldr	r2, [pc, #72]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d103      	bne.n	8006094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f023 0201 	bic.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]
  }
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40010400 	.word	0x40010400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800
 80060e0:	40001800 	.word	0x40001800
 80060e4:	40001c00 	.word	0x40001c00
 80060e8:	40002000 	.word	0x40002000

080060ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f023 0210 	bic.w	r2, r3, #16
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f043 0307 	orr.w	r3, r3, #7
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	431a      	orrs	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006234:	2302      	movs	r3, #2
 8006236:	e05a      	b.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006284:	d01d      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1a      	ldr	r2, [pc, #104]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a18      	ldr	r2, [pc, #96]	@ (800630c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a15      	ldr	r2, [pc, #84]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10c      	bne.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40001800 	.word	0x40001800

08006318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e042      	b.n	80063d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fb fada 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	@ 0x24
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f973 	bl	8006670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	@ 0x28
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d175      	bne.n	80064ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_UART_Transmit+0x2c>
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e06e      	b.n	80064ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2221      	movs	r2, #33	@ 0x21
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800641e:	f7fb fc3f 	bl	8001ca0 <HAL_GetTick>
 8006422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006438:	d108      	bne.n	800644c <HAL_UART_Transmit+0x6c>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	e003      	b.n	8006454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006454:	e02e      	b.n	80064b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2200      	movs	r2, #0
 800645e:	2180      	movs	r1, #128	@ 0x80
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f848 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e03a      	b.n	80064ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800648c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	3302      	adds	r3, #2
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	e007      	b.n	80064a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1cb      	bne.n	8006456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2200      	movs	r2, #0
 80064c6:	2140      	movs	r1, #64	@ 0x40
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f814 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e006      	b.n	80064ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006506:	e03b      	b.n	8006580 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800650e:	d037      	beq.n	8006580 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006510:	f7fb fbc6 	bl	8001ca0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	6a3a      	ldr	r2, [r7, #32]
 800651c:	429a      	cmp	r2, r3
 800651e:	d302      	bcc.n	8006526 <UART_WaitOnFlagUntilTimeout+0x30>
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e03a      	b.n	80065a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d023      	beq.n	8006580 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b80      	cmp	r3, #128	@ 0x80
 800653c:	d020      	beq.n	8006580 <UART_WaitOnFlagUntilTimeout+0x8a>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b40      	cmp	r3, #64	@ 0x40
 8006542:	d01d      	beq.n	8006580 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b08      	cmp	r3, #8
 8006550:	d116      	bne.n	8006580 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f81d 	bl	80065a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2208      	movs	r2, #8
 8006572:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e00f      	b.n	80065a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4013      	ands	r3, r2
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	429a      	cmp	r2, r3
 800659c:	d0b4      	beq.n	8006508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b095      	sub	sp, #84	@ 0x54
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800660a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	2b01      	cmp	r3, #1
 800661e:	d119      	bne.n	8006654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330c      	adds	r3, #12
 8006626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f023 0310 	bic.w	r3, r3, #16
 8006636:	647b      	str	r3, [r7, #68]	@ 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006640:	61ba      	str	r2, [r7, #24]
 8006642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6979      	ldr	r1, [r7, #20]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	613b      	str	r3, [r7, #16]
   return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e5      	bne.n	8006620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006662:	bf00      	nop
 8006664:	3754      	adds	r7, #84	@ 0x54
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006674:	b0c0      	sub	sp, #256	@ 0x100
 8006676:	af00      	add	r7, sp, #0
 8006678:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668c:	68d9      	ldr	r1, [r3, #12]
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	ea40 0301 	orr.w	r3, r0, r1
 8006698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066c8:	f021 010c 	bic.w	r1, r1, #12
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066d6:	430b      	orrs	r3, r1
 80066d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ea:	6999      	ldr	r1, [r3, #24]
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	ea40 0301 	orr.w	r3, r0, r1
 80066f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b8f      	ldr	r3, [pc, #572]	@ (800693c <UART_SetConfig+0x2cc>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d005      	beq.n	8006710 <UART_SetConfig+0xa0>
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b8d      	ldr	r3, [pc, #564]	@ (8006940 <UART_SetConfig+0x2d0>)
 800670c:	429a      	cmp	r2, r3
 800670e:	d104      	bne.n	800671a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006710:	f7ff f982 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8006714:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006718:	e003      	b.n	8006722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800671a:	f7ff f969 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 800671e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672c:	f040 810c 	bne.w	8006948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006734:	2200      	movs	r2, #0
 8006736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800673a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800673e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	1891      	adds	r1, r2, r2
 8006748:	65b9      	str	r1, [r7, #88]	@ 0x58
 800674a:	415b      	adcs	r3, r3
 800674c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800674e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006752:	4621      	mov	r1, r4
 8006754:	eb12 0801 	adds.w	r8, r2, r1
 8006758:	4629      	mov	r1, r5
 800675a:	eb43 0901 	adc.w	r9, r3, r1
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800676e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006772:	4690      	mov	r8, r2
 8006774:	4699      	mov	r9, r3
 8006776:	4623      	mov	r3, r4
 8006778:	eb18 0303 	adds.w	r3, r8, r3
 800677c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006780:	462b      	mov	r3, r5
 8006782:	eb49 0303 	adc.w	r3, r9, r3
 8006786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800678a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006796:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800679a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800679e:	460b      	mov	r3, r1
 80067a0:	18db      	adds	r3, r3, r3
 80067a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a4:	4613      	mov	r3, r2
 80067a6:	eb42 0303 	adc.w	r3, r2, r3
 80067aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80067ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067b4:	f7fa f926 	bl	8000a04 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4b61      	ldr	r3, [pc, #388]	@ (8006944 <UART_SetConfig+0x2d4>)
 80067be:	fba3 2302 	umull	r2, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	011c      	lsls	r4, r3, #4
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	1891      	adds	r1, r2, r2
 80067de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067e0:	415b      	adcs	r3, r3
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067e8:	4641      	mov	r1, r8
 80067ea:	eb12 0a01 	adds.w	sl, r2, r1
 80067ee:	4649      	mov	r1, r9
 80067f0:	eb43 0b01 	adc.w	fp, r3, r1
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006808:	4692      	mov	sl, r2
 800680a:	469b      	mov	fp, r3
 800680c:	4643      	mov	r3, r8
 800680e:	eb1a 0303 	adds.w	r3, sl, r3
 8006812:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006816:	464b      	mov	r3, r9
 8006818:	eb4b 0303 	adc.w	r3, fp, r3
 800681c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800682c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006834:	460b      	mov	r3, r1
 8006836:	18db      	adds	r3, r3, r3
 8006838:	643b      	str	r3, [r7, #64]	@ 0x40
 800683a:	4613      	mov	r3, r2
 800683c:	eb42 0303 	adc.w	r3, r2, r3
 8006840:	647b      	str	r3, [r7, #68]	@ 0x44
 8006842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800684a:	f7fa f8db 	bl	8000a04 <__aeabi_uldivmod>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4611      	mov	r1, r2
 8006854:	4b3b      	ldr	r3, [pc, #236]	@ (8006944 <UART_SetConfig+0x2d4>)
 8006856:	fba3 2301 	umull	r2, r3, r3, r1
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2264      	movs	r2, #100	@ 0x64
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	1acb      	subs	r3, r1, r3
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800686a:	4b36      	ldr	r3, [pc, #216]	@ (8006944 <UART_SetConfig+0x2d4>)
 800686c:	fba3 2302 	umull	r2, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006878:	441c      	add	r4, r3
 800687a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006884:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	1891      	adds	r1, r2, r2
 8006892:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006894:	415b      	adcs	r3, r3
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800689c:	4641      	mov	r1, r8
 800689e:	1851      	adds	r1, r2, r1
 80068a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80068a2:	4649      	mov	r1, r9
 80068a4:	414b      	adcs	r3, r1
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068b4:	4659      	mov	r1, fp
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4651      	mov	r1, sl
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4651      	mov	r1, sl
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4642      	mov	r2, r8
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068d0:	464b      	mov	r3, r9
 80068d2:	460a      	mov	r2, r1
 80068d4:	eb42 0303 	adc.w	r3, r2, r3
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068f0:	460b      	mov	r3, r1
 80068f2:	18db      	adds	r3, r3, r3
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f6:	4613      	mov	r3, r2
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006906:	f7fa f87d 	bl	8000a04 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <UART_SetConfig+0x2d4>)
 8006910:	fba3 1302 	umull	r1, r3, r3, r2
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2164      	movs	r1, #100	@ 0x64
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	3332      	adds	r3, #50	@ 0x32
 8006922:	4a08      	ldr	r2, [pc, #32]	@ (8006944 <UART_SetConfig+0x2d4>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f003 0207 	and.w	r2, r3, #7
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4422      	add	r2, r4
 8006936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006938:	e106      	b.n	8006b48 <UART_SetConfig+0x4d8>
 800693a:	bf00      	nop
 800693c:	40011000 	.word	0x40011000
 8006940:	40011400 	.word	0x40011400
 8006944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800694c:	2200      	movs	r2, #0
 800694e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006952:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800695a:	4642      	mov	r2, r8
 800695c:	464b      	mov	r3, r9
 800695e:	1891      	adds	r1, r2, r2
 8006960:	6239      	str	r1, [r7, #32]
 8006962:	415b      	adcs	r3, r3
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
 8006966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800696a:	4641      	mov	r1, r8
 800696c:	1854      	adds	r4, r2, r1
 800696e:	4649      	mov	r1, r9
 8006970:	eb43 0501 	adc.w	r5, r3, r1
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	00eb      	lsls	r3, r5, #3
 800697e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006982:	00e2      	lsls	r2, r4, #3
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	4643      	mov	r3, r8
 800698a:	18e3      	adds	r3, r4, r3
 800698c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006990:	464b      	mov	r3, r9
 8006992:	eb45 0303 	adc.w	r3, r5, r3
 8006996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069b6:	4629      	mov	r1, r5
 80069b8:	008b      	lsls	r3, r1, #2
 80069ba:	4621      	mov	r1, r4
 80069bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c0:	4621      	mov	r1, r4
 80069c2:	008a      	lsls	r2, r1, #2
 80069c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069c8:	f7fa f81c 	bl	8000a04 <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4b60      	ldr	r3, [pc, #384]	@ (8006b54 <UART_SetConfig+0x4e4>)
 80069d2:	fba3 2302 	umull	r2, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	011c      	lsls	r4, r3, #4
 80069da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	61b9      	str	r1, [r7, #24]
 80069f4:	415b      	adcs	r3, r3
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069fc:	4641      	mov	r1, r8
 80069fe:	1851      	adds	r1, r2, r1
 8006a00:	6139      	str	r1, [r7, #16]
 8006a02:	4649      	mov	r1, r9
 8006a04:	414b      	adcs	r3, r1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a14:	4659      	mov	r1, fp
 8006a16:	00cb      	lsls	r3, r1, #3
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1e:	4651      	mov	r1, sl
 8006a20:	00ca      	lsls	r2, r1, #3
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a30:	464b      	mov	r3, r9
 8006a32:	460a      	mov	r2, r1
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a54:	4649      	mov	r1, r9
 8006a56:	008b      	lsls	r3, r1, #2
 8006a58:	4641      	mov	r1, r8
 8006a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a5e:	4641      	mov	r1, r8
 8006a60:	008a      	lsls	r2, r1, #2
 8006a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a66:	f7f9 ffcd 	bl	8000a04 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4b38      	ldr	r3, [pc, #224]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006a72:	fba3 2301 	umull	r2, r3, r3, r1
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	2264      	movs	r2, #100	@ 0x64
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	1acb      	subs	r3, r1, r3
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	3332      	adds	r3, #50	@ 0x32
 8006a84:	4a33      	ldr	r2, [pc, #204]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006a86:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a90:	441c      	add	r4, r3
 8006a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a96:	2200      	movs	r2, #0
 8006a98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	1891      	adds	r1, r2, r2
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	415b      	adcs	r3, r3
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	1851      	adds	r1, r2, r1
 8006ab4:	6039      	str	r1, [r7, #0]
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	414b      	adcs	r3, r1
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ac8:	4659      	mov	r1, fp
 8006aca:	00cb      	lsls	r3, r1, #3
 8006acc:	4651      	mov	r1, sl
 8006ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad2:	4651      	mov	r1, sl
 8006ad4:	00ca      	lsls	r2, r1, #3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	4642      	mov	r2, r8
 8006ade:	189b      	adds	r3, r3, r2
 8006ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	eb42 0303 	adc.w	r3, r2, r3
 8006aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006af6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b04:	4649      	mov	r1, r9
 8006b06:	008b      	lsls	r3, r1, #2
 8006b08:	4641      	mov	r1, r8
 8006b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0e:	4641      	mov	r1, r8
 8006b10:	008a      	lsls	r2, r1, #2
 8006b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b16:	f7f9 ff75 	bl	8000a04 <__aeabi_uldivmod>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006b20:	fba3 1302 	umull	r1, r3, r3, r2
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	2164      	movs	r1, #100	@ 0x64
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	3332      	adds	r3, #50	@ 0x32
 8006b32:	4a08      	ldr	r2, [pc, #32]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006b34:	fba2 2303 	umull	r2, r3, r2, r3
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	f003 020f 	and.w	r2, r3, #15
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4422      	add	r2, r4
 8006b46:	609a      	str	r2, [r3, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b54:	51eb851f 	.word	0x51eb851f

08006b58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b58:	b084      	sub	sp, #16
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	f107 001c 	add.w	r0, r7, #28
 8006b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d123      	bne.n	8006bba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d105      	bne.n	8006bae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f9dc 	bl	8006f6c <USB_CoreReset>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
 8006bb8:	e01b      	b.n	8006bf2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9d0 	bl	8006f6c <USB_CoreReset>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006be4:	e005      	b.n	8006bf2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bf2:	7fbb      	ldrb	r3, [r7, #30]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d10b      	bne.n	8006c10 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f043 0206 	orr.w	r2, r3, #6
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c1c:	b004      	add	sp, #16
 8006c1e:	4770      	bx	lr

08006c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f043 0201 	orr.w	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d115      	bne.n	8006cb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c92:	200a      	movs	r0, #10
 8006c94:	f7fb f810 	bl	8001cb8 <HAL_Delay>
      ms += 10U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	330a      	adds	r3, #10
 8006c9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f956 	bl	8006f50 <USB_GetMode>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d01e      	beq.n	8006ce8 <USB_SetCurrentMode+0x84>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cae:	d9f0      	bls.n	8006c92 <USB_SetCurrentMode+0x2e>
 8006cb0:	e01a      	b.n	8006ce8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d115      	bne.n	8006ce4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cc4:	200a      	movs	r0, #10
 8006cc6:	f7fa fff7 	bl	8001cb8 <HAL_Delay>
      ms += 10U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	330a      	adds	r3, #10
 8006cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f93d 	bl	8006f50 <USB_GetMode>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <USB_SetCurrentMode+0x84>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ce0:	d9f0      	bls.n	8006cc4 <USB_SetCurrentMode+0x60>
 8006ce2:	e001      	b.n	8006ce8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e005      	b.n	8006cf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2bc8      	cmp	r3, #200	@ 0xc8
 8006cec:	d101      	bne.n	8006cf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d16:	d901      	bls.n	8006d1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e01b      	b.n	8006d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	daf2      	bge.n	8006d0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	019b      	lsls	r3, r3, #6
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d40:	d901      	bls.n	8006d46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e006      	b.n	8006d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d0f0      	beq.n	8006d34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d78:	d901      	bls.n	8006d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e018      	b.n	8006db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	daf2      	bge.n	8006d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2210      	movs	r2, #16
 8006d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e006      	b.n	8006db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0310 	and.w	r3, r3, #16
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d0f0      	beq.n	8006d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	@ 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	460b      	mov	r3, r1
 8006dcc:	71fb      	strb	r3, [r7, #7]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d123      	bne.n	8006e2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006de2:	88bb      	ldrh	r3, [r7, #4]
 8006de4:	3303      	adds	r3, #3
 8006de6:	089b      	lsrs	r3, r3, #2
 8006de8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	e018      	b.n	8006e22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	031a      	lsls	r2, r3, #12
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3301      	adds	r3, #1
 8006e08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	3301      	adds	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d3e2      	bcc.n	8006df0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3724      	adds	r7, #36	@ 0x24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b08b      	sub	sp, #44	@ 0x2c
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4613      	mov	r3, r2
 8006e44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	089b      	lsrs	r3, r3, #2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	623b      	str	r3, [r7, #32]
 8006e62:	e014      	b.n	8006e8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	3301      	adds	r3, #1
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	3301      	adds	r3, #1
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	3301      	adds	r3, #1
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	3301      	adds	r3, #1
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	6a3a      	ldr	r2, [r7, #32]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d3e6      	bcc.n	8006e64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e96:	8bfb      	ldrh	r3, [r7, #30]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01e      	beq.n	8006eda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f107 0310 	add.w	r3, r7, #16
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	3301      	adds	r3, #1
 8006ecc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ece:	8bfb      	ldrh	r3, [r7, #30]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ed4:	8bfb      	ldrh	r3, [r7, #30]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1ea      	bne.n	8006eb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	372c      	adds	r7, #44	@ 0x2c
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4013      	ands	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f42:	68bb      	ldr	r3, [r7, #8]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f84:	d901      	bls.n	8006f8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e01b      	b.n	8006fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	daf2      	bge.n	8006f78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f043 0201 	orr.w	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fae:	d901      	bls.n	8006fb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e006      	b.n	8006fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d0f0      	beq.n	8006fa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d119      	bne.n	800705a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800702a:	2b01      	cmp	r3, #1
 800702c:	d10a      	bne.n	8007044 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e014      	b.n	800706e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007052:	f023 0304 	bic.w	r3, r3, #4
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e009      	b.n	800706e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800706e:	2110      	movs	r1, #16
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fe43 	bl	8006cfc <USB_FlushTxFifo>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fe6d 	bl	8006d60 <USB_FlushRxFifo>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007090:	2300      	movs	r3, #0
 8007092:	613b      	str	r3, [r7, #16]
 8007094:	e015      	b.n	80070c2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a2:	461a      	mov	r2, r3
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070a8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b6:	461a      	mov	r2, r3
 80070b8:	2300      	movs	r3, #0
 80070ba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	3301      	adds	r3, #1
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070c6:	461a      	mov	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d3e3      	bcc.n	8007096 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070da:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a18      	ldr	r2, [pc, #96]	@ (8007140 <USB_HostInit+0x170>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10b      	bne.n	80070fc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ea:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <USB_HostInit+0x174>)
 80070f0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a14      	ldr	r2, [pc, #80]	@ (8007148 <USB_HostInit+0x178>)
 80070f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80070fa:	e009      	b.n	8007110 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2280      	movs	r2, #128	@ 0x80
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a11      	ldr	r2, [pc, #68]	@ (800714c <USB_HostInit+0x17c>)
 8007106:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a11      	ldr	r2, [pc, #68]	@ (8007150 <USB_HostInit+0x180>)
 800710c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f043 0210 	orr.w	r2, r3, #16
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <USB_HostInit+0x184>)
 800712a:	4313      	orrs	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800713c:	b004      	add	sp, #16
 800713e:	4770      	bx	lr
 8007140:	40040000 	.word	0x40040000
 8007144:	01000200 	.word	0x01000200
 8007148:	00e00300 	.word	0x00e00300
 800714c:	00600080 	.word	0x00600080
 8007150:	004000e0 	.word	0x004000e0
 8007154:	a3200008 	.word	0xa3200008

08007158 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007190:	4313      	orrs	r3, r2
 8007192:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a0:	461a      	mov	r2, r3
 80071a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071a6:	6053      	str	r3, [r2, #4]
 80071a8:	e00c      	b.n	80071c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d107      	bne.n	80071c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071b6:	461a      	mov	r2, r3
 80071b8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80071bc:	6053      	str	r3, [r2, #4]
 80071be:	e001      	b.n	80071c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007200:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007202:	2064      	movs	r0, #100	@ 0x64
 8007204:	f7fa fd58 	bl	8001cb8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007214:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007216:	200a      	movs	r0, #10
 8007218:	f7fa fd4e 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800724a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <USB_DriveVbus+0x44>
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007268:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007274:	d109      	bne.n	800728a <USB_DriveVbus+0x64>
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007288:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	0c5b      	lsrs	r3, r3, #17
 80072b6:	f003 0303 	and.w	r3, r3, #3
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	b29b      	uxth	r3, r3
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	70fb      	strb	r3, [r7, #3]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70bb      	strb	r3, [r7, #2]
 80072fe:	4613      	mov	r3, r2
 8007300:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007316:	461a      	mov	r2, r3
 8007318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800731c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800731e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007322:	2b03      	cmp	r3, #3
 8007324:	d87c      	bhi.n	8007420 <USB_HC_Init+0x138>
 8007326:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <USB_HC_Init+0x44>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	0800733d 	.word	0x0800733d
 8007330:	080073e3 	.word	0x080073e3
 8007334:	0800733d 	.word	0x0800733d
 8007338:	080073a5 	.word	0x080073a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007348:	461a      	mov	r2, r3
 800734a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800734e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007350:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da10      	bge.n	800737a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	440a      	add	r2, r1
 800736e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007376:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007378:	e055      	b.n	8007426 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a6f      	ldr	r2, [pc, #444]	@ (800753c <USB_HC_Init+0x254>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d151      	bne.n	8007426 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	78fa      	ldrb	r2, [r7, #3]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	440a      	add	r2, r1
 8007398:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800739c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80073a0:	60d3      	str	r3, [r2, #12]
      break;
 80073a2:	e040      	b.n	8007426 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b0:	461a      	mov	r2, r3
 80073b2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80073b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da34      	bge.n	800742a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80073e0:	e023      	b.n	800742a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ee:	461a      	mov	r2, r3
 80073f0:	f240 2325 	movw	r3, #549	@ 0x225
 80073f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da17      	bge.n	800742e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4413      	add	r3, r2
 8007406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	440a      	add	r2, r1
 8007414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007418:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800741c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800741e:	e006      	b.n	800742e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	77fb      	strb	r3, [r7, #31]
      break;
 8007424:	e004      	b.n	8007430 <USB_HC_Init+0x148>
      break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <USB_HC_Init+0x148>
      break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <USB_HC_Init+0x148>
      break;
 800742e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800743c:	461a      	mov	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	440a      	add	r2, r1
 8007458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	2101      	movs	r1, #1
 8007472:	fa01 f303 	lsl.w	r3, r1, r3
 8007476:	6939      	ldr	r1, [r7, #16]
 8007478:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800747c:	4313      	orrs	r3, r2
 800747e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800748c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007490:	2b00      	cmp	r3, #0
 8007492:	da03      	bge.n	800749c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	e001      	b.n	80074a0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff fef9 	bl	8007298 <USB_GetHostSpeed>
 80074a6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80074a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d106      	bne.n	80074be <USB_HC_Init+0x1d6>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d003      	beq.n	80074be <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e001      	b.n	80074c2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074c2:	787b      	ldrb	r3, [r7, #1]
 80074c4:	059b      	lsls	r3, r3, #22
 80074c6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074ca:	78bb      	ldrb	r3, [r7, #2]
 80074cc:	02db      	lsls	r3, r3, #11
 80074ce:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074d2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074d8:	049b      	lsls	r3, r3, #18
 80074da:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80074e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80074e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074e6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007500:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007502:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007506:	2b03      	cmp	r3, #3
 8007508:	d003      	beq.n	8007512 <USB_HC_Init+0x22a>
 800750a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800750e:	2b01      	cmp	r3, #1
 8007510:	d10f      	bne.n	8007532 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	440a      	add	r2, r1
 8007528:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800752c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007530:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007532:	7ffb      	ldrb	r3, [r7, #31]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3720      	adds	r7, #32
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40040000 	.word	0x40040000

08007540 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08c      	sub	sp, #48	@ 0x30
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4613      	mov	r3, r2
 800754c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800755c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4a5d      	ldr	r2, [pc, #372]	@ (80076d8 <USB_HC_StartXfer+0x198>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d12f      	bne.n	80075c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d11c      	bne.n	80075a6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	7c9b      	ldrb	r3, [r3, #18]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <USB_HC_StartXfer+0x3c>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	7c9b      	ldrb	r3, [r3, #18]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d124      	bne.n	80075c6 <USB_HC_StartXfer+0x86>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	799b      	ldrb	r3, [r3, #6]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d120      	bne.n	80075c6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	4413      	add	r3, r2
 800758c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	6a3a      	ldr	r2, [r7, #32]
 8007598:	440a      	add	r2, r1
 800759a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800759e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a2:	60d3      	str	r3, [r2, #12]
 80075a4:	e00f      	b.n	80075c6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	791b      	ldrb	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <USB_HC_StartXfer+0x86>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	795b      	ldrb	r3, [r3, #5]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d107      	bne.n	80075c6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fb6b 	bl	8007c98 <USB_DoPing>
        return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e232      	b.n	8007a2c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	799b      	ldrb	r3, [r3, #6]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d158      	bne.n	8007680 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80075ce:	2301      	movs	r3, #1
 80075d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	78db      	ldrb	r3, [r3, #3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	8a92      	ldrh	r2, [r2, #20]
 80075e0:	fb03 f202 	mul.w	r2, r3, r2
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	61da      	str	r2, [r3, #28]
 80075e8:	e07c      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	7c9b      	ldrb	r3, [r3, #18]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d130      	bne.n	8007654 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80075f8:	d918      	bls.n	800762c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	8a9b      	ldrh	r3, [r3, #20]
 80075fe:	461a      	mov	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	69da      	ldr	r2, [r3, #28]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d003      	beq.n	800761c <USB_HC_StartXfer+0xdc>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d103      	bne.n	8007624 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2202      	movs	r2, #2
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	e05f      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2201      	movs	r2, #1
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	e05b      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6a1a      	ldr	r2, [r3, #32]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d007      	beq.n	800764c <USB_HC_StartXfer+0x10c>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d003      	beq.n	800764c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2204      	movs	r2, #4
 8007648:	60da      	str	r2, [r3, #12]
 800764a:	e04b      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2203      	movs	r2, #3
 8007650:	60da      	str	r2, [r3, #12]
 8007652:	e047      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d10d      	bne.n	8007676 <USB_HC_StartXfer+0x136>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	8a92      	ldrh	r2, [r2, #20]
 8007662:	4293      	cmp	r3, r2
 8007664:	d907      	bls.n	8007676 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007666:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	8a92      	ldrh	r2, [r2, #20]
 800766c:	fb03 f202 	mul.w	r2, r3, r2
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	61da      	str	r2, [r3, #28]
 8007674:	e036      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61da      	str	r2, [r3, #28]
 800767e:	e031      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d018      	beq.n	80076ba <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	8a92      	ldrh	r2, [r2, #20]
 8007690:	4413      	add	r3, r2
 8007692:	3b01      	subs	r3, #1
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	8a92      	ldrh	r2, [r2, #20]
 8007698:	fbb3 f3f2 	udiv	r3, r3, r2
 800769c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800769e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80076a0:	8b7b      	ldrh	r3, [r7, #26]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d90b      	bls.n	80076be <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80076a6:	8b7b      	ldrh	r3, [r7, #26]
 80076a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	8a92      	ldrh	r2, [r2, #20]
 80076b0:	fb03 f202 	mul.w	r2, r3, r2
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61da      	str	r2, [r3, #28]
 80076b8:	e001      	b.n	80076be <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80076ba:	2301      	movs	r3, #1
 80076bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	8a92      	ldrh	r2, [r2, #20]
 80076cc:	fb03 f202 	mul.w	r2, r3, r2
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	61da      	str	r2, [r3, #28]
 80076d4:	e006      	b.n	80076e4 <USB_HC_StartXfer+0x1a4>
 80076d6:	bf00      	nop
 80076d8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076ee:	04d9      	lsls	r1, r3, #19
 80076f0:	4ba3      	ldr	r3, [pc, #652]	@ (8007980 <USB_HC_StartXfer+0x440>)
 80076f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	7d9b      	ldrb	r3, [r3, #22]
 80076fa:	075b      	lsls	r3, r3, #29
 80076fc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007700:	69f9      	ldr	r1, [r7, #28]
 8007702:	0148      	lsls	r0, r1, #5
 8007704:	6a39      	ldr	r1, [r7, #32]
 8007706:	4401      	add	r1, r0
 8007708:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800770c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800770e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6999      	ldr	r1, [r3, #24]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	4413      	add	r3, r2
 8007722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007726:	460a      	mov	r2, r1
 8007728:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	bf0c      	ite	eq
 800773a:	2301      	moveq	r3, #1
 800773c:	2300      	movne	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	6a3a      	ldr	r2, [r7, #32]
 8007756:	440a      	add	r2, r1
 8007758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800775c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007760:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	4413      	add	r3, r2
 800776a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	7e7b      	ldrb	r3, [r7, #25]
 8007772:	075b      	lsls	r3, r3, #29
 8007774:	69f9      	ldr	r1, [r7, #28]
 8007776:	0148      	lsls	r0, r1, #5
 8007778:	6a39      	ldr	r1, [r7, #32]
 800777a:	4401      	add	r1, r0
 800777c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007780:	4313      	orrs	r3, r2
 8007782:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	799b      	ldrb	r3, [r3, #6]
 8007788:	2b01      	cmp	r3, #1
 800778a:	f040 80c3 	bne.w	8007914 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	7c5b      	ldrb	r3, [r3, #17]
 8007792:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007798:	4313      	orrs	r3, r2
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	6a3a      	ldr	r2, [r7, #32]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077aa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	0151      	lsls	r1, r2, #5
 80077be:	6a3a      	ldr	r2, [r7, #32]
 80077c0:	440a      	add	r2, r1
 80077c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80077ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	79db      	ldrb	r3, [r3, #7]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d123      	bne.n	800781c <USB_HC_StartXfer+0x2dc>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	78db      	ldrb	r3, [r3, #3]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11f      	bne.n	800781c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	6a3a      	ldr	r2, [r7, #32]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077fa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	0151      	lsls	r1, r2, #5
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	440a      	add	r2, r1
 8007812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800781a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	7c9b      	ldrb	r3, [r3, #18]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d003      	beq.n	800782c <USB_HC_StartXfer+0x2ec>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	7c9b      	ldrb	r3, [r3, #18]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d117      	bne.n	800785c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007830:	2b01      	cmp	r3, #1
 8007832:	d113      	bne.n	800785c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	78db      	ldrb	r3, [r3, #3]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d10f      	bne.n	800785c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	4413      	add	r3, r2
 8007844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	6a3a      	ldr	r2, [r7, #32]
 8007850:	440a      	add	r2, r1
 8007852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800785a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	7c9b      	ldrb	r3, [r3, #18]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d162      	bne.n	800792a <USB_HC_StartXfer+0x3ea>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	78db      	ldrb	r3, [r3, #3]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d15e      	bne.n	800792a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	3b01      	subs	r3, #1
 8007872:	2b03      	cmp	r3, #3
 8007874:	d858      	bhi.n	8007928 <USB_HC_StartXfer+0x3e8>
 8007876:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <USB_HC_StartXfer+0x33c>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	0800788d 	.word	0x0800788d
 8007880:	080078af 	.word	0x080078af
 8007884:	080078d1 	.word	0x080078d1
 8007888:	080078f3 	.word	0x080078f3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	4413      	add	r3, r2
 8007894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	6a3a      	ldr	r2, [r7, #32]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078aa:	6053      	str	r3, [r2, #4]
          break;
 80078ac:	e03d      	b.n	800792a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078c8:	f043 030e 	orr.w	r3, r3, #14
 80078cc:	6053      	str	r3, [r2, #4]
          break;
 80078ce:	e02c      	b.n	800792a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	6a3a      	ldr	r2, [r7, #32]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078ee:	6053      	str	r3, [r2, #4]
          break;
 80078f0:	e01b      	b.n	800792a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	440a      	add	r2, r1
 8007908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800790c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007910:	6053      	str	r3, [r2, #4]
          break;
 8007912:	e00a      	b.n	800792a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	4413      	add	r3, r2
 800791c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	6053      	str	r3, [r2, #4]
 8007926:	e000      	b.n	800792a <USB_HC_StartXfer+0x3ea>
          break;
 8007928:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	4413      	add	r3, r2
 8007932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007940:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	78db      	ldrb	r3, [r3, #3]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e003      	b.n	800795c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800795a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007962:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	4413      	add	r3, r2
 800796c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007970:	461a      	mov	r2, r3
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e055      	b.n	8007a2c <USB_HC_StartXfer+0x4ec>
 8007980:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	78db      	ldrb	r3, [r3, #3]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d14e      	bne.n	8007a2a <USB_HC_StartXfer+0x4ea>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d04a      	beq.n	8007a2a <USB_HC_StartXfer+0x4ea>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	79db      	ldrb	r3, [r3, #7]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d146      	bne.n	8007a2a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	7c9b      	ldrb	r3, [r3, #18]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d831      	bhi.n	8007a08 <USB_HC_StartXfer+0x4c8>
 80079a4:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <USB_HC_StartXfer+0x46c>)
 80079a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079aa:	bf00      	nop
 80079ac:	080079bd 	.word	0x080079bd
 80079b0:	080079e1 	.word	0x080079e1
 80079b4:	080079bd 	.word	0x080079bd
 80079b8:	080079e1 	.word	0x080079e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	3303      	adds	r3, #3
 80079c2:	089b      	lsrs	r3, r3, #2
 80079c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079c6:	8afa      	ldrh	r2, [r7, #22]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d91c      	bls.n	8007a0c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f043 0220 	orr.w	r2, r3, #32
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80079de:	e015      	b.n	8007a0c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	3303      	adds	r3, #3
 80079e6:	089b      	lsrs	r3, r3, #2
 80079e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079ea:	8afa      	ldrh	r2, [r7, #22]
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d90a      	bls.n	8007a10 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a06:	e003      	b.n	8007a10 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007a08:	bf00      	nop
 8007a0a:	e002      	b.n	8007a12 <USB_HC_StartXfer+0x4d2>
        break;
 8007a0c:	bf00      	nop
 8007a0e:	e000      	b.n	8007a12 <USB_HC_StartXfer+0x4d2>
        break;
 8007a10:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6999      	ldr	r1, [r3, #24]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	785a      	ldrb	r2, [r3, #1]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2000      	movs	r0, #0
 8007a22:	9000      	str	r0, [sp, #0]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff f9c9 	bl	8006dbc <USB_WritePacket>
  }

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	@ 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	b29b      	uxth	r3, r3
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b089      	sub	sp, #36	@ 0x24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a66:	78fb      	ldrb	r3, [r7, #3]
 8007a68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	0c9b      	lsrs	r3, r3, #18
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	0fdb      	lsrs	r3, r3, #31
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	0fdb      	lsrs	r3, r3, #31
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	d10d      	bne.n	8007ad8 <USB_HC_Halt+0x82>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <USB_HC_Halt+0x82>
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d002      	beq.n	8007ad4 <USB_HC_Halt+0x7e>
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d101      	bne.n	8007ad8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e0d8      	b.n	8007c8a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <USB_HC_Halt+0x8e>
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d173      	bne.n	8007bcc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d14a      	bne.n	8007ba6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d133      	bne.n	8007b84 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b3a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b5a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b68:	d82e      	bhi.n	8007bc8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b80:	d0ec      	beq.n	8007b5c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b82:	e081      	b.n	8007c88 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ba2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ba4:	e070      	b.n	8007c88 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bc4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bc6:	e05f      	b.n	8007c88 <USB_HC_Halt+0x232>
            break;
 8007bc8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bca:	e05d      	b.n	8007c88 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	0151      	lsls	r1, r2, #5
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	440a      	add	r2, r1
 8007be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d133      	bne.n	8007c64 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c3a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c48:	d81d      	bhi.n	8007c86 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c60:	d0ec      	beq.n	8007c3c <USB_HC_Halt+0x1e6>
 8007c62:	e011      	b.n	8007c88 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	e000      	b.n	8007c88 <USB_HC_Halt+0x232>
          break;
 8007c86:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3724      	adds	r7, #36	@ 0x24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007cac:	2301      	movs	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	04da      	lsls	r2, r3, #19
 8007cb4:	4b15      	ldr	r3, [pc, #84]	@ (8007d0c <USB_DoPing+0x74>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	0151      	lsls	r1, r2, #5
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	440a      	add	r2, r1
 8007cc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cc8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ce0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ce8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	1ff80000 	.word	0x1ff80000

08007d10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7fe ff8c 	bl	8006c42 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d2a:	2110      	movs	r1, #16
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fe ffe5 	bl	8006cfc <USB_FlushTxFifo>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff f80f 	bl	8006d60 <USB_FlushRxFifo>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	e01f      	b.n	8007d92 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d86:	461a      	mov	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d9dc      	bls.n	8007d52 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	e034      	b.n	8007e08 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007db4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de4:	d80c      	bhi.n	8007e00 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dfc:	d0ec      	beq.n	8007dd8 <USB_StopHost+0xc8>
 8007dfe:	e000      	b.n	8007e02 <USB_StopHost+0xf2>
        break;
 8007e00:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	3301      	adds	r3, #1
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b0f      	cmp	r3, #15
 8007e0c:	d9c7      	bls.n	8007d9e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e14:	461a      	mov	r2, r3
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e1a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e22:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fe fefb 	bl	8006c20 <USB_EnableGlobalInt>

  return ret;
 8007e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3720      	adds	r7, #32
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b089      	sub	sp, #36	@ 0x24
 8007e38:	af04      	add	r7, sp, #16
 8007e3a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	2202      	movs	r2, #2
 8007e40:	2102      	movs	r1, #2
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc85 	bl	8008752 <USBH_FindInterface>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2bff      	cmp	r3, #255	@ 0xff
 8007e50:	d002      	beq.n	8007e58 <USBH_CDC_InterfaceInit+0x24>
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d901      	bls.n	8007e5c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e13d      	b.n	80080d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc5a 	bl	800871a <USBH_SelectInterface>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e70:	2302      	movs	r3, #2
 8007e72:	e131      	b.n	80080d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007e7a:	2050      	movs	r0, #80	@ 0x50
 8007e7c:	f002 fb64 	bl	800a548 <malloc>
 8007e80:	4603      	mov	r3, r0
 8007e82:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007e94:	2302      	movs	r3, #2
 8007e96:	e11f      	b.n	80080d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007e98:	2250      	movs	r2, #80	@ 0x50
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	68b8      	ldr	r0, [r7, #8]
 8007e9e:	f002 fc11 	bl	800a6c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	211a      	movs	r1, #26
 8007ea8:	fb01 f303 	mul.w	r3, r1, r3
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da15      	bge.n	8007ee6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	211a      	movs	r1, #26
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	211a      	movs	r1, #26
 8007ed6:	fb01 f303 	mul.w	r3, r1, r3
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007ee0:	881a      	ldrh	r2, [r3, #0]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 ffbe 	bl	8009e6e <USBH_AllocPipe>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7819      	ldrb	r1, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	7858      	ldrb	r0, [r3, #1]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	8952      	ldrh	r2, [r2, #10]
 8007f12:	9202      	str	r2, [sp, #8]
 8007f14:	2203      	movs	r2, #3
 8007f16:	9201      	str	r2, [sp, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 ff76 	bl	8009e10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f002 fa85 	bl	800a43c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	210a      	movs	r1, #10
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fc0a 	bl	8008752 <USBH_FindInterface>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2bff      	cmp	r3, #255	@ 0xff
 8007f46:	d002      	beq.n	8007f4e <USBH_CDC_InterfaceInit+0x11a>
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d901      	bls.n	8007f52 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e0c2      	b.n	80080d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	211a      	movs	r1, #26
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b25b      	sxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da16      	bge.n	8007f98 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	211a      	movs	r1, #26
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	211a      	movs	r1, #26
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f90:	881a      	ldrh	r2, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	835a      	strh	r2, [r3, #26]
 8007f96:	e015      	b.n	8007fc4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	211a      	movs	r1, #26
 8007f9e:	fb01 f303 	mul.w	r3, r1, r3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	211a      	movs	r1, #26
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007fbe:	881a      	ldrh	r2, [r3, #0]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	211a      	movs	r1, #26
 8007fca:	fb01 f303 	mul.w	r3, r1, r3
 8007fce:	4413      	add	r3, r2
 8007fd0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da16      	bge.n	800800a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	211a      	movs	r1, #26
 8007fe2:	fb01 f303 	mul.w	r3, r1, r3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	211a      	movs	r1, #26
 8007ff8:	fb01 f303 	mul.w	r3, r1, r3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	835a      	strh	r2, [r3, #26]
 8008008:	e015      	b.n	8008036 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	211a      	movs	r1, #26
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	4413      	add	r3, r2
 8008016:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	211a      	movs	r1, #26
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	4413      	add	r3, r2
 800802c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	7b9b      	ldrb	r3, [r3, #14]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 ff16 	bl	8009e6e <USBH_AllocPipe>
 8008042:	4603      	mov	r3, r0
 8008044:	461a      	mov	r2, r3
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7bdb      	ldrb	r3, [r3, #15]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 ff0c 	bl	8009e6e <USBH_AllocPipe>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	7b59      	ldrb	r1, [r3, #13]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	7b98      	ldrb	r0, [r3, #14]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	8b12      	ldrh	r2, [r2, #24]
 8008076:	9202      	str	r2, [sp, #8]
 8008078:	2202      	movs	r2, #2
 800807a:	9201      	str	r2, [sp, #4]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	4623      	mov	r3, r4
 8008080:	4602      	mov	r2, r0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 fec4 	bl	8009e10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	7b19      	ldrb	r1, [r3, #12]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	7bd8      	ldrb	r0, [r3, #15]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	8b52      	ldrh	r2, [r2, #26]
 80080a0:	9202      	str	r2, [sp, #8]
 80080a2:	2202      	movs	r2, #2
 80080a4:	9201      	str	r2, [sp, #4]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	4623      	mov	r3, r4
 80080aa:	4602      	mov	r2, r0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 feaf 	bl	8009e10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	7b5b      	ldrb	r3, [r3, #13]
 80080be:	2200      	movs	r2, #0
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f002 f9ba 	bl	800a43c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	7b1b      	ldrb	r3, [r3, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f002 f9b3 	bl	800a43c <USBH_LL_SetToggle>

  return USBH_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd90      	pop	{r4, r7, pc}

080080e0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 fea4 	bl	8009e4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fecf 	bl	8009eb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	7b1b      	ldrb	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00e      	beq.n	800813e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	7b1b      	ldrb	r3, [r3, #12]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fe91 	bl	8009e4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	7b1b      	ldrb	r3, [r3, #12]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 febc 	bl	8009eb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	7b5b      	ldrb	r3, [r3, #13]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00e      	beq.n	8008164 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	7b5b      	ldrb	r3, [r3, #13]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 fe7e 	bl	8009e4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	7b5b      	ldrb	r3, [r3, #13]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fea9 	bl	8009eb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	4618      	mov	r0, r3
 800817a:	f002 f9ed 	bl	800a558 <free>
    phost->pActiveClass->pData = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008184:	2200      	movs	r2, #0
 8008186:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3340      	adds	r3, #64	@ 0x40
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8b1 	bl	8008312 <GetLineCoding>
 80081b0:	4603      	mov	r3, r0
 80081b2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081c0:	2102      	movs	r1, #2
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d877      	bhi.n	80082e4 <USBH_CDC_Process+0x114>
 80081f4:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <USBH_CDC_Process+0x2c>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008211 	.word	0x08008211
 8008200:	08008217 	.word	0x08008217
 8008204:	08008247 	.word	0x08008247
 8008208:	080082bb 	.word	0x080082bb
 800820c:	080082c9 	.word	0x080082c9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
      break;
 8008214:	e06d      	b.n	80082f2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f897 	bl	8008350 <SetLineCoding>
 8008222:	4603      	mov	r3, r0
 8008224:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008234:	e058      	b.n	80082e8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d055      	beq.n	80082e8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2204      	movs	r2, #4
 8008240:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008244:	e050      	b.n	80082e8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3340      	adds	r3, #64	@ 0x40
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f860 	bl	8008312 <GetLineCoding>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d126      	bne.n	80082aa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800826e:	791b      	ldrb	r3, [r3, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d13b      	bne.n	80082ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008280:	429a      	cmp	r2, r3
 8008282:	d133      	bne.n	80082ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008290:	429a      	cmp	r2, r3
 8008292:	d12b      	bne.n	80082ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800829e:	429a      	cmp	r2, r3
 80082a0:	d124      	bne.n	80082ec <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f958 	bl	8008558 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082a8:	e020      	b.n	80082ec <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d01d      	beq.n	80082ec <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2204      	movs	r2, #4
 80082b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80082b8:	e018      	b.n	80082ec <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f867 	bl	800838e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f8da 	bl	800847a <CDC_ProcessReception>
      break;
 80082c6:	e014      	b.n	80082f2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 f81a 	bl	8009304 <USBH_ClrFeature>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80082e2:	e005      	b.n	80082f0 <USBH_CDC_Process+0x120>

    default:
      break;
 80082e4:	bf00      	nop
 80082e6:	e004      	b.n	80082f2 <USBH_CDC_Process+0x122>
      break;
 80082e8:	bf00      	nop
 80082ea:	e002      	b.n	80082f2 <USBH_CDC_Process+0x122>
      break;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <USBH_CDC_Process+0x122>
      break;
 80082f0:	bf00      	nop

  }

  return status;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	22a1      	movs	r2, #161	@ 0xa1
 8008320:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2221      	movs	r2, #33	@ 0x21
 8008326:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2207      	movs	r2, #7
 8008338:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2207      	movs	r2, #7
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 fb14 	bl	800996e <USBH_CtlReq>
 8008346:	4603      	mov	r3, r0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2221      	movs	r2, #33	@ 0x21
 800835e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2207      	movs	r2, #7
 8008376:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2207      	movs	r2, #7
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 faf5 	bl	800996e <USBH_CtlReq>
 8008384:	4603      	mov	r3, r0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b086      	sub	sp, #24
 8008392:	af02      	add	r7, sp, #8
 8008394:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d002      	beq.n	80083b4 <CDC_ProcessTransmission+0x26>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d023      	beq.n	80083fa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80083b2:	e05e      	b.n	8008472 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	8b12      	ldrh	r2, [r2, #24]
 80083bc:	4293      	cmp	r3, r2
 80083be:	d90b      	bls.n	80083d8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	69d9      	ldr	r1, [r3, #28]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8b1a      	ldrh	r2, [r3, #24]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	7b5b      	ldrb	r3, [r3, #13]
 80083cc:	2001      	movs	r0, #1
 80083ce:	9000      	str	r0, [sp, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fcda 	bl	8009d8a <USBH_BulkSendData>
 80083d6:	e00b      	b.n	80083f0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	7b5b      	ldrb	r3, [r3, #13]
 80083e6:	2001      	movs	r0, #1
 80083e8:	9000      	str	r0, [sp, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 fccd 	bl	8009d8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80083f8:	e03b      	b.n	8008472 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	7b5b      	ldrb	r3, [r3, #13]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 fff1 	bl	800a3e8 <USBH_LL_GetURBState>
 8008406:	4603      	mov	r3, r0
 8008408:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d128      	bne.n	8008462 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	8b12      	ldrh	r2, [r2, #24]
 8008418:	4293      	cmp	r3, r2
 800841a:	d90e      	bls.n	800843a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	8b12      	ldrh	r2, [r2, #24]
 8008424:	1a9a      	subs	r2, r3, r2
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	8b12      	ldrh	r2, [r2, #24]
 8008432:	441a      	add	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	61da      	str	r2, [r3, #28]
 8008438:	e002      	b.n	8008440 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008450:	e00e      	b.n	8008470 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f868 	bl	8008530 <USBH_CDC_TransmitCallback>
      break;
 8008460:	e006      	b.n	8008470 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	2b02      	cmp	r3, #2
 8008466:	d103      	bne.n	8008470 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008470:	bf00      	nop
  }
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800848c:	2300      	movs	r3, #0
 800848e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008496:	2b03      	cmp	r3, #3
 8008498:	d002      	beq.n	80084a0 <CDC_ProcessReception+0x26>
 800849a:	2b04      	cmp	r3, #4
 800849c:	d00e      	beq.n	80084bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800849e:	e043      	b.n	8008528 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a19      	ldr	r1, [r3, #32]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	8b5a      	ldrh	r2, [r3, #26]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	7b1b      	ldrb	r3, [r3, #12]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 fc91 	bl	8009dd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2204      	movs	r2, #4
 80084b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80084ba:	e035      	b.n	8008528 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	7b1b      	ldrb	r3, [r3, #12]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 ff90 	bl	800a3e8 <USBH_LL_GetURBState>
 80084c8:	4603      	mov	r3, r0
 80084ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80084cc:	7cfb      	ldrb	r3, [r7, #19]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d129      	bne.n	8008526 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	7b1b      	ldrb	r3, [r3, #12]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 fef3 	bl	800a2c4 <USBH_LL_GetLastXferSize>
 80084de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d016      	beq.n	8008518 <CDC_ProcessReception+0x9e>
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	8b5b      	ldrh	r3, [r3, #26]
 80084ee:	461a      	mov	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d110      	bne.n	8008518 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad2      	subs	r2, r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	6a1a      	ldr	r2, [r3, #32]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	441a      	add	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2203      	movs	r2, #3
 8008512:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008516:	e006      	b.n	8008526 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f80f 	bl	8008544 <USBH_CDC_ReceiveCallback>
      break;
 8008526:	bf00      	nop
  }
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008580:	2302      	movs	r3, #2
 8008582:	e029      	b.n	80085d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	79fa      	ldrb	r2, [r7, #7]
 8008588:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f81f 	bl	80085e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f001 fdc3 	bl	800a15c <USBH_LL_Init>

  return USBH_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	e009      	b.n	8008606 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	33e0      	adds	r3, #224	@ 0xe0
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	2200      	movs	r2, #0
 80085fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b0f      	cmp	r3, #15
 800860a:	d9f2      	bls.n	80085f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e009      	b.n	8008626 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800862c:	d3f1      	bcc.n	8008612 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2240      	movs	r2, #64	@ 0x40
 8008652:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	331c      	adds	r3, #28
 800867e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008682:	2100      	movs	r1, #0
 8008684:	4618      	mov	r0, r3
 8008686:	f002 f81d 	bl	800a6c4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f002 f814 	bl	800a6c4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80086a2:	2212      	movs	r2, #18
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 f80c 	bl	800a6c4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80086b2:	223e      	movs	r2, #62	@ 0x3e
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 f804 	bl	800a6c4 <memset>

  return USBH_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10e      	bne.n	8008702 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086ea:	1c59      	adds	r1, r3, #1
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	33de      	adds	r3, #222	@ 0xde
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
 8008700:	e004      	b.n	800870c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]
 8008706:	e001      	b.n	800870c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008708:	2302      	movs	r3, #2
 800870a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	429a      	cmp	r2, r3
 8008734:	d204      	bcs.n	8008740 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800873e:	e001      	b.n	8008744 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008740:	2302      	movs	r3, #2
 8008742:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008752:	b480      	push	{r7}
 8008754:	b087      	sub	sp, #28
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	4608      	mov	r0, r1
 800875c:	4611      	mov	r1, r2
 800875e:	461a      	mov	r2, r3
 8008760:	4603      	mov	r3, r0
 8008762:	70fb      	strb	r3, [r7, #3]
 8008764:	460b      	mov	r3, r1
 8008766:	70bb      	strb	r3, [r7, #2]
 8008768:	4613      	mov	r3, r2
 800876a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800877a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800877c:	e025      	b.n	80087ca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	221a      	movs	r2, #26
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	3308      	adds	r3, #8
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4413      	add	r3, r2
 800878c:	3302      	adds	r3, #2
 800878e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	795b      	ldrb	r3, [r3, #5]
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	429a      	cmp	r2, r3
 8008798:	d002      	beq.n	80087a0 <USBH_FindInterface+0x4e>
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	2bff      	cmp	r3, #255	@ 0xff
 800879e:	d111      	bne.n	80087c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087a4:	78ba      	ldrb	r2, [r7, #2]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d002      	beq.n	80087b0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087aa:	78bb      	ldrb	r3, [r7, #2]
 80087ac:	2bff      	cmp	r3, #255	@ 0xff
 80087ae:	d109      	bne.n	80087c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087b4:	787a      	ldrb	r2, [r7, #1]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d002      	beq.n	80087c0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087ba:	787b      	ldrb	r3, [r7, #1]
 80087bc:	2bff      	cmp	r3, #255	@ 0xff
 80087be:	d101      	bne.n	80087c4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	e006      	b.n	80087d2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	3301      	adds	r3, #1
 80087c8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d9d6      	bls.n	800877e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80087d0:	23ff      	movs	r3, #255	@ 0xff
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 fcf4 	bl	800a1d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80087ec:	2101      	movs	r1, #1
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fe0d 	bl	800a40e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af04      	add	r7, sp, #16
 8008806:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008808:	2302      	movs	r3, #2
 800880a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b01      	cmp	r3, #1
 800881a:	d102      	bne.n	8008822 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2203      	movs	r2, #3
 8008820:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b0b      	cmp	r3, #11
 800882a:	f200 81bb 	bhi.w	8008ba4 <USBH_Process+0x3a4>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USBH_Process+0x34>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008865 	.word	0x08008865
 8008838:	08008897 	.word	0x08008897
 800883c:	080088ff 	.word	0x080088ff
 8008840:	08008b3f 	.word	0x08008b3f
 8008844:	08008ba5 	.word	0x08008ba5
 8008848:	0800899f 	.word	0x0800899f
 800884c:	08008ae5 	.word	0x08008ae5
 8008850:	080089d5 	.word	0x080089d5
 8008854:	080089f5 	.word	0x080089f5
 8008858:	08008a13 	.word	0x08008a13
 800885c:	08008a57 	.word	0x08008a57
 8008860:	08008b27 	.word	0x08008b27
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 819b 	beq.w	8008ba8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008878:	20c8      	movs	r0, #200	@ 0xc8
 800887a:	f001 fe12 	bl	800a4a2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fd05 	bl	800a28e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008894:	e188      	b.n	8008ba8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800889c:	2b01      	cmp	r3, #1
 800889e:	d107      	bne.n	80088b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088ae:	e18a      	b.n	8008bc6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088ba:	d914      	bls.n	80088e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088c2:	3301      	adds	r3, #1
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d903      	bls.n	80088de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	220d      	movs	r2, #13
 80088da:	701a      	strb	r2, [r3, #0]
      break;
 80088dc:	e173      	b.n	8008bc6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
      break;
 80088e4:	e16f      	b.n	8008bc6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088ec:	f103 020a 	add.w	r2, r3, #10
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80088f6:	200a      	movs	r0, #10
 80088f8:	f001 fdd3 	bl	800a4a2 <USBH_Delay>
      break;
 80088fc:	e163      	b.n	8008bc6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800890e:	2104      	movs	r1, #4
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008914:	2064      	movs	r0, #100	@ 0x64
 8008916:	f001 fdc4 	bl	800a4a2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 fc90 	bl	800a240 <USBH_LL_GetSpeed>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2205      	movs	r2, #5
 800892e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 fa9b 	bl	8009e6e <USBH_AllocPipe>
 8008938:	4603      	mov	r3, r0
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008940:	2180      	movs	r1, #128	@ 0x80
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fa93 	bl	8009e6e <USBH_AllocPipe>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7919      	ldrb	r1, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008964:	9202      	str	r2, [sp, #8]
 8008966:	2200      	movs	r2, #0
 8008968:	9201      	str	r2, [sp, #4]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4603      	mov	r3, r0
 800896e:	2280      	movs	r2, #128	@ 0x80
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fa4d 	bl	8009e10 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7959      	ldrb	r1, [r3, #5]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800898a:	9202      	str	r2, [sp, #8]
 800898c:	2200      	movs	r2, #0
 800898e:	9201      	str	r2, [sp, #4]
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	4603      	mov	r3, r0
 8008994:	2200      	movs	r2, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 fa3a 	bl	8009e10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800899c:	e113      	b.n	8008bc6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f916 	bl	8008bd0 <USBH_HandleEnum>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f040 80fd 	bne.w	8008bac <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d103      	bne.n	80089cc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2208      	movs	r2, #8
 80089c8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089ca:	e0ef      	b.n	8008bac <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2207      	movs	r2, #7
 80089d0:	701a      	strb	r2, [r3, #0]
      break;
 80089d2:	e0eb      	b.n	8008bac <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80e8 	beq.w	8008bb0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089e6:	2101      	movs	r1, #1
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2208      	movs	r2, #8
 80089f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80089f2:	e0dd      	b.n	8008bb0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc3a 	bl	8009276 <USBH_SetCfg>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f040 80d5 	bne.w	8008bb4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a10:	e0d0      	b.n	8008bb4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d016      	beq.n	8008a4e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a20:	2101      	movs	r1, #1
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fc4a 	bl	80092bc <USBH_SetFeature>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d103      	bne.n	8008a3c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	220a      	movs	r2, #10
 8008a38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a3a:	e0bd      	b.n	8008bb8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	f040 80b9 	bne.w	8008bb8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	220a      	movs	r2, #10
 8008a4a:	701a      	strb	r2, [r3, #0]
      break;
 8008a4c:	e0b4      	b.n	8008bb8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	220a      	movs	r2, #10
 8008a52:	701a      	strb	r2, [r3, #0]
      break;
 8008a54:	e0b0      	b.n	8008bb8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80ad 	beq.w	8008bbc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
 8008a6e:	e016      	b.n	8008a9e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a70:	7bfa      	ldrb	r2, [r7, #15]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	32de      	adds	r2, #222	@ 0xde
 8008a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7a:	791a      	ldrb	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d108      	bne.n	8008a98 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008a86:	7bfa      	ldrb	r2, [r7, #15]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	32de      	adds	r2, #222	@ 0xde
 8008a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008a96:	e005      	b.n	8008aa4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0e5      	beq.n	8008a70 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d016      	beq.n	8008adc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008acc:	2103      	movs	r1, #3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ad2:	e073      	b.n	8008bbc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	220d      	movs	r2, #13
 8008ad8:	701a      	strb	r2, [r3, #0]
      break;
 8008ada:	e06f      	b.n	8008bbc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	220d      	movs	r2, #13
 8008ae0:	701a      	strb	r2, [r3, #0]
      break;
 8008ae2:	e06b      	b.n	8008bbc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d017      	beq.n	8008b1e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	220b      	movs	r2, #11
 8008b0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b0c:	e058      	b.n	8008bc0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d154      	bne.n	8008bc0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	220d      	movs	r2, #13
 8008b1a:	701a      	strb	r2, [r3, #0]
      break;
 8008b1c:	e050      	b.n	8008bc0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	220d      	movs	r2, #13
 8008b22:	701a      	strb	r2, [r3, #0]
      break;
 8008b24:	e04c      	b.n	8008bc0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d049      	beq.n	8008bc4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
      }
      break;
 8008b3c:	e042      	b.n	8008bc4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff fd4a 	bl	80085e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b7a:	2105      	movs	r1, #5
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d107      	bne.n	8008b9c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff fe22 	bl	80087de <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b9a:	e014      	b.n	8008bc6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 fb19 	bl	800a1d4 <USBH_LL_Start>
      break;
 8008ba2:	e010      	b.n	8008bc6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e00e      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008ba8:	bf00      	nop
 8008baa:	e00c      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008bac:	bf00      	nop
 8008bae:	e00a      	b.n	8008bc6 <USBH_Process+0x3c6>
    break;
 8008bb0:	bf00      	nop
 8008bb2:	e008      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008bb4:	bf00      	nop
 8008bb6:	e006      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008bb8:	bf00      	nop
 8008bba:	e004      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e002      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e000      	b.n	8008bc6 <USBH_Process+0x3c6>
      break;
 8008bc4:	bf00      	nop
  }
  return USBH_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b07      	cmp	r3, #7
 8008be6:	f200 81bd 	bhi.w	8008f64 <USBH_HandleEnum+0x394>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <USBH_HandleEnum+0x20>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c11 	.word	0x08008c11
 8008bf4:	08008ccb 	.word	0x08008ccb
 8008bf8:	08008d35 	.word	0x08008d35
 8008bfc:	08008dbf 	.word	0x08008dbf
 8008c00:	08008e29 	.word	0x08008e29
 8008c04:	08008e99 	.word	0x08008e99
 8008c08:	08008edf 	.word	0x08008edf
 8008c0c:	08008f25 	.word	0x08008f25
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c10:	2108      	movs	r1, #8
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa4c 	bl	80090b0 <USBH_Get_DevDesc>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d12e      	bne.n	8008c80 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	7919      	ldrb	r1, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c46:	9202      	str	r2, [sp, #8]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	9201      	str	r2, [sp, #4]
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2280      	movs	r2, #128	@ 0x80
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 f8dc 	bl	8009e10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	7959      	ldrb	r1, [r3, #5]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c6c:	9202      	str	r2, [sp, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	9201      	str	r2, [sp, #4]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	4603      	mov	r3, r0
 8008c76:	2200      	movs	r2, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f8c9 	bl	8009e10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c7e:	e173      	b.n	8008f68 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	f040 8170 	bne.w	8008f68 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d903      	bls.n	8008caa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	220d      	movs	r2, #13
 8008ca6:	701a      	strb	r2, [r3, #0]
      break;
 8008ca8:	e15e      	b.n	8008f68 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	795b      	ldrb	r3, [r3, #5]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 f8fd 	bl	8009eb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	791b      	ldrb	r3, [r3, #4]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 f8f7 	bl	8009eb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
      break;
 8008cc8:	e14e      	b.n	8008f68 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008cca:	2112      	movs	r1, #18
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f9ef 	bl	80090b0 <USBH_Get_DevDesc>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d103      	bne.n	8008ce4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ce2:	e143      	b.n	8008f6c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	f040 8140 	bne.w	8008f6c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d903      	bls.n	8008d0e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	220d      	movs	r2, #13
 8008d0a:	701a      	strb	r2, [r3, #0]
      break;
 8008d0c:	e12e      	b.n	8008f6c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	795b      	ldrb	r3, [r3, #5]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 f8cb 	bl	8009eb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	791b      	ldrb	r3, [r3, #4]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f8c5 	bl	8009eb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
      break;
 8008d32:	e11b      	b.n	8008f6c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d34:	2101      	movs	r1, #1
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa79 	bl	800922e <USBH_SetAddress>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d130      	bne.n	8008da8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008d46:	2002      	movs	r0, #2
 8008d48:	f001 fbab 	bl	800a4a2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2203      	movs	r2, #3
 8008d58:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	7919      	ldrb	r1, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d6e:	9202      	str	r2, [sp, #8]
 8008d70:	2200      	movs	r2, #0
 8008d72:	9201      	str	r2, [sp, #4]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	4603      	mov	r3, r0
 8008d78:	2280      	movs	r2, #128	@ 0x80
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 f848 	bl	8009e10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	7959      	ldrb	r1, [r3, #5]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d94:	9202      	str	r2, [sp, #8]
 8008d96:	2200      	movs	r2, #0
 8008d98:	9201      	str	r2, [sp, #4]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2200      	movs	r2, #0
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 f835 	bl	8009e10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008da6:	e0e3      	b.n	8008f70 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	f040 80e0 	bne.w	8008f70 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	220d      	movs	r2, #13
 8008db4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	705a      	strb	r2, [r3, #1]
      break;
 8008dbc:	e0d8      	b.n	8008f70 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008dbe:	2109      	movs	r1, #9
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9a1 	bl	8009108 <USBH_Get_CfgDesc>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2204      	movs	r2, #4
 8008dd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dd6:	e0cd      	b.n	8008f74 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	f040 80ca 	bne.w	8008f74 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008de6:	3301      	adds	r3, #1
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d903      	bls.n	8008e02 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	220d      	movs	r2, #13
 8008dfe:	701a      	strb	r2, [r3, #0]
      break;
 8008e00:	e0b8      	b.n	8008f74 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	795b      	ldrb	r3, [r3, #5]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f851 	bl	8009eb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	791b      	ldrb	r3, [r3, #4]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f84b 	bl	8009eb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	701a      	strb	r2, [r3, #0]
      break;
 8008e26:	e0a5      	b.n	8008f74 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f969 	bl	8009108 <USBH_Get_CfgDesc>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2205      	movs	r2, #5
 8008e44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e46:	e097      	b.n	8008f78 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	f040 8094 	bne.w	8008f78 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e56:	3301      	adds	r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d903      	bls.n	8008e72 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	701a      	strb	r2, [r3, #0]
      break;
 8008e70:	e082      	b.n	8008f78 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	795b      	ldrb	r3, [r3, #5]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f819 	bl	8009eb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	791b      	ldrb	r3, [r3, #4]
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 f813 	bl	8009eb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
      break;
 8008e96:	e06f      	b.n	8008f78 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d019      	beq.n	8008ed6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008eae:	23ff      	movs	r3, #255	@ 0xff
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f953 	bl	800915c <USBH_Get_StringDesc>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2206      	movs	r2, #6
 8008ec4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ec6:	e059      	b.n	8008f7c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d156      	bne.n	8008f7c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2206      	movs	r2, #6
 8008ed2:	705a      	strb	r2, [r3, #1]
      break;
 8008ed4:	e052      	b.n	8008f7c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2206      	movs	r2, #6
 8008eda:	705a      	strb	r2, [r3, #1]
      break;
 8008edc:	e04e      	b.n	8008f7c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d019      	beq.n	8008f1c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ef4:	23ff      	movs	r3, #255	@ 0xff
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f930 	bl	800915c <USBH_Get_StringDesc>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d103      	bne.n	8008f0e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2207      	movs	r2, #7
 8008f0a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f0c:	e038      	b.n	8008f80 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d135      	bne.n	8008f80 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2207      	movs	r2, #7
 8008f18:	705a      	strb	r2, [r3, #1]
      break;
 8008f1a:	e031      	b.n	8008f80 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2207      	movs	r2, #7
 8008f20:	705a      	strb	r2, [r3, #1]
      break;
 8008f22:	e02d      	b.n	8008f80 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d017      	beq.n	8008f5e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f3a:	23ff      	movs	r3, #255	@ 0xff
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f90d 	bl	800915c <USBH_Get_StringDesc>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f50:	e018      	b.n	8008f84 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d115      	bne.n	8008f84 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5c:	e012      	b.n	8008f84 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
      break;
 8008f62:	e00f      	b.n	8008f84 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008f64:	bf00      	nop
 8008f66:	e00e      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e00c      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e00a      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f70:	bf00      	nop
 8008f72:	e008      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f74:	bf00      	nop
 8008f76:	e006      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e004      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e002      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f80:	bf00      	nop
 8008f82:	e000      	b.n	8008f86 <USBH_HandleEnum+0x3b6>
      break;
 8008f84:	bf00      	nop
  }
  return Status;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f804 	bl	8008fd2 <USBH_HandleSof>
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b0b      	cmp	r3, #11
 8008fe2:	d10a      	bne.n	8008ffa <USBH_HandleSof+0x28>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009012:	bf00      	nop
}
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800902e:	bf00      	nop
}
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f8be 	bl	800a20a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	791b      	ldrb	r3, [r3, #4]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 ff0b 	bl	8009eb0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	795b      	ldrb	r3, [r3, #5]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 ff05 	bl	8009eb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80090bc:	887b      	ldrh	r3, [r7, #2]
 80090be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c2:	d901      	bls.n	80090c8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e01b      	b.n	8009100 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80090ce:	887b      	ldrh	r3, [r7, #2]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090d8:	2100      	movs	r1, #0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f872 	bl	80091c4 <USBH_GetDescriptor>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d109      	bne.n	80090fe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090f0:	887a      	ldrh	r2, [r7, #2]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f929 	bl	800934c <USBH_ParseDevDesc>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af02      	add	r7, sp, #8
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	331c      	adds	r3, #28
 8009118:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800911a:	887b      	ldrh	r3, [r7, #2]
 800911c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009120:	d901      	bls.n	8009126 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009122:	2303      	movs	r3, #3
 8009124:	e016      	b.n	8009154 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009126:	887b      	ldrh	r3, [r7, #2]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009130:	2100      	movs	r1, #0
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f846 	bl	80091c4 <USBH_GetDescriptor>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d107      	bne.n	8009152 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009142:	887b      	ldrh	r3, [r7, #2]
 8009144:	461a      	mov	r2, r3
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9af 	bl	80094ac <USBH_ParseCfgDesc>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af02      	add	r7, sp, #8
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	461a      	mov	r2, r3
 8009168:	460b      	mov	r3, r1
 800916a:	72fb      	strb	r3, [r7, #11]
 800916c:	4613      	mov	r3, r2
 800916e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009170:	893b      	ldrh	r3, [r7, #8]
 8009172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009176:	d802      	bhi.n	800917e <USBH_Get_StringDesc+0x22>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800917e:	2303      	movs	r3, #3
 8009180:	e01c      	b.n	80091bc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	b29b      	uxth	r3, r3
 8009186:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800918a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009192:	893b      	ldrh	r3, [r7, #8]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	460b      	mov	r3, r1
 8009198:	2100      	movs	r1, #0
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f812 	bl	80091c4 <USBH_GetDescriptor>
 80091a0:	4603      	mov	r3, r0
 80091a2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d107      	bne.n	80091ba <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80091b0:	893a      	ldrh	r2, [r7, #8]
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fb8d 	bl	80098d4 <USBH_ParseStringDesc>
  }

  return status;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607b      	str	r3, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	72fb      	strb	r3, [r7, #11]
 80091d2:	4613      	mov	r3, r2
 80091d4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	789b      	ldrb	r3, [r3, #2]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d11c      	bne.n	8009218 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80091de:	7afb      	ldrb	r3, [r7, #11]
 80091e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2206      	movs	r2, #6
 80091ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	893a      	ldrh	r2, [r7, #8]
 80091f4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80091f6:	893b      	ldrh	r3, [r7, #8]
 80091f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80091fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009200:	d104      	bne.n	800920c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f240 4209 	movw	r2, #1033	@ 0x409
 8009208:	829a      	strh	r2, [r3, #20]
 800920a:	e002      	b.n	8009212 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8b3a      	ldrh	r2, [r7, #24]
 8009216:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009218:	8b3b      	ldrh	r3, [r7, #24]
 800921a:	461a      	mov	r2, r3
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fba5 	bl	800996e <USBH_CtlReq>
 8009224:	4603      	mov	r3, r0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	789b      	ldrb	r3, [r3, #2]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10f      	bne.n	8009262 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2205      	movs	r2, #5
 800924c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	b29a      	uxth	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009262:	2200      	movs	r2, #0
 8009264:	2100      	movs	r1, #0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fb81 	bl	800996e <USBH_CtlReq>
 800926c:	4603      	mov	r3, r0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	789b      	ldrb	r3, [r3, #2]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d10e      	bne.n	80092a8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2209      	movs	r2, #9
 8009294:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	887a      	ldrh	r2, [r7, #2]
 800929a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092a8:	2200      	movs	r2, #0
 80092aa:	2100      	movs	r1, #0
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fb5e 	bl	800996e <USBH_CtlReq>
 80092b2:	4603      	mov	r3, r0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	789b      	ldrb	r3, [r3, #2]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10f      	bne.n	80092f0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2203      	movs	r2, #3
 80092da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092f0:	2200      	movs	r2, #0
 80092f2:	2100      	movs	r1, #0
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fb3a 	bl	800996e <USBH_CtlReq>
 80092fa:	4603      	mov	r3, r0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	789b      	ldrb	r3, [r3, #2]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d10f      	bne.n	8009338 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	b29a      	uxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009338:	2200      	movs	r2, #0
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fb16 	bl	800996e <USBH_CtlReq>
 8009342:	4603      	mov	r3, r0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	4613      	mov	r3, r2
 8009358:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009360:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800936c:	2302      	movs	r3, #2
 800936e:	e094      	b.n	800949a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	785a      	ldrb	r2, [r3, #1]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	3302      	adds	r3, #2
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3303      	adds	r3, #3
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	b29b      	uxth	r3, r3
 8009392:	4313      	orrs	r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	791a      	ldrb	r2, [r3, #4]
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	795a      	ldrb	r2, [r3, #5]
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	799a      	ldrb	r2, [r3, #6]
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	79da      	ldrb	r2, [r3, #7]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d11b      	bne.n	8009406 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	79db      	ldrb	r3, [r3, #7]
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	dc0f      	bgt.n	80093f6 <USBH_ParseDevDesc+0xaa>
 80093d6:	2b08      	cmp	r3, #8
 80093d8:	db0f      	blt.n	80093fa <USBH_ParseDevDesc+0xae>
 80093da:	3b08      	subs	r3, #8
 80093dc:	4a32      	ldr	r2, [pc, #200]	@ (80094a8 <USBH_ParseDevDesc+0x15c>)
 80093de:	fa22 f303 	lsr.w	r3, r2, r3
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bf14      	ite	ne
 80093ea:	2301      	movne	r3, #1
 80093ec:	2300      	moveq	r3, #0
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d106      	bne.n	8009402 <USBH_ParseDevDesc+0xb6>
 80093f4:	e001      	b.n	80093fa <USBH_ParseDevDesc+0xae>
 80093f6:	2b40      	cmp	r3, #64	@ 0x40
 80093f8:	d003      	beq.n	8009402 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2208      	movs	r2, #8
 80093fe:	71da      	strb	r2, [r3, #7]
        break;
 8009400:	e000      	b.n	8009404 <USBH_ParseDevDesc+0xb8>
        break;
 8009402:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009404:	e00e      	b.n	8009424 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800940c:	2b02      	cmp	r3, #2
 800940e:	d107      	bne.n	8009420 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	79db      	ldrb	r3, [r3, #7]
 8009414:	2b08      	cmp	r3, #8
 8009416:	d005      	beq.n	8009424 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2208      	movs	r2, #8
 800941c:	71da      	strb	r2, [r3, #7]
 800941e:	e001      	b.n	8009424 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009420:	2303      	movs	r3, #3
 8009422:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009424:	88fb      	ldrh	r3, [r7, #6]
 8009426:	2b08      	cmp	r3, #8
 8009428:	d936      	bls.n	8009498 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	3308      	adds	r3, #8
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3309      	adds	r3, #9
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	b29b      	uxth	r3, r3
 800943c:	4313      	orrs	r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	330a      	adds	r3, #10
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	330b      	adds	r3, #11
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	4313      	orrs	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	330c      	adds	r3, #12
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	330d      	adds	r3, #13
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	b29b      	uxth	r3, r3
 8009470:	4313      	orrs	r3, r2
 8009472:	b29a      	uxth	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	7b9a      	ldrb	r2, [r3, #14]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	7bda      	ldrb	r2, [r3, #15]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	7c1a      	ldrb	r2, [r3, #16]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	7c5a      	ldrb	r2, [r3, #17]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
}
 800949a:	4618      	mov	r0, r3
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	01000101 	.word	0x01000101

080094ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08c      	sub	sp, #48	@ 0x30
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80094c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	e0da      	b.n	8009694 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80094e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b09      	cmp	r3, #9
 80094e8:	d002      	beq.n	80094f0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ec:	2209      	movs	r2, #9
 80094ee:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	781a      	ldrb	r2, [r3, #0]
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	785a      	ldrb	r2, [r3, #1]
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	3302      	adds	r3, #2
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	3303      	adds	r3, #3
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	b29b      	uxth	r3, r3
 8009512:	4313      	orrs	r3, r2
 8009514:	b29b      	uxth	r3, r3
 8009516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800951a:	bf28      	it	cs
 800951c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009520:	b29a      	uxth	r2, r3
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	791a      	ldrb	r2, [r3, #4]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	795a      	ldrb	r2, [r3, #5]
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	799a      	ldrb	r2, [r3, #6]
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	79da      	ldrb	r2, [r3, #7]
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	7a1a      	ldrb	r2, [r3, #8]
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	2b09      	cmp	r3, #9
 8009552:	f240 809d 	bls.w	8009690 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009556:	2309      	movs	r3, #9
 8009558:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800955e:	e081      	b.n	8009664 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009560:	f107 0316 	add.w	r3, r7, #22
 8009564:	4619      	mov	r1, r3
 8009566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009568:	f000 f9e7 	bl	800993a <USBH_GetNextDesc>
 800956c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	2b04      	cmp	r3, #4
 8009574:	d176      	bne.n	8009664 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b09      	cmp	r3, #9
 800957c:	d002      	beq.n	8009584 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800957e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009580:	2209      	movs	r2, #9
 8009582:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009588:	221a      	movs	r2, #26
 800958a:	fb02 f303 	mul.w	r3, r2, r3
 800958e:	3308      	adds	r3, #8
 8009590:	6a3a      	ldr	r2, [r7, #32]
 8009592:	4413      	add	r3, r2
 8009594:	3302      	adds	r3, #2
 8009596:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800959a:	69f8      	ldr	r0, [r7, #28]
 800959c:	f000 f87e 	bl	800969c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095aa:	e043      	b.n	8009634 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095ac:	f107 0316 	add.w	r3, r7, #22
 80095b0:	4619      	mov	r1, r3
 80095b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095b4:	f000 f9c1 	bl	800993a <USBH_GetNextDesc>
 80095b8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095bc:	785b      	ldrb	r3, [r3, #1]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d138      	bne.n	8009634 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	795b      	ldrb	r3, [r3, #5]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d113      	bne.n	80095f2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d003      	beq.n	80095da <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	799b      	ldrb	r3, [r3, #6]
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d10b      	bne.n	80095f2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	79db      	ldrb	r3, [r3, #7]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10b      	bne.n	80095fa <USBH_ParseCfgDesc+0x14e>
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b09      	cmp	r3, #9
 80095e8:	d007      	beq.n	80095fa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	2209      	movs	r2, #9
 80095ee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095f0:	e003      	b.n	80095fa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	2207      	movs	r2, #7
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	e000      	b.n	80095fc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095fa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009600:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009604:	3201      	adds	r2, #1
 8009606:	00d2      	lsls	r2, r2, #3
 8009608:	211a      	movs	r1, #26
 800960a:	fb01 f303 	mul.w	r3, r1, r3
 800960e:	4413      	add	r3, r2
 8009610:	3308      	adds	r3, #8
 8009612:	6a3a      	ldr	r2, [r7, #32]
 8009614:	4413      	add	r3, r2
 8009616:	3304      	adds	r3, #4
 8009618:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800961a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800961c:	69b9      	ldr	r1, [r7, #24]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 f870 	bl	8009704 <USBH_ParseEPDesc>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800962a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800962e:	3301      	adds	r3, #1
 8009630:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	791b      	ldrb	r3, [r3, #4]
 8009638:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800963c:	429a      	cmp	r2, r3
 800963e:	d204      	bcs.n	800964a <USBH_ParseCfgDesc+0x19e>
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	885a      	ldrh	r2, [r3, #2]
 8009644:	8afb      	ldrh	r3, [r7, #22]
 8009646:	429a      	cmp	r2, r3
 8009648:	d8b0      	bhi.n	80095ac <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	791b      	ldrb	r3, [r3, #4]
 800964e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009652:	429a      	cmp	r2, r3
 8009654:	d201      	bcs.n	800965a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009656:	2303      	movs	r3, #3
 8009658:	e01c      	b.n	8009694 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800965a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800965e:	3301      	adds	r3, #1
 8009660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009668:	2b01      	cmp	r3, #1
 800966a:	d805      	bhi.n	8009678 <USBH_ParseCfgDesc+0x1cc>
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	885a      	ldrh	r2, [r3, #2]
 8009670:	8afb      	ldrh	r3, [r7, #22]
 8009672:	429a      	cmp	r2, r3
 8009674:	f63f af74 	bhi.w	8009560 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	791b      	ldrb	r3, [r3, #4]
 800967c:	2b02      	cmp	r3, #2
 800967e:	bf28      	it	cs
 8009680:	2302      	movcs	r3, #2
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009688:	429a      	cmp	r2, r3
 800968a:	d201      	bcs.n	8009690 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800968c:	2303      	movs	r3, #3
 800968e:	e001      	b.n	8009694 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009690:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009694:	4618      	mov	r0, r3
 8009696:	3730      	adds	r7, #48	@ 0x30
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785a      	ldrb	r2, [r3, #1]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	789a      	ldrb	r2, [r3, #2]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	78da      	ldrb	r2, [r3, #3]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	3304      	adds	r3, #4
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	bf28      	it	cs
 80096d0:	2302      	movcs	r3, #2
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	795a      	ldrb	r2, [r3, #5]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	799a      	ldrb	r2, [r3, #6]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	79da      	ldrb	r2, [r3, #7]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	7a1a      	ldrb	r2, [r3, #8]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	721a      	strb	r2, [r3, #8]
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	785a      	ldrb	r2, [r3, #1]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	789a      	ldrb	r2, [r3, #2]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	78da      	ldrb	r2, [r3, #3]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3305      	adds	r3, #5
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	b29b      	uxth	r3, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	b29a      	uxth	r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	799a      	ldrb	r2, [r3, #6]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	889b      	ldrh	r3, [r3, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009766:	d804      	bhi.n	8009772 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800976c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009770:	d901      	bls.n	8009776 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009772:	2303      	movs	r3, #3
 8009774:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800977c:	2b00      	cmp	r3, #0
 800977e:	d136      	bne.n	80097ee <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	78db      	ldrb	r3, [r3, #3]
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d108      	bne.n	800979e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	889b      	ldrh	r3, [r3, #4]
 8009790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009794:	f240 8097 	bls.w	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009798:	2303      	movs	r3, #3
 800979a:	75fb      	strb	r3, [r7, #23]
 800979c:	e093      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	78db      	ldrb	r3, [r3, #3]
 80097a2:	f003 0303 	and.w	r3, r3, #3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d107      	bne.n	80097ba <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	889b      	ldrh	r3, [r3, #4]
 80097ae:	2b40      	cmp	r3, #64	@ 0x40
 80097b0:	f240 8089 	bls.w	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097b4:	2303      	movs	r3, #3
 80097b6:	75fb      	strb	r3, [r7, #23]
 80097b8:	e085      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	78db      	ldrb	r3, [r3, #3]
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d005      	beq.n	80097d2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	78db      	ldrb	r3, [r3, #3]
 80097ca:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d10a      	bne.n	80097e8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	799b      	ldrb	r3, [r3, #6]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <USBH_ParseEPDesc+0xde>
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	799b      	ldrb	r3, [r3, #6]
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d970      	bls.n	80098c4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80097e2:	2303      	movs	r3, #3
 80097e4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097e6:	e06d      	b.n	80098c4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80097e8:	2303      	movs	r3, #3
 80097ea:	75fb      	strb	r3, [r7, #23]
 80097ec:	e06b      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d13c      	bne.n	8009872 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	78db      	ldrb	r3, [r3, #3]
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d005      	beq.n	8009810 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	78db      	ldrb	r3, [r3, #3]
 8009808:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	889b      	ldrh	r3, [r3, #4]
 8009814:	2b40      	cmp	r3, #64	@ 0x40
 8009816:	d956      	bls.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009818:	2303      	movs	r3, #3
 800981a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800981c:	e053      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	78db      	ldrb	r3, [r3, #3]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b01      	cmp	r3, #1
 8009828:	d10e      	bne.n	8009848 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	799b      	ldrb	r3, [r3, #6]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009836:	2b10      	cmp	r3, #16
 8009838:	d803      	bhi.n	8009842 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800983e:	2b40      	cmp	r3, #64	@ 0x40
 8009840:	d941      	bls.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009842:	2303      	movs	r3, #3
 8009844:	75fb      	strb	r3, [r7, #23]
 8009846:	e03e      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	78db      	ldrb	r3, [r3, #3]
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	2b03      	cmp	r3, #3
 8009852:	d10b      	bne.n	800986c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	799b      	ldrb	r3, [r3, #6]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <USBH_ParseEPDesc+0x162>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	889b      	ldrh	r3, [r3, #4]
 8009860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009864:	d32f      	bcc.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009866:	2303      	movs	r3, #3
 8009868:	75fb      	strb	r3, [r7, #23]
 800986a:	e02c      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800986c:	2303      	movs	r3, #3
 800986e:	75fb      	strb	r3, [r7, #23]
 8009870:	e029      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009878:	2b02      	cmp	r3, #2
 800987a:	d120      	bne.n	80098be <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	78db      	ldrb	r3, [r3, #3]
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	889b      	ldrh	r3, [r3, #4]
 800988c:	2b08      	cmp	r3, #8
 800988e:	d01a      	beq.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009890:	2303      	movs	r3, #3
 8009892:	75fb      	strb	r3, [r7, #23]
 8009894:	e017      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	78db      	ldrb	r3, [r3, #3]
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d10a      	bne.n	80098b8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	799b      	ldrb	r3, [r3, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <USBH_ParseEPDesc+0x1ae>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	889b      	ldrh	r3, [r3, #4]
 80098ae:	2b08      	cmp	r3, #8
 80098b0:	d909      	bls.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098b2:	2303      	movs	r3, #3
 80098b4:	75fb      	strb	r3, [r7, #23]
 80098b6:	e006      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80098b8:	2303      	movs	r3, #3
 80098ba:	75fb      	strb	r3, [r7, #23]
 80098bc:	e003      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80098be:	2303      	movs	r3, #3
 80098c0:	75fb      	strb	r3, [r7, #23]
 80098c2:	e000      	b.n	80098c6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098c4:	bf00      	nop
  }

  return status;
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d120      	bne.n	800992e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	1e9a      	subs	r2, r3, #2
 80098f2:	88fb      	ldrh	r3, [r7, #6]
 80098f4:	4293      	cmp	r3, r2
 80098f6:	bf28      	it	cs
 80098f8:	4613      	movcs	r3, r2
 80098fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3302      	adds	r3, #2
 8009900:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009902:	2300      	movs	r3, #0
 8009904:	82fb      	strh	r3, [r7, #22]
 8009906:	e00b      	b.n	8009920 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009908:	8afb      	ldrh	r3, [r7, #22]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3301      	adds	r3, #1
 8009918:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800991a:	8afb      	ldrh	r3, [r7, #22]
 800991c:	3302      	adds	r3, #2
 800991e:	82fb      	strh	r3, [r7, #22]
 8009920:	8afa      	ldrh	r2, [r7, #22]
 8009922:	8abb      	ldrh	r3, [r7, #20]
 8009924:	429a      	cmp	r2, r3
 8009926:	d3ef      	bcc.n	8009908 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
  }
}
 800992e:	bf00      	nop
 8009930:	371c      	adds	r7, #28
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	4413      	add	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009960:	68fb      	ldr	r3, [r7, #12]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	4613      	mov	r3, r2
 800997a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800997c:	2301      	movs	r3, #1
 800997e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d002      	beq.n	800998e <USBH_CtlReq+0x20>
 8009988:	2b02      	cmp	r3, #2
 800998a:	d00f      	beq.n	80099ac <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800998c:	e027      	b.n	80099de <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	88fa      	ldrh	r2, [r7, #6]
 8009998:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2202      	movs	r2, #2
 80099a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
      break;
 80099aa:	e018      	b.n	80099de <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f81b 	bl	80099e8 <USBH_HandleControl>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <USBH_CtlReq+0x54>
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d106      	bne.n	80099d0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	761a      	strb	r2, [r3, #24]
      break;
 80099ce:	e005      	b.n	80099dc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d102      	bne.n	80099dc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	709a      	strb	r2, [r3, #2]
      break;
 80099dc:	bf00      	nop
  }
  return status;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80099f0:	2301      	movs	r3, #1
 80099f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	7e1b      	ldrb	r3, [r3, #24]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	2b0a      	cmp	r3, #10
 8009a00:	f200 8156 	bhi.w	8009cb0 <USBH_HandleControl+0x2c8>
 8009a04:	a201      	add	r2, pc, #4	@ (adr r2, 8009a0c <USBH_HandleControl+0x24>)
 8009a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0a:	bf00      	nop
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	08009a53 	.word	0x08009a53
 8009a14:	08009abd 	.word	0x08009abd
 8009a18:	08009ae3 	.word	0x08009ae3
 8009a1c:	08009b1b 	.word	0x08009b1b
 8009a20:	08009b45 	.word	0x08009b45
 8009a24:	08009b97 	.word	0x08009b97
 8009a28:	08009bb9 	.word	0x08009bb9
 8009a2c:	08009bf5 	.word	0x08009bf5
 8009a30:	08009c1b 	.word	0x08009c1b
 8009a34:	08009c59 	.word	0x08009c59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f103 0110 	add.w	r1, r3, #16
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	795b      	ldrb	r3, [r3, #5]
 8009a42:	461a      	mov	r2, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f943 	bl	8009cd0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	761a      	strb	r2, [r3, #24]
      break;
 8009a50:	e139      	b.n	8009cc6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	795b      	ldrb	r3, [r3, #5]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fcc5 	bl	800a3e8 <USBH_LL_GetURBState>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d11e      	bne.n	8009aa6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7c1b      	ldrb	r3, [r3, #16]
 8009a6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a70:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8adb      	ldrh	r3, [r3, #22]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009a7a:	7b7b      	ldrb	r3, [r7, #13]
 8009a7c:	2b80      	cmp	r3, #128	@ 0x80
 8009a7e:	d103      	bne.n	8009a88 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2203      	movs	r2, #3
 8009a84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a86:	e115      	b.n	8009cb4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	761a      	strb	r2, [r3, #24]
      break;
 8009a8e:	e111      	b.n	8009cb4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009a90:	7b7b      	ldrb	r3, [r7, #13]
 8009a92:	2b80      	cmp	r3, #128	@ 0x80
 8009a94:	d103      	bne.n	8009a9e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2209      	movs	r2, #9
 8009a9a:	761a      	strb	r2, [r3, #24]
      break;
 8009a9c:	e10a      	b.n	8009cb4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2207      	movs	r2, #7
 8009aa2:	761a      	strb	r2, [r3, #24]
      break;
 8009aa4:	e106      	b.n	8009cb4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d003      	beq.n	8009ab4 <USBH_HandleControl+0xcc>
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	f040 8100 	bne.w	8009cb4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	220b      	movs	r2, #11
 8009ab8:	761a      	strb	r2, [r3, #24]
      break;
 8009aba:	e0fb      	b.n	8009cb4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6899      	ldr	r1, [r3, #8]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	899a      	ldrh	r2, [r3, #12]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	791b      	ldrb	r3, [r3, #4]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f93a 	bl	8009d4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2204      	movs	r2, #4
 8009ade:	761a      	strb	r2, [r3, #24]
      break;
 8009ae0:	e0f1      	b.n	8009cc6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	791b      	ldrb	r3, [r3, #4]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc7d 	bl	800a3e8 <USBH_LL_GetURBState>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d102      	bne.n	8009afe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2209      	movs	r2, #9
 8009afc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b05      	cmp	r3, #5
 8009b02:	d102      	bne.n	8009b0a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b04:	2303      	movs	r3, #3
 8009b06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b08:	e0d6      	b.n	8009cb8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	f040 80d3 	bne.w	8009cb8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	220b      	movs	r2, #11
 8009b16:	761a      	strb	r2, [r3, #24]
      break;
 8009b18:	e0ce      	b.n	8009cb8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6899      	ldr	r1, [r3, #8]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	899a      	ldrh	r2, [r3, #12]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	795b      	ldrb	r3, [r3, #5]
 8009b26:	2001      	movs	r0, #1
 8009b28:	9000      	str	r0, [sp, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f8ea 	bl	8009d04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2206      	movs	r2, #6
 8009b40:	761a      	strb	r2, [r3, #24]
      break;
 8009b42:	e0c0      	b.n	8009cc6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	795b      	ldrb	r3, [r3, #5]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fc4c 	bl	800a3e8 <USBH_LL_GetURBState>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d103      	bne.n	8009b62 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2207      	movs	r2, #7
 8009b5e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b60:	e0ac      	b.n	8009cbc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b05      	cmp	r3, #5
 8009b66:	d105      	bne.n	8009b74 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	220c      	movs	r2, #12
 8009b6c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	73fb      	strb	r3, [r7, #15]
      break;
 8009b72:	e0a3      	b.n	8009cbc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d103      	bne.n	8009b82 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2205      	movs	r2, #5
 8009b7e:	761a      	strb	r2, [r3, #24]
      break;
 8009b80:	e09c      	b.n	8009cbc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	f040 8099 	bne.w	8009cbc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	220b      	movs	r2, #11
 8009b8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009b90:	2302      	movs	r3, #2
 8009b92:	73fb      	strb	r3, [r7, #15]
      break;
 8009b94:	e092      	b.n	8009cbc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	791b      	ldrb	r3, [r3, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f8d5 	bl	8009d4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2208      	movs	r2, #8
 8009bb4:	761a      	strb	r2, [r3, #24]

      break;
 8009bb6:	e086      	b.n	8009cc6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	791b      	ldrb	r3, [r3, #4]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fc12 	bl	800a3e8 <USBH_LL_GetURBState>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d105      	bne.n	8009bda <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	220d      	movs	r2, #13
 8009bd2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bd8:	e072      	b.n	8009cc0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d103      	bne.n	8009be8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	220b      	movs	r2, #11
 8009be4:	761a      	strb	r2, [r3, #24]
      break;
 8009be6:	e06b      	b.n	8009cc0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	d168      	bne.n	8009cc0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf2:	e065      	b.n	8009cc0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	795b      	ldrb	r3, [r3, #5]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	9200      	str	r2, [sp, #0]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2100      	movs	r1, #0
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f87f 	bl	8009d04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	220a      	movs	r2, #10
 8009c16:	761a      	strb	r2, [r3, #24]
      break;
 8009c18:	e055      	b.n	8009cc6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	795b      	ldrb	r3, [r3, #5]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fbe1 	bl	800a3e8 <USBH_LL_GetURBState>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d105      	bne.n	8009c3c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	220d      	movs	r2, #13
 8009c38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c3a:	e043      	b.n	8009cc4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d103      	bne.n	8009c4a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2209      	movs	r2, #9
 8009c46:	761a      	strb	r2, [r3, #24]
      break;
 8009c48:	e03c      	b.n	8009cc4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d139      	bne.n	8009cc4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	220b      	movs	r2, #11
 8009c54:	761a      	strb	r2, [r3, #24]
      break;
 8009c56:	e035      	b.n	8009cc4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7e5b      	ldrb	r3, [r3, #25]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	765a      	strb	r2, [r3, #25]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7e5b      	ldrb	r3, [r3, #25]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d806      	bhi.n	8009c7a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009c78:	e025      	b.n	8009cc6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c80:	2106      	movs	r1, #6
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	795b      	ldrb	r3, [r3, #5]
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f90c 	bl	8009eb0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	791b      	ldrb	r3, [r3, #4]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f906 	bl	8009eb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009caa:	2302      	movs	r3, #2
 8009cac:	73fb      	strb	r3, [r7, #15]
      break;
 8009cae:	e00a      	b.n	8009cc6 <USBH_HandleControl+0x2de>

    default:
      break;
 8009cb0:	bf00      	nop
 8009cb2:	e008      	b.n	8009cc6 <USBH_HandleControl+0x2de>
      break;
 8009cb4:	bf00      	nop
 8009cb6:	e006      	b.n	8009cc6 <USBH_HandleControl+0x2de>
      break;
 8009cb8:	bf00      	nop
 8009cba:	e004      	b.n	8009cc6 <USBH_HandleControl+0x2de>
      break;
 8009cbc:	bf00      	nop
 8009cbe:	e002      	b.n	8009cc6 <USBH_HandleControl+0x2de>
      break;
 8009cc0:	bf00      	nop
 8009cc2:	e000      	b.n	8009cc6 <USBH_HandleControl+0x2de>
      break;
 8009cc4:	bf00      	nop
  }

  return status;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cde:	79f9      	ldrb	r1, [r7, #7]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9303      	str	r3, [sp, #12]
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	9302      	str	r3, [sp, #8]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	9301      	str	r3, [sp, #4]
 8009cec:	2300      	movs	r3, #0
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 fb46 	bl	800a386 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af04      	add	r7, sp, #16
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4611      	mov	r1, r2
 8009d10:	461a      	mov	r2, r3
 8009d12:	460b      	mov	r3, r1
 8009d14:	80fb      	strh	r3, [r7, #6]
 8009d16:	4613      	mov	r3, r2
 8009d18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d28:	7979      	ldrb	r1, [r7, #5]
 8009d2a:	7e3b      	ldrb	r3, [r7, #24]
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	88fb      	ldrh	r3, [r7, #6]
 8009d30:	9302      	str	r3, [sp, #8]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	2301      	movs	r3, #1
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 fb21 	bl	800a386 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b088      	sub	sp, #32
 8009d52:	af04      	add	r7, sp, #16
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	80fb      	strh	r3, [r7, #6]
 8009d60:	4613      	mov	r3, r2
 8009d62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d64:	7979      	ldrb	r1, [r7, #5]
 8009d66:	2300      	movs	r3, #0
 8009d68:	9303      	str	r3, [sp, #12]
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	9302      	str	r3, [sp, #8]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	2301      	movs	r3, #1
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	2300      	movs	r3, #0
 8009d78:	2201      	movs	r2, #1
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fb03 	bl	800a386 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d80:	2300      	movs	r3, #0

}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	af04      	add	r7, sp, #16
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	4611      	mov	r1, r2
 8009d96:	461a      	mov	r2, r3
 8009d98:	460b      	mov	r3, r1
 8009d9a:	80fb      	strh	r3, [r7, #6]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dae:	7979      	ldrb	r1, [r7, #5]
 8009db0:	7e3b      	ldrb	r3, [r7, #24]
 8009db2:	9303      	str	r3, [sp, #12]
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	9302      	str	r3, [sp, #8]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 fade 	bl	800a386 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af04      	add	r7, sp, #16
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4611      	mov	r1, r2
 8009de0:	461a      	mov	r2, r3
 8009de2:	460b      	mov	r3, r1
 8009de4:	80fb      	strh	r3, [r7, #6]
 8009de6:	4613      	mov	r3, r2
 8009de8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dea:	7979      	ldrb	r1, [r7, #5]
 8009dec:	2300      	movs	r3, #0
 8009dee:	9303      	str	r3, [sp, #12]
 8009df0:	88fb      	ldrh	r3, [r7, #6]
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	2301      	movs	r3, #1
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	2201      	movs	r2, #1
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fac0 	bl	800a386 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	4608      	mov	r0, r1
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4603      	mov	r3, r0
 8009e20:	70fb      	strb	r3, [r7, #3]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70bb      	strb	r3, [r7, #2]
 8009e26:	4613      	mov	r3, r2
 8009e28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009e2a:	7878      	ldrb	r0, [r7, #1]
 8009e2c:	78ba      	ldrb	r2, [r7, #2]
 8009e2e:	78f9      	ldrb	r1, [r7, #3]
 8009e30:	8b3b      	ldrh	r3, [r7, #24]
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	7d3b      	ldrb	r3, [r7, #20]
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	7c3b      	ldrb	r3, [r7, #16]
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fa53 	bl	800a2ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa72 	bl	800a348 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f836 	bl	8009eec <USBH_GetFreePipe>
 8009e80:	4603      	mov	r3, r0
 8009e82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009e84:	89fb      	ldrh	r3, [r7, #14]
 8009e86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00a      	beq.n	8009ea4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	89fb      	ldrh	r3, [r7, #14]
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	33e0      	adds	r3, #224	@ 0xe0
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	440b      	add	r3, r1
 8009ea2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ea4:	89fb      	ldrh	r3, [r7, #14]
 8009ea6:	b2db      	uxtb	r3, r3
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	2b0f      	cmp	r3, #15
 8009ec0:	d80d      	bhi.n	8009ede <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	33e0      	adds	r3, #224	@ 0xe0
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	78fb      	ldrb	r3, [r7, #3]
 8009ed0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	33e0      	adds	r3, #224	@ 0xe0
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
 8009efc:	e00f      	b.n	8009f1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	33e0      	adds	r3, #224	@ 0xe0
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d102      	bne.n	8009f18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	e007      	b.n	8009f28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	73fb      	strb	r3, [r7, #15]
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b0f      	cmp	r3, #15
 8009f22:	d9ec      	bls.n	8009efe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	490e      	ldr	r1, [pc, #56]	@ (8009f74 <MX_USB_HOST_Init+0x40>)
 8009f3c:	480e      	ldr	r0, [pc, #56]	@ (8009f78 <MX_USB_HOST_Init+0x44>)
 8009f3e:	f7fe fb15 	bl	800856c <USBH_Init>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009f48:	f7f7 fb76 	bl	8001638 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009f4c:	490b      	ldr	r1, [pc, #44]	@ (8009f7c <MX_USB_HOST_Init+0x48>)
 8009f4e:	480a      	ldr	r0, [pc, #40]	@ (8009f78 <MX_USB_HOST_Init+0x44>)
 8009f50:	f7fe fbb9 	bl	80086c6 <USBH_RegisterClass>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f5a:	f7f7 fb6d 	bl	8001638 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009f5e:	4806      	ldr	r0, [pc, #24]	@ (8009f78 <MX_USB_HOST_Init+0x44>)
 8009f60:	f7fe fc3d 	bl	80087de <USBH_Start>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009f6a:	f7f7 fb65 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009f6e:	bf00      	nop
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	08009f95 	.word	0x08009f95
 8009f78:	20000688 	.word	0x20000688
 8009f7c:	2000000c 	.word	0x2000000c

08009f80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009f84:	4802      	ldr	r0, [pc, #8]	@ (8009f90 <MX_USB_HOST_Process+0x10>)
 8009f86:	f7fe fc3b 	bl	8008800 <USBH_Process>
}
 8009f8a:	bf00      	nop
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000688 	.word	0x20000688

08009f94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d819      	bhi.n	8009fdc <USBH_UserProcess+0x48>
 8009fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <USBH_UserProcess+0x1c>)
 8009faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fae:	bf00      	nop
 8009fb0:	08009fdd 	.word	0x08009fdd
 8009fb4:	08009fcd 	.word	0x08009fcd
 8009fb8:	08009fdd 	.word	0x08009fdd
 8009fbc:	08009fd5 	.word	0x08009fd5
 8009fc0:	08009fc5 	.word	0x08009fc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009fc4:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <USBH_UserProcess+0x58>)
 8009fc6:	2203      	movs	r2, #3
 8009fc8:	701a      	strb	r2, [r3, #0]
  break;
 8009fca:	e008      	b.n	8009fde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009fcc:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <USBH_UserProcess+0x58>)
 8009fce:	2202      	movs	r2, #2
 8009fd0:	701a      	strb	r2, [r3, #0]
  break;
 8009fd2:	e004      	b.n	8009fde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <USBH_UserProcess+0x58>)
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	701a      	strb	r2, [r3, #0]
  break;
 8009fda:	e000      	b.n	8009fde <USBH_UserProcess+0x4a>

  default:
  break;
 8009fdc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009fde:	bf00      	nop
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20000a60 	.word	0x20000a60

08009ff0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	@ 0x28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	609a      	str	r2, [r3, #8]
 800a004:	60da      	str	r2, [r3, #12]
 800a006:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a010:	d147      	bne.n	800a0a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	4b25      	ldr	r3, [pc, #148]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01a:	4a24      	ldr	r2, [pc, #144]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a01c:	f043 0301 	orr.w	r3, r3, #1
 800a020:	6313      	str	r3, [r2, #48]	@ 0x30
 800a022:	4b22      	ldr	r3, [pc, #136]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	613b      	str	r3, [r7, #16]
 800a02c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a02e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a03c:	f107 0314 	add.w	r3, r7, #20
 800a040:	4619      	mov	r1, r3
 800a042:	481b      	ldr	r0, [pc, #108]	@ (800a0b0 <HAL_HCD_MspInit+0xc0>)
 800a044:	f7f8 fc36 	bl	80028b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a048:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a04c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a04e:	2302      	movs	r3, #2
 800a050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a052:	2300      	movs	r3, #0
 800a054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a056:	2300      	movs	r3, #0
 800a058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a05a:	230a      	movs	r3, #10
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a05e:	f107 0314 	add.w	r3, r7, #20
 800a062:	4619      	mov	r1, r3
 800a064:	4812      	ldr	r0, [pc, #72]	@ (800a0b0 <HAL_HCD_MspInit+0xc0>)
 800a066:	f7f8 fc25 	bl	80028b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a06a:	4b10      	ldr	r3, [pc, #64]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06e:	4a0f      	ldr	r2, [pc, #60]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a074:	6353      	str	r3, [r2, #52]	@ 0x34
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a07e:	4a0b      	ldr	r2, [pc, #44]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a084:	6453      	str	r3, [r2, #68]	@ 0x44
 800a086:	4b09      	ldr	r3, [pc, #36]	@ (800a0ac <HAL_HCD_MspInit+0xbc>)
 800a088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a08a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a092:	2200      	movs	r2, #0
 800a094:	2100      	movs	r1, #0
 800a096:	2043      	movs	r0, #67	@ 0x43
 800a098:	f7f8 fad9 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a09c:	2043      	movs	r0, #67	@ 0x43
 800a09e:	f7f8 faf2 	bl	8002686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	3728      	adds	r7, #40	@ 0x28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	40020000 	.word	0x40020000

0800a0b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe ff73 	bl	8008fae <USBH_LL_IncTimer>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe ffab 	bl	800903a <USBH_LL_Connect>
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe ffb4 	bl	8009068 <USBH_LL_Disconnect>
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
 800a114:	4613      	mov	r3, r2
 800a116:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe ff65 	bl	8009002 <USBH_LL_PortEnabled>
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fe ff65 	bl	800901e <USBH_LL_PortDisabled>
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d12a      	bne.n	800a1c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a16e:	4a18      	ldr	r2, [pc, #96]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a15      	ldr	r2, [pc, #84]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a17a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a17e:	4b14      	ldr	r3, [pc, #80]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a180:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a184:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a186:	4b12      	ldr	r3, [pc, #72]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a188:	2208      	movs	r2, #8
 800a18a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a18c:	4b10      	ldr	r3, [pc, #64]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a18e:	2201      	movs	r2, #1
 800a190:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a192:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a194:	2200      	movs	r2, #0
 800a196:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a198:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a19a:	2202      	movs	r2, #2
 800a19c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a19e:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a1a4:	480a      	ldr	r0, [pc, #40]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a1a6:	f7f8 fd3a 	bl	8002c1e <HAL_HCD_Init>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a1b0:	f7f7 fa42 	bl	8001638 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a1b4:	4806      	ldr	r0, [pc, #24]	@ (800a1d0 <USBH_LL_Init+0x74>)
 800a1b6:	f7f9 f99b 	bl	80034f0 <HAL_HCD_GetCurrentFrame>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fe fee6 	bl	8008f90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000a64 	.word	0x20000a64

0800a1d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7f9 f908 	bl	8003400 <HAL_HCD_Start>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f95e 	bl	800a4b8 <USBH_Get_USB_Status>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a200:	7bbb      	ldrb	r3, [r7, #14]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a220:	4618      	mov	r0, r3
 800a222:	f7f9 f910 	bl	8003446 <HAL_HCD_Stop>
 800a226:	4603      	mov	r3, r0
 800a228:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 f943 	bl	800a4b8 <USBH_Get_USB_Status>
 800a232:	4603      	mov	r3, r0
 800a234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a236:	7bbb      	ldrb	r3, [r7, #14]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a252:	4618      	mov	r0, r3
 800a254:	f7f9 f95a 	bl	800350c <HAL_HCD_GetCurrentSpeed>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d00c      	beq.n	800a278 <USBH_LL_GetSpeed+0x38>
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d80d      	bhi.n	800a27e <USBH_LL_GetSpeed+0x3e>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <USBH_LL_GetSpeed+0x2c>
 800a266:	2b01      	cmp	r3, #1
 800a268:	d003      	beq.n	800a272 <USBH_LL_GetSpeed+0x32>
 800a26a:	e008      	b.n	800a27e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]
    break;
 800a270:	e008      	b.n	800a284 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a272:	2301      	movs	r3, #1
 800a274:	73fb      	strb	r3, [r7, #15]
    break;
 800a276:	e005      	b.n	800a284 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a278:	2302      	movs	r3, #2
 800a27a:	73fb      	strb	r3, [r7, #15]
    break;
 800a27c:	e002      	b.n	800a284 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
    break;
 800a282:	bf00      	nop
  }
  return  speed;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7f9 f8eb 	bl	8003480 <HAL_HCD_ResetPort>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 f901 	bl	800a4b8 <USBH_Get_USB_Status>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f9 f8f3 	bl	80034c6 <HAL_HCD_HC_GetXferCount>
 800a2e0:	4603      	mov	r3, r0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2ea:	b590      	push	{r4, r7, lr}
 800a2ec:	b089      	sub	sp, #36	@ 0x24
 800a2ee:	af04      	add	r7, sp, #16
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	70fb      	strb	r3, [r7, #3]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70bb      	strb	r3, [r7, #2]
 800a300:	4613      	mov	r3, r2
 800a302:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a312:	787c      	ldrb	r4, [r7, #1]
 800a314:	78ba      	ldrb	r2, [r7, #2]
 800a316:	78f9      	ldrb	r1, [r7, #3]
 800a318:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a31a:	9302      	str	r3, [sp, #8]
 800a31c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	4623      	mov	r3, r4
 800a32a:	f7f8 fcdf 	bl	8002cec <HAL_HCD_HC_Init>
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	4618      	mov	r0, r3
 800a336:	f000 f8bf 	bl	800a4b8 <USBH_Get_USB_Status>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}

0800a348 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a362:	78fa      	ldrb	r2, [r7, #3]
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f7f8 fd78 	bl	8002e5c <HAL_HCD_HC_Halt>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f8a0 	bl	800a4b8 <USBH_Get_USB_Status>
 800a378:	4603      	mov	r3, r0
 800a37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a386:	b590      	push	{r4, r7, lr}
 800a388:	b089      	sub	sp, #36	@ 0x24
 800a38a:	af04      	add	r7, sp, #16
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	461a      	mov	r2, r3
 800a394:	4603      	mov	r3, r0
 800a396:	70fb      	strb	r3, [r7, #3]
 800a398:	460b      	mov	r3, r1
 800a39a:	70bb      	strb	r3, [r7, #2]
 800a39c:	4613      	mov	r3, r2
 800a39e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a3ae:	787c      	ldrb	r4, [r7, #1]
 800a3b0:	78ba      	ldrb	r2, [r7, #2]
 800a3b2:	78f9      	ldrb	r1, [r7, #3]
 800a3b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3bc:	9302      	str	r3, [sp, #8]
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	f7f8 fd6b 	bl	8002ea4 <HAL_HCD_HC_SubmitRequest>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 f86f 	bl	800a4b8 <USBH_Get_USB_Status>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd90      	pop	{r4, r7, pc}

0800a3e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f9 f84c 	bl	800349c <HAL_HCD_HC_GetURBState>
 800a404:	4603      	mov	r3, r0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	460b      	mov	r3, r1
 800a418:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a420:	2b01      	cmp	r3, #1
 800a422:	d103      	bne.n	800a42c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	4618      	mov	r0, r3
 800a428:	f000 f872 	bl	800a510 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a42c:	20c8      	movs	r0, #200	@ 0xc8
 800a42e:	f7f7 fc43 	bl	8001cb8 <HAL_Delay>
  return USBH_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
 800a448:	4613      	mov	r3, r2
 800a44a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a452:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a454:	78fa      	ldrb	r2, [r7, #3]
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	4613      	mov	r3, r2
 800a45a:	011b      	lsls	r3, r3, #4
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	440b      	add	r3, r1
 800a462:	3317      	adds	r3, #23
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	68f9      	ldr	r1, [r7, #12]
 800a46e:	4613      	mov	r3, r2
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	333c      	adds	r3, #60	@ 0x3c
 800a47a:	78ba      	ldrb	r2, [r7, #2]
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	e009      	b.n	800a494 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a480:	78fa      	ldrb	r2, [r7, #3]
 800a482:	68f9      	ldr	r1, [r7, #12]
 800a484:	4613      	mov	r3, r2
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	1a9b      	subs	r3, r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	440b      	add	r3, r1
 800a48e:	333d      	adds	r3, #61	@ 0x3d
 800a490:	78ba      	ldrb	r2, [r7, #2]
 800a492:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b082      	sub	sp, #8
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7f7 fc04 	bl	8001cb8 <HAL_Delay>
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d817      	bhi.n	800a4fc <USBH_Get_USB_Status+0x44>
 800a4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d4 <USBH_Get_USB_Status+0x1c>)
 800a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d2:	bf00      	nop
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a4eb 	.word	0x0800a4eb
 800a4dc:	0800a4f1 	.word	0x0800a4f1
 800a4e0:	0800a4f7 	.word	0x0800a4f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e8:	e00b      	b.n	800a502 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ee:	e008      	b.n	800a502 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f4:	e005      	b.n	800a502 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4fa:	e002      	b.n	800a502 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a500:	bf00      	nop
  }
  return usb_status;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a524:	2301      	movs	r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
 800a528:	e001      	b.n	800a52e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	461a      	mov	r2, r3
 800a532:	2101      	movs	r1, #1
 800a534:	4803      	ldr	r0, [pc, #12]	@ (800a544 <MX_DriverVbusFS+0x34>)
 800a536:	f7f8 fb59 	bl	8002bec <HAL_GPIO_WritePin>
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	40020800 	.word	0x40020800

0800a548 <malloc>:
 800a548:	4b02      	ldr	r3, [pc, #8]	@ (800a554 <malloc+0xc>)
 800a54a:	4601      	mov	r1, r0
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	f000 b82d 	b.w	800a5ac <_malloc_r>
 800a552:	bf00      	nop
 800a554:	2000002c 	.word	0x2000002c

0800a558 <free>:
 800a558:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <free+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f000 b8f5 	b.w	800a74c <_free_r>
 800a562:	bf00      	nop
 800a564:	2000002c 	.word	0x2000002c

0800a568 <sbrk_aligned>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	4e0f      	ldr	r6, [pc, #60]	@ (800a5a8 <sbrk_aligned+0x40>)
 800a56c:	460c      	mov	r4, r1
 800a56e:	6831      	ldr	r1, [r6, #0]
 800a570:	4605      	mov	r5, r0
 800a572:	b911      	cbnz	r1, 800a57a <sbrk_aligned+0x12>
 800a574:	f000 f8ae 	bl	800a6d4 <_sbrk_r>
 800a578:	6030      	str	r0, [r6, #0]
 800a57a:	4621      	mov	r1, r4
 800a57c:	4628      	mov	r0, r5
 800a57e:	f000 f8a9 	bl	800a6d4 <_sbrk_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d103      	bne.n	800a58e <sbrk_aligned+0x26>
 800a586:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a58a:	4620      	mov	r0, r4
 800a58c:	bd70      	pop	{r4, r5, r6, pc}
 800a58e:	1cc4      	adds	r4, r0, #3
 800a590:	f024 0403 	bic.w	r4, r4, #3
 800a594:	42a0      	cmp	r0, r4
 800a596:	d0f8      	beq.n	800a58a <sbrk_aligned+0x22>
 800a598:	1a21      	subs	r1, r4, r0
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 f89a 	bl	800a6d4 <_sbrk_r>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d1f2      	bne.n	800a58a <sbrk_aligned+0x22>
 800a5a4:	e7ef      	b.n	800a586 <sbrk_aligned+0x1e>
 800a5a6:	bf00      	nop
 800a5a8:	20000e44 	.word	0x20000e44

0800a5ac <_malloc_r>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	1ccd      	adds	r5, r1, #3
 800a5b2:	f025 0503 	bic.w	r5, r5, #3
 800a5b6:	3508      	adds	r5, #8
 800a5b8:	2d0c      	cmp	r5, #12
 800a5ba:	bf38      	it	cc
 800a5bc:	250c      	movcc	r5, #12
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	db01      	blt.n	800a5c8 <_malloc_r+0x1c>
 800a5c4:	42a9      	cmp	r1, r5
 800a5c6:	d904      	bls.n	800a5d2 <_malloc_r+0x26>
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	6033      	str	r3, [r6, #0]
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6a8 <_malloc_r+0xfc>
 800a5d6:	f000 f869 	bl	800a6ac <__malloc_lock>
 800a5da:	f8d8 3000 	ldr.w	r3, [r8]
 800a5de:	461c      	mov	r4, r3
 800a5e0:	bb44      	cbnz	r4, 800a634 <_malloc_r+0x88>
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff ffbf 	bl	800a568 <sbrk_aligned>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	d158      	bne.n	800a6a2 <_malloc_r+0xf6>
 800a5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a5f4:	4627      	mov	r7, r4
 800a5f6:	2f00      	cmp	r7, #0
 800a5f8:	d143      	bne.n	800a682 <_malloc_r+0xd6>
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	d04b      	beq.n	800a696 <_malloc_r+0xea>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	4639      	mov	r1, r7
 800a602:	4630      	mov	r0, r6
 800a604:	eb04 0903 	add.w	r9, r4, r3
 800a608:	f000 f864 	bl	800a6d4 <_sbrk_r>
 800a60c:	4581      	cmp	r9, r0
 800a60e:	d142      	bne.n	800a696 <_malloc_r+0xea>
 800a610:	6821      	ldr	r1, [r4, #0]
 800a612:	1a6d      	subs	r5, r5, r1
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f7ff ffa6 	bl	800a568 <sbrk_aligned>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d03a      	beq.n	800a696 <_malloc_r+0xea>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	442b      	add	r3, r5
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	f8d8 3000 	ldr.w	r3, [r8]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	bb62      	cbnz	r2, 800a688 <_malloc_r+0xdc>
 800a62e:	f8c8 7000 	str.w	r7, [r8]
 800a632:	e00f      	b.n	800a654 <_malloc_r+0xa8>
 800a634:	6822      	ldr	r2, [r4, #0]
 800a636:	1b52      	subs	r2, r2, r5
 800a638:	d420      	bmi.n	800a67c <_malloc_r+0xd0>
 800a63a:	2a0b      	cmp	r2, #11
 800a63c:	d917      	bls.n	800a66e <_malloc_r+0xc2>
 800a63e:	1961      	adds	r1, r4, r5
 800a640:	42a3      	cmp	r3, r4
 800a642:	6025      	str	r5, [r4, #0]
 800a644:	bf18      	it	ne
 800a646:	6059      	strne	r1, [r3, #4]
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	bf08      	it	eq
 800a64c:	f8c8 1000 	streq.w	r1, [r8]
 800a650:	5162      	str	r2, [r4, r5]
 800a652:	604b      	str	r3, [r1, #4]
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f82f 	bl	800a6b8 <__malloc_unlock>
 800a65a:	f104 000b 	add.w	r0, r4, #11
 800a65e:	1d23      	adds	r3, r4, #4
 800a660:	f020 0007 	bic.w	r0, r0, #7
 800a664:	1ac2      	subs	r2, r0, r3
 800a666:	bf1c      	itt	ne
 800a668:	1a1b      	subne	r3, r3, r0
 800a66a:	50a3      	strne	r3, [r4, r2]
 800a66c:	e7af      	b.n	800a5ce <_malloc_r+0x22>
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	42a3      	cmp	r3, r4
 800a672:	bf0c      	ite	eq
 800a674:	f8c8 2000 	streq.w	r2, [r8]
 800a678:	605a      	strne	r2, [r3, #4]
 800a67a:	e7eb      	b.n	800a654 <_malloc_r+0xa8>
 800a67c:	4623      	mov	r3, r4
 800a67e:	6864      	ldr	r4, [r4, #4]
 800a680:	e7ae      	b.n	800a5e0 <_malloc_r+0x34>
 800a682:	463c      	mov	r4, r7
 800a684:	687f      	ldr	r7, [r7, #4]
 800a686:	e7b6      	b.n	800a5f6 <_malloc_r+0x4a>
 800a688:	461a      	mov	r2, r3
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d1fb      	bne.n	800a688 <_malloc_r+0xdc>
 800a690:	2300      	movs	r3, #0
 800a692:	6053      	str	r3, [r2, #4]
 800a694:	e7de      	b.n	800a654 <_malloc_r+0xa8>
 800a696:	230c      	movs	r3, #12
 800a698:	6033      	str	r3, [r6, #0]
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 f80c 	bl	800a6b8 <__malloc_unlock>
 800a6a0:	e794      	b.n	800a5cc <_malloc_r+0x20>
 800a6a2:	6005      	str	r5, [r0, #0]
 800a6a4:	e7d6      	b.n	800a654 <_malloc_r+0xa8>
 800a6a6:	bf00      	nop
 800a6a8:	20000e48 	.word	0x20000e48

0800a6ac <__malloc_lock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	@ (800a6b4 <__malloc_lock+0x8>)
 800a6ae:	f000 b84b 	b.w	800a748 <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	20000f84 	.word	0x20000f84

0800a6b8 <__malloc_unlock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	@ (800a6c0 <__malloc_unlock+0x8>)
 800a6ba:	f000 b846 	b.w	800a74a <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	20000f84 	.word	0x20000f84

0800a6c4 <memset>:
 800a6c4:	4402      	add	r2, r0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d100      	bne.n	800a6ce <memset+0xa>
 800a6cc:	4770      	bx	lr
 800a6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a6d2:	e7f9      	b.n	800a6c8 <memset+0x4>

0800a6d4 <_sbrk_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d06      	ldr	r5, [pc, #24]	@ (800a6f0 <_sbrk_r+0x1c>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4604      	mov	r4, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	602b      	str	r3, [r5, #0]
 800a6e0:	f7f7 fa02 	bl	8001ae8 <_sbrk>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_sbrk_r+0x1a>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_sbrk_r+0x1a>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20000f88 	.word	0x20000f88

0800a6f4 <__errno>:
 800a6f4:	4b01      	ldr	r3, [pc, #4]	@ (800a6fc <__errno+0x8>)
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	2000002c 	.word	0x2000002c

0800a700 <__libc_init_array>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	4d0d      	ldr	r5, [pc, #52]	@ (800a738 <__libc_init_array+0x38>)
 800a704:	4c0d      	ldr	r4, [pc, #52]	@ (800a73c <__libc_init_array+0x3c>)
 800a706:	1b64      	subs	r4, r4, r5
 800a708:	10a4      	asrs	r4, r4, #2
 800a70a:	2600      	movs	r6, #0
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	d109      	bne.n	800a724 <__libc_init_array+0x24>
 800a710:	4d0b      	ldr	r5, [pc, #44]	@ (800a740 <__libc_init_array+0x40>)
 800a712:	4c0c      	ldr	r4, [pc, #48]	@ (800a744 <__libc_init_array+0x44>)
 800a714:	f000 fe04 	bl	800b320 <_init>
 800a718:	1b64      	subs	r4, r4, r5
 800a71a:	10a4      	asrs	r4, r4, #2
 800a71c:	2600      	movs	r6, #0
 800a71e:	42a6      	cmp	r6, r4
 800a720:	d105      	bne.n	800a72e <__libc_init_array+0x2e>
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	f855 3b04 	ldr.w	r3, [r5], #4
 800a728:	4798      	blx	r3
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7ee      	b.n	800a70c <__libc_init_array+0xc>
 800a72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a732:	4798      	blx	r3
 800a734:	3601      	adds	r6, #1
 800a736:	e7f2      	b.n	800a71e <__libc_init_array+0x1e>
 800a738:	0800b74c 	.word	0x0800b74c
 800a73c:	0800b74c 	.word	0x0800b74c
 800a740:	0800b74c 	.word	0x0800b74c
 800a744:	0800b750 	.word	0x0800b750

0800a748 <__retarget_lock_acquire_recursive>:
 800a748:	4770      	bx	lr

0800a74a <__retarget_lock_release_recursive>:
 800a74a:	4770      	bx	lr

0800a74c <_free_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4605      	mov	r5, r0
 800a750:	2900      	cmp	r1, #0
 800a752:	d041      	beq.n	800a7d8 <_free_r+0x8c>
 800a754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a758:	1f0c      	subs	r4, r1, #4
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfb8      	it	lt
 800a75e:	18e4      	addlt	r4, r4, r3
 800a760:	f7ff ffa4 	bl	800a6ac <__malloc_lock>
 800a764:	4a1d      	ldr	r2, [pc, #116]	@ (800a7dc <_free_r+0x90>)
 800a766:	6813      	ldr	r3, [r2, #0]
 800a768:	b933      	cbnz	r3, 800a778 <_free_r+0x2c>
 800a76a:	6063      	str	r3, [r4, #4]
 800a76c:	6014      	str	r4, [r2, #0]
 800a76e:	4628      	mov	r0, r5
 800a770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a774:	f7ff bfa0 	b.w	800a6b8 <__malloc_unlock>
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d908      	bls.n	800a78e <_free_r+0x42>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	1821      	adds	r1, r4, r0
 800a780:	428b      	cmp	r3, r1
 800a782:	bf01      	itttt	eq
 800a784:	6819      	ldreq	r1, [r3, #0]
 800a786:	685b      	ldreq	r3, [r3, #4]
 800a788:	1809      	addeq	r1, r1, r0
 800a78a:	6021      	streq	r1, [r4, #0]
 800a78c:	e7ed      	b.n	800a76a <_free_r+0x1e>
 800a78e:	461a      	mov	r2, r3
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	b10b      	cbz	r3, 800a798 <_free_r+0x4c>
 800a794:	42a3      	cmp	r3, r4
 800a796:	d9fa      	bls.n	800a78e <_free_r+0x42>
 800a798:	6811      	ldr	r1, [r2, #0]
 800a79a:	1850      	adds	r0, r2, r1
 800a79c:	42a0      	cmp	r0, r4
 800a79e:	d10b      	bne.n	800a7b8 <_free_r+0x6c>
 800a7a0:	6820      	ldr	r0, [r4, #0]
 800a7a2:	4401      	add	r1, r0
 800a7a4:	1850      	adds	r0, r2, r1
 800a7a6:	4283      	cmp	r3, r0
 800a7a8:	6011      	str	r1, [r2, #0]
 800a7aa:	d1e0      	bne.n	800a76e <_free_r+0x22>
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	6053      	str	r3, [r2, #4]
 800a7b2:	4408      	add	r0, r1
 800a7b4:	6010      	str	r0, [r2, #0]
 800a7b6:	e7da      	b.n	800a76e <_free_r+0x22>
 800a7b8:	d902      	bls.n	800a7c0 <_free_r+0x74>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	602b      	str	r3, [r5, #0]
 800a7be:	e7d6      	b.n	800a76e <_free_r+0x22>
 800a7c0:	6820      	ldr	r0, [r4, #0]
 800a7c2:	1821      	adds	r1, r4, r0
 800a7c4:	428b      	cmp	r3, r1
 800a7c6:	bf04      	itt	eq
 800a7c8:	6819      	ldreq	r1, [r3, #0]
 800a7ca:	685b      	ldreq	r3, [r3, #4]
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	bf04      	itt	eq
 800a7d0:	1809      	addeq	r1, r1, r0
 800a7d2:	6021      	streq	r1, [r4, #0]
 800a7d4:	6054      	str	r4, [r2, #4]
 800a7d6:	e7ca      	b.n	800a76e <_free_r+0x22>
 800a7d8:	bd38      	pop	{r3, r4, r5, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000e48 	.word	0x20000e48

0800a7e0 <sqrtf>:
 800a7e0:	b508      	push	{r3, lr}
 800a7e2:	ed2d 8b02 	vpush	{d8}
 800a7e6:	eeb0 8a40 	vmov.f32	s16, s0
 800a7ea:	f000 f941 	bl	800aa70 <__ieee754_sqrtf>
 800a7ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	d60c      	bvs.n	800a812 <sqrtf+0x32>
 800a7f8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a818 <sqrtf+0x38>
 800a7fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a804:	d505      	bpl.n	800a812 <sqrtf+0x32>
 800a806:	f7ff ff75 	bl	800a6f4 <__errno>
 800a80a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a80e:	2321      	movs	r3, #33	@ 0x21
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	ecbd 8b02 	vpop	{d8}
 800a816:	bd08      	pop	{r3, pc}
 800a818:	00000000 	.word	0x00000000

0800a81c <cosf>:
 800a81c:	ee10 3a10 	vmov	r3, s0
 800a820:	b507      	push	{r0, r1, r2, lr}
 800a822:	4a1e      	ldr	r2, [pc, #120]	@ (800a89c <cosf+0x80>)
 800a824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a828:	4293      	cmp	r3, r2
 800a82a:	d806      	bhi.n	800a83a <cosf+0x1e>
 800a82c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a8a0 <cosf+0x84>
 800a830:	b003      	add	sp, #12
 800a832:	f85d eb04 	ldr.w	lr, [sp], #4
 800a836:	f000 b87b 	b.w	800a930 <__kernel_cosf>
 800a83a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a83e:	d304      	bcc.n	800a84a <cosf+0x2e>
 800a840:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a844:	b003      	add	sp, #12
 800a846:	f85d fb04 	ldr.w	pc, [sp], #4
 800a84a:	4668      	mov	r0, sp
 800a84c:	f000 f914 	bl	800aa78 <__ieee754_rem_pio2f>
 800a850:	f000 0003 	and.w	r0, r0, #3
 800a854:	2801      	cmp	r0, #1
 800a856:	d009      	beq.n	800a86c <cosf+0x50>
 800a858:	2802      	cmp	r0, #2
 800a85a:	d010      	beq.n	800a87e <cosf+0x62>
 800a85c:	b9b0      	cbnz	r0, 800a88c <cosf+0x70>
 800a85e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a862:	ed9d 0a00 	vldr	s0, [sp]
 800a866:	f000 f863 	bl	800a930 <__kernel_cosf>
 800a86a:	e7eb      	b.n	800a844 <cosf+0x28>
 800a86c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a870:	ed9d 0a00 	vldr	s0, [sp]
 800a874:	f000 f8b4 	bl	800a9e0 <__kernel_sinf>
 800a878:	eeb1 0a40 	vneg.f32	s0, s0
 800a87c:	e7e2      	b.n	800a844 <cosf+0x28>
 800a87e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a882:	ed9d 0a00 	vldr	s0, [sp]
 800a886:	f000 f853 	bl	800a930 <__kernel_cosf>
 800a88a:	e7f5      	b.n	800a878 <cosf+0x5c>
 800a88c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a890:	ed9d 0a00 	vldr	s0, [sp]
 800a894:	2001      	movs	r0, #1
 800a896:	f000 f8a3 	bl	800a9e0 <__kernel_sinf>
 800a89a:	e7d3      	b.n	800a844 <cosf+0x28>
 800a89c:	3f490fd8 	.word	0x3f490fd8
 800a8a0:	00000000 	.word	0x00000000

0800a8a4 <sinf>:
 800a8a4:	ee10 3a10 	vmov	r3, s0
 800a8a8:	b507      	push	{r0, r1, r2, lr}
 800a8aa:	4a1f      	ldr	r2, [pc, #124]	@ (800a928 <sinf+0x84>)
 800a8ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d807      	bhi.n	800a8c4 <sinf+0x20>
 800a8b4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a92c <sinf+0x88>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	b003      	add	sp, #12
 800a8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c0:	f000 b88e 	b.w	800a9e0 <__kernel_sinf>
 800a8c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a8c8:	d304      	bcc.n	800a8d4 <sinf+0x30>
 800a8ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a8ce:	b003      	add	sp, #12
 800a8d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8d4:	4668      	mov	r0, sp
 800a8d6:	f000 f8cf 	bl	800aa78 <__ieee754_rem_pio2f>
 800a8da:	f000 0003 	and.w	r0, r0, #3
 800a8de:	2801      	cmp	r0, #1
 800a8e0:	d00a      	beq.n	800a8f8 <sinf+0x54>
 800a8e2:	2802      	cmp	r0, #2
 800a8e4:	d00f      	beq.n	800a906 <sinf+0x62>
 800a8e6:	b9c0      	cbnz	r0, 800a91a <sinf+0x76>
 800a8e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a8ec:	ed9d 0a00 	vldr	s0, [sp]
 800a8f0:	2001      	movs	r0, #1
 800a8f2:	f000 f875 	bl	800a9e0 <__kernel_sinf>
 800a8f6:	e7ea      	b.n	800a8ce <sinf+0x2a>
 800a8f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a8fc:	ed9d 0a00 	vldr	s0, [sp]
 800a900:	f000 f816 	bl	800a930 <__kernel_cosf>
 800a904:	e7e3      	b.n	800a8ce <sinf+0x2a>
 800a906:	eddd 0a01 	vldr	s1, [sp, #4]
 800a90a:	ed9d 0a00 	vldr	s0, [sp]
 800a90e:	2001      	movs	r0, #1
 800a910:	f000 f866 	bl	800a9e0 <__kernel_sinf>
 800a914:	eeb1 0a40 	vneg.f32	s0, s0
 800a918:	e7d9      	b.n	800a8ce <sinf+0x2a>
 800a91a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a91e:	ed9d 0a00 	vldr	s0, [sp]
 800a922:	f000 f805 	bl	800a930 <__kernel_cosf>
 800a926:	e7f5      	b.n	800a914 <sinf+0x70>
 800a928:	3f490fd8 	.word	0x3f490fd8
 800a92c:	00000000 	.word	0x00000000

0800a930 <__kernel_cosf>:
 800a930:	ee10 3a10 	vmov	r3, s0
 800a934:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a938:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a93c:	eef0 6a40 	vmov.f32	s13, s0
 800a940:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a944:	d204      	bcs.n	800a950 <__kernel_cosf+0x20>
 800a946:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800a94a:	ee17 2a90 	vmov	r2, s15
 800a94e:	b342      	cbz	r2, 800a9a2 <__kernel_cosf+0x72>
 800a950:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a954:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800a9c0 <__kernel_cosf+0x90>
 800a958:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800a9c4 <__kernel_cosf+0x94>
 800a95c:	4a1a      	ldr	r2, [pc, #104]	@ (800a9c8 <__kernel_cosf+0x98>)
 800a95e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a962:	4293      	cmp	r3, r2
 800a964:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a9cc <__kernel_cosf+0x9c>
 800a968:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a96c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800a9d0 <__kernel_cosf+0xa0>
 800a970:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a974:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a9d4 <__kernel_cosf+0xa4>
 800a978:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a97c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800a9d8 <__kernel_cosf+0xa8>
 800a980:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a984:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800a988:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a98c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a990:	eee7 0a06 	vfma.f32	s1, s14, s12
 800a994:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a998:	d804      	bhi.n	800a9a4 <__kernel_cosf+0x74>
 800a99a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a99e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9a2:	4770      	bx	lr
 800a9a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a9dc <__kernel_cosf+0xac>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	bf9a      	itte	ls
 800a9aa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800a9ae:	ee07 3a10 	vmovls	s14, r3
 800a9b2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800a9b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a9ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9be:	e7ec      	b.n	800a99a <__kernel_cosf+0x6a>
 800a9c0:	ad47d74e 	.word	0xad47d74e
 800a9c4:	310f74f6 	.word	0x310f74f6
 800a9c8:	3e999999 	.word	0x3e999999
 800a9cc:	b493f27c 	.word	0xb493f27c
 800a9d0:	37d00d01 	.word	0x37d00d01
 800a9d4:	bab60b61 	.word	0xbab60b61
 800a9d8:	3d2aaaab 	.word	0x3d2aaaab
 800a9dc:	3f480000 	.word	0x3f480000

0800a9e0 <__kernel_sinf>:
 800a9e0:	ee10 3a10 	vmov	r3, s0
 800a9e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a9ec:	d204      	bcs.n	800a9f8 <__kernel_sinf+0x18>
 800a9ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a9f2:	ee17 3a90 	vmov	r3, s15
 800a9f6:	b35b      	cbz	r3, 800aa50 <__kernel_sinf+0x70>
 800a9f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a9fc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800aa54 <__kernel_sinf+0x74>
 800aa00:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800aa58 <__kernel_sinf+0x78>
 800aa04:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa08:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800aa5c <__kernel_sinf+0x7c>
 800aa0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa10:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800aa60 <__kernel_sinf+0x80>
 800aa14:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa18:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800aa64 <__kernel_sinf+0x84>
 800aa1c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800aa20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa24:	b930      	cbnz	r0, 800aa34 <__kernel_sinf+0x54>
 800aa26:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800aa68 <__kernel_sinf+0x88>
 800aa2a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa2e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800aa32:	4770      	bx	lr
 800aa34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aa38:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800aa3c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800aa40:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800aa44:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800aa6c <__kernel_sinf+0x8c>
 800aa48:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800aa4c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	2f2ec9d3 	.word	0x2f2ec9d3
 800aa58:	b2d72f34 	.word	0xb2d72f34
 800aa5c:	3638ef1b 	.word	0x3638ef1b
 800aa60:	b9500d01 	.word	0xb9500d01
 800aa64:	3c088889 	.word	0x3c088889
 800aa68:	be2aaaab 	.word	0xbe2aaaab
 800aa6c:	3e2aaaab 	.word	0x3e2aaaab

0800aa70 <__ieee754_sqrtf>:
 800aa70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aa74:	4770      	bx	lr
	...

0800aa78 <__ieee754_rem_pio2f>:
 800aa78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7a:	ee10 6a10 	vmov	r6, s0
 800aa7e:	4b88      	ldr	r3, [pc, #544]	@ (800aca0 <__ieee754_rem_pio2f+0x228>)
 800aa80:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800aa84:	429d      	cmp	r5, r3
 800aa86:	b087      	sub	sp, #28
 800aa88:	4604      	mov	r4, r0
 800aa8a:	d805      	bhi.n	800aa98 <__ieee754_rem_pio2f+0x20>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	ed80 0a00 	vstr	s0, [r0]
 800aa92:	6043      	str	r3, [r0, #4]
 800aa94:	2000      	movs	r0, #0
 800aa96:	e022      	b.n	800aade <__ieee754_rem_pio2f+0x66>
 800aa98:	4b82      	ldr	r3, [pc, #520]	@ (800aca4 <__ieee754_rem_pio2f+0x22c>)
 800aa9a:	429d      	cmp	r5, r3
 800aa9c:	d83a      	bhi.n	800ab14 <__ieee754_rem_pio2f+0x9c>
 800aa9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800aaa2:	2e00      	cmp	r6, #0
 800aaa4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800aca8 <__ieee754_rem_pio2f+0x230>
 800aaa8:	4a80      	ldr	r2, [pc, #512]	@ (800acac <__ieee754_rem_pio2f+0x234>)
 800aaaa:	f023 030f 	bic.w	r3, r3, #15
 800aaae:	dd18      	ble.n	800aae2 <__ieee754_rem_pio2f+0x6a>
 800aab0:	4293      	cmp	r3, r2
 800aab2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800aab6:	bf09      	itett	eq
 800aab8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800acb0 <__ieee754_rem_pio2f+0x238>
 800aabc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800acb4 <__ieee754_rem_pio2f+0x23c>
 800aac0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800acb8 <__ieee754_rem_pio2f+0x240>
 800aac4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800aac8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800aacc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aad0:	ed80 7a00 	vstr	s14, [r0]
 800aad4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aad8:	edc0 7a01 	vstr	s15, [r0, #4]
 800aadc:	2001      	movs	r0, #1
 800aade:	b007      	add	sp, #28
 800aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae2:	4293      	cmp	r3, r2
 800aae4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800aae8:	bf09      	itett	eq
 800aaea:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800acb0 <__ieee754_rem_pio2f+0x238>
 800aaee:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800acb4 <__ieee754_rem_pio2f+0x23c>
 800aaf2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800acb8 <__ieee754_rem_pio2f+0x240>
 800aaf6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800aafa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800aafe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab02:	ed80 7a00 	vstr	s14, [r0]
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ab0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab12:	e7e4      	b.n	800aade <__ieee754_rem_pio2f+0x66>
 800ab14:	4b69      	ldr	r3, [pc, #420]	@ (800acbc <__ieee754_rem_pio2f+0x244>)
 800ab16:	429d      	cmp	r5, r3
 800ab18:	d873      	bhi.n	800ac02 <__ieee754_rem_pio2f+0x18a>
 800ab1a:	f000 f8dd 	bl	800acd8 <fabsf>
 800ab1e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800acc0 <__ieee754_rem_pio2f+0x248>
 800ab22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ab26:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ab2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab32:	ee17 0a90 	vmov	r0, s15
 800ab36:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800aca8 <__ieee754_rem_pio2f+0x230>
 800ab3a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ab3e:	281f      	cmp	r0, #31
 800ab40:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800acb4 <__ieee754_rem_pio2f+0x23c>
 800ab44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab48:	eeb1 6a47 	vneg.f32	s12, s14
 800ab4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ab50:	ee16 1a90 	vmov	r1, s13
 800ab54:	dc09      	bgt.n	800ab6a <__ieee754_rem_pio2f+0xf2>
 800ab56:	4a5b      	ldr	r2, [pc, #364]	@ (800acc4 <__ieee754_rem_pio2f+0x24c>)
 800ab58:	1e47      	subs	r7, r0, #1
 800ab5a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ab5e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ab62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d107      	bne.n	800ab7a <__ieee754_rem_pio2f+0x102>
 800ab6a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ab6e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ab72:	2a08      	cmp	r2, #8
 800ab74:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ab78:	dc14      	bgt.n	800aba4 <__ieee754_rem_pio2f+0x12c>
 800ab7a:	6021      	str	r1, [r4, #0]
 800ab7c:	ed94 7a00 	vldr	s14, [r4]
 800ab80:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab8a:	ed84 0a01 	vstr	s0, [r4, #4]
 800ab8e:	daa6      	bge.n	800aade <__ieee754_rem_pio2f+0x66>
 800ab90:	eeb1 7a47 	vneg.f32	s14, s14
 800ab94:	eeb1 0a40 	vneg.f32	s0, s0
 800ab98:	ed84 7a00 	vstr	s14, [r4]
 800ab9c:	ed84 0a01 	vstr	s0, [r4, #4]
 800aba0:	4240      	negs	r0, r0
 800aba2:	e79c      	b.n	800aade <__ieee754_rem_pio2f+0x66>
 800aba4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800acb0 <__ieee754_rem_pio2f+0x238>
 800aba8:	eef0 6a40 	vmov.f32	s13, s0
 800abac:	eee6 6a25 	vfma.f32	s13, s12, s11
 800abb0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800abb4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800abb8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800acb8 <__ieee754_rem_pio2f+0x240>
 800abbc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800abc0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800abc4:	ee15 2a90 	vmov	r2, s11
 800abc8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800abcc:	1a5b      	subs	r3, r3, r1
 800abce:	2b19      	cmp	r3, #25
 800abd0:	dc04      	bgt.n	800abdc <__ieee754_rem_pio2f+0x164>
 800abd2:	edc4 5a00 	vstr	s11, [r4]
 800abd6:	eeb0 0a66 	vmov.f32	s0, s13
 800abda:	e7cf      	b.n	800ab7c <__ieee754_rem_pio2f+0x104>
 800abdc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800acc8 <__ieee754_rem_pio2f+0x250>
 800abe0:	eeb0 0a66 	vmov.f32	s0, s13
 800abe4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800abe8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800abec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800accc <__ieee754_rem_pio2f+0x254>
 800abf0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800abf4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800abf8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800abfc:	ed84 7a00 	vstr	s14, [r4]
 800ac00:	e7bc      	b.n	800ab7c <__ieee754_rem_pio2f+0x104>
 800ac02:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ac06:	d306      	bcc.n	800ac16 <__ieee754_rem_pio2f+0x19e>
 800ac08:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ac0c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ac10:	edc0 7a00 	vstr	s15, [r0]
 800ac14:	e73e      	b.n	800aa94 <__ieee754_rem_pio2f+0x1c>
 800ac16:	15ea      	asrs	r2, r5, #23
 800ac18:	3a86      	subs	r2, #134	@ 0x86
 800ac1a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ac26:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800acd0 <__ieee754_rem_pio2f+0x258>
 800ac2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac32:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ac36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ac3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac46:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ac4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ac52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac56:	edcd 7a05 	vstr	s15, [sp, #20]
 800ac5a:	d11e      	bne.n	800ac9a <__ieee754_rem_pio2f+0x222>
 800ac5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ac60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac64:	bf0c      	ite	eq
 800ac66:	2301      	moveq	r3, #1
 800ac68:	2302      	movne	r3, #2
 800ac6a:	491a      	ldr	r1, [pc, #104]	@ (800acd4 <__ieee754_rem_pio2f+0x25c>)
 800ac6c:	9101      	str	r1, [sp, #4]
 800ac6e:	2102      	movs	r1, #2
 800ac70:	9100      	str	r1, [sp, #0]
 800ac72:	a803      	add	r0, sp, #12
 800ac74:	4621      	mov	r1, r4
 800ac76:	f000 f837 	bl	800ace8 <__kernel_rem_pio2f>
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	f6bf af2f 	bge.w	800aade <__ieee754_rem_pio2f+0x66>
 800ac80:	edd4 7a00 	vldr	s15, [r4]
 800ac84:	eef1 7a67 	vneg.f32	s15, s15
 800ac88:	edc4 7a00 	vstr	s15, [r4]
 800ac8c:	edd4 7a01 	vldr	s15, [r4, #4]
 800ac90:	eef1 7a67 	vneg.f32	s15, s15
 800ac94:	edc4 7a01 	vstr	s15, [r4, #4]
 800ac98:	e782      	b.n	800aba0 <__ieee754_rem_pio2f+0x128>
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e7e5      	b.n	800ac6a <__ieee754_rem_pio2f+0x1f2>
 800ac9e:	bf00      	nop
 800aca0:	3f490fd8 	.word	0x3f490fd8
 800aca4:	4016cbe3 	.word	0x4016cbe3
 800aca8:	3fc90f80 	.word	0x3fc90f80
 800acac:	3fc90fd0 	.word	0x3fc90fd0
 800acb0:	37354400 	.word	0x37354400
 800acb4:	37354443 	.word	0x37354443
 800acb8:	2e85a308 	.word	0x2e85a308
 800acbc:	43490f80 	.word	0x43490f80
 800acc0:	3f22f984 	.word	0x3f22f984
 800acc4:	0800b374 	.word	0x0800b374
 800acc8:	2e85a300 	.word	0x2e85a300
 800accc:	248d3132 	.word	0x248d3132
 800acd0:	43800000 	.word	0x43800000
 800acd4:	0800b3f4 	.word	0x0800b3f4

0800acd8 <fabsf>:
 800acd8:	ee10 3a10 	vmov	r3, s0
 800acdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ace0:	ee00 3a10 	vmov	s0, r3
 800ace4:	4770      	bx	lr
	...

0800ace8 <__kernel_rem_pio2f>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	ed2d 8b04 	vpush	{d8-d9}
 800acf0:	b0d9      	sub	sp, #356	@ 0x164
 800acf2:	4690      	mov	r8, r2
 800acf4:	9001      	str	r0, [sp, #4]
 800acf6:	4ab9      	ldr	r2, [pc, #740]	@ (800afdc <__kernel_rem_pio2f+0x2f4>)
 800acf8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800acfa:	f118 0f04 	cmn.w	r8, #4
 800acfe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ad02:	460f      	mov	r7, r1
 800ad04:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ad08:	db27      	blt.n	800ad5a <__kernel_rem_pio2f+0x72>
 800ad0a:	f1b8 0203 	subs.w	r2, r8, #3
 800ad0e:	bf48      	it	mi
 800ad10:	f108 0204 	addmi.w	r2, r8, #4
 800ad14:	10d2      	asrs	r2, r2, #3
 800ad16:	1c55      	adds	r5, r2, #1
 800ad18:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ad1a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800afec <__kernel_rem_pio2f+0x304>
 800ad1e:	00e8      	lsls	r0, r5, #3
 800ad20:	eba2 060b 	sub.w	r6, r2, fp
 800ad24:	9002      	str	r0, [sp, #8]
 800ad26:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800ad2a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ad2e:	ac1c      	add	r4, sp, #112	@ 0x70
 800ad30:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800ad34:	2000      	movs	r0, #0
 800ad36:	4560      	cmp	r0, ip
 800ad38:	dd11      	ble.n	800ad5e <__kernel_rem_pio2f+0x76>
 800ad3a:	a91c      	add	r1, sp, #112	@ 0x70
 800ad3c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ad40:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ad44:	f04f 0c00 	mov.w	ip, #0
 800ad48:	45d4      	cmp	ip, sl
 800ad4a:	dc27      	bgt.n	800ad9c <__kernel_rem_pio2f+0xb4>
 800ad4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ad50:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800afec <__kernel_rem_pio2f+0x304>
 800ad54:	4606      	mov	r6, r0
 800ad56:	2400      	movs	r4, #0
 800ad58:	e016      	b.n	800ad88 <__kernel_rem_pio2f+0xa0>
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	e7db      	b.n	800ad16 <__kernel_rem_pio2f+0x2e>
 800ad5e:	42c6      	cmn	r6, r0
 800ad60:	bf5d      	ittte	pl
 800ad62:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ad66:	ee07 1a90 	vmovpl	s15, r1
 800ad6a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ad6e:	eef0 7a47 	vmovmi.f32	s15, s14
 800ad72:	ece4 7a01 	vstmia	r4!, {s15}
 800ad76:	3001      	adds	r0, #1
 800ad78:	e7dd      	b.n	800ad36 <__kernel_rem_pio2f+0x4e>
 800ad7a:	ecfe 6a01 	vldmia	lr!, {s13}
 800ad7e:	ed96 7a00 	vldr	s14, [r6]
 800ad82:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ad86:	3401      	adds	r4, #1
 800ad88:	455c      	cmp	r4, fp
 800ad8a:	f1a6 0604 	sub.w	r6, r6, #4
 800ad8e:	ddf4      	ble.n	800ad7a <__kernel_rem_pio2f+0x92>
 800ad90:	ece9 7a01 	vstmia	r9!, {s15}
 800ad94:	f10c 0c01 	add.w	ip, ip, #1
 800ad98:	3004      	adds	r0, #4
 800ad9a:	e7d5      	b.n	800ad48 <__kernel_rem_pio2f+0x60>
 800ad9c:	a908      	add	r1, sp, #32
 800ad9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ada2:	9104      	str	r1, [sp, #16]
 800ada4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ada6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800afe8 <__kernel_rem_pio2f+0x300>
 800adaa:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800afe4 <__kernel_rem_pio2f+0x2fc>
 800adae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800adb2:	9203      	str	r2, [sp, #12]
 800adb4:	4654      	mov	r4, sl
 800adb6:	00a2      	lsls	r2, r4, #2
 800adb8:	9205      	str	r2, [sp, #20]
 800adba:	aa58      	add	r2, sp, #352	@ 0x160
 800adbc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800adc0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800adc4:	a944      	add	r1, sp, #272	@ 0x110
 800adc6:	aa08      	add	r2, sp, #32
 800adc8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800adcc:	4694      	mov	ip, r2
 800adce:	4626      	mov	r6, r4
 800add0:	2e00      	cmp	r6, #0
 800add2:	f1a0 0004 	sub.w	r0, r0, #4
 800add6:	dc4c      	bgt.n	800ae72 <__kernel_rem_pio2f+0x18a>
 800add8:	4628      	mov	r0, r5
 800adda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adde:	f000 fa39 	bl	800b254 <scalbnf>
 800ade2:	eeb0 8a40 	vmov.f32	s16, s0
 800ade6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800adea:	ee28 0a00 	vmul.f32	s0, s16, s0
 800adee:	f000 f9ed 	bl	800b1cc <floorf>
 800adf2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800adf6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae00:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ae04:	ee17 9a90 	vmov	r9, s15
 800ae08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae0c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ae10:	dd41      	ble.n	800ae96 <__kernel_rem_pio2f+0x1ae>
 800ae12:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800ae16:	a908      	add	r1, sp, #32
 800ae18:	f1c5 0e08 	rsb	lr, r5, #8
 800ae1c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ae20:	fa46 f00e 	asr.w	r0, r6, lr
 800ae24:	4481      	add	r9, r0
 800ae26:	fa00 f00e 	lsl.w	r0, r0, lr
 800ae2a:	1a36      	subs	r6, r6, r0
 800ae2c:	f1c5 0007 	rsb	r0, r5, #7
 800ae30:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ae34:	4106      	asrs	r6, r0
 800ae36:	2e00      	cmp	r6, #0
 800ae38:	dd3c      	ble.n	800aeb4 <__kernel_rem_pio2f+0x1cc>
 800ae3a:	f04f 0e00 	mov.w	lr, #0
 800ae3e:	f109 0901 	add.w	r9, r9, #1
 800ae42:	4670      	mov	r0, lr
 800ae44:	4574      	cmp	r4, lr
 800ae46:	dc68      	bgt.n	800af1a <__kernel_rem_pio2f+0x232>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	dd03      	ble.n	800ae54 <__kernel_rem_pio2f+0x16c>
 800ae4c:	2d01      	cmp	r5, #1
 800ae4e:	d074      	beq.n	800af3a <__kernel_rem_pio2f+0x252>
 800ae50:	2d02      	cmp	r5, #2
 800ae52:	d07d      	beq.n	800af50 <__kernel_rem_pio2f+0x268>
 800ae54:	2e02      	cmp	r6, #2
 800ae56:	d12d      	bne.n	800aeb4 <__kernel_rem_pio2f+0x1cc>
 800ae58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ae5c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ae60:	b340      	cbz	r0, 800aeb4 <__kernel_rem_pio2f+0x1cc>
 800ae62:	4628      	mov	r0, r5
 800ae64:	9306      	str	r3, [sp, #24]
 800ae66:	f000 f9f5 	bl	800b254 <scalbnf>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ae70:	e020      	b.n	800aeb4 <__kernel_rem_pio2f+0x1cc>
 800ae72:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ae76:	3e01      	subs	r6, #1
 800ae78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae80:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ae84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae88:	ecac 0a01 	vstmia	ip!, {s0}
 800ae8c:	ed90 0a00 	vldr	s0, [r0]
 800ae90:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ae94:	e79c      	b.n	800add0 <__kernel_rem_pio2f+0xe8>
 800ae96:	d105      	bne.n	800aea4 <__kernel_rem_pio2f+0x1bc>
 800ae98:	1e60      	subs	r0, r4, #1
 800ae9a:	a908      	add	r1, sp, #32
 800ae9c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800aea0:	11f6      	asrs	r6, r6, #7
 800aea2:	e7c8      	b.n	800ae36 <__kernel_rem_pio2f+0x14e>
 800aea4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aea8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb0:	da31      	bge.n	800af16 <__kernel_rem_pio2f+0x22e>
 800aeb2:	2600      	movs	r6, #0
 800aeb4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aeb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aebc:	f040 8098 	bne.w	800aff0 <__kernel_rem_pio2f+0x308>
 800aec0:	1e60      	subs	r0, r4, #1
 800aec2:	2200      	movs	r2, #0
 800aec4:	4550      	cmp	r0, sl
 800aec6:	da4b      	bge.n	800af60 <__kernel_rem_pio2f+0x278>
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	d065      	beq.n	800af98 <__kernel_rem_pio2f+0x2b0>
 800aecc:	3c01      	subs	r4, #1
 800aece:	ab08      	add	r3, sp, #32
 800aed0:	3d08      	subs	r5, #8
 800aed2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0f8      	beq.n	800aecc <__kernel_rem_pio2f+0x1e4>
 800aeda:	4628      	mov	r0, r5
 800aedc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800aee0:	f000 f9b8 	bl	800b254 <scalbnf>
 800aee4:	1c63      	adds	r3, r4, #1
 800aee6:	aa44      	add	r2, sp, #272	@ 0x110
 800aee8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800afe8 <__kernel_rem_pio2f+0x300>
 800aeec:	0099      	lsls	r1, r3, #2
 800aeee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aef2:	4623      	mov	r3, r4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f280 80a9 	bge.w	800b04c <__kernel_rem_pio2f+0x364>
 800aefa:	4623      	mov	r3, r4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f2c0 80c7 	blt.w	800b090 <__kernel_rem_pio2f+0x3a8>
 800af02:	aa44      	add	r2, sp, #272	@ 0x110
 800af04:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800af08:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800afe0 <__kernel_rem_pio2f+0x2f8>
 800af0c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800afec <__kernel_rem_pio2f+0x304>
 800af10:	2000      	movs	r0, #0
 800af12:	1ae2      	subs	r2, r4, r3
 800af14:	e0b1      	b.n	800b07a <__kernel_rem_pio2f+0x392>
 800af16:	2602      	movs	r6, #2
 800af18:	e78f      	b.n	800ae3a <__kernel_rem_pio2f+0x152>
 800af1a:	f852 1b04 	ldr.w	r1, [r2], #4
 800af1e:	b948      	cbnz	r0, 800af34 <__kernel_rem_pio2f+0x24c>
 800af20:	b121      	cbz	r1, 800af2c <__kernel_rem_pio2f+0x244>
 800af22:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800af26:	f842 1c04 	str.w	r1, [r2, #-4]
 800af2a:	2101      	movs	r1, #1
 800af2c:	f10e 0e01 	add.w	lr, lr, #1
 800af30:	4608      	mov	r0, r1
 800af32:	e787      	b.n	800ae44 <__kernel_rem_pio2f+0x15c>
 800af34:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800af38:	e7f5      	b.n	800af26 <__kernel_rem_pio2f+0x23e>
 800af3a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800af3e:	aa08      	add	r2, sp, #32
 800af40:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800af44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800af48:	a908      	add	r1, sp, #32
 800af4a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800af4e:	e781      	b.n	800ae54 <__kernel_rem_pio2f+0x16c>
 800af50:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800af54:	aa08      	add	r2, sp, #32
 800af56:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800af5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800af5e:	e7f3      	b.n	800af48 <__kernel_rem_pio2f+0x260>
 800af60:	a908      	add	r1, sp, #32
 800af62:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800af66:	3801      	subs	r0, #1
 800af68:	430a      	orrs	r2, r1
 800af6a:	e7ab      	b.n	800aec4 <__kernel_rem_pio2f+0x1dc>
 800af6c:	3201      	adds	r2, #1
 800af6e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800af72:	2e00      	cmp	r6, #0
 800af74:	d0fa      	beq.n	800af6c <__kernel_rem_pio2f+0x284>
 800af76:	9905      	ldr	r1, [sp, #20]
 800af78:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800af7c:	eb0d 0001 	add.w	r0, sp, r1
 800af80:	18e6      	adds	r6, r4, r3
 800af82:	a91c      	add	r1, sp, #112	@ 0x70
 800af84:	f104 0c01 	add.w	ip, r4, #1
 800af88:	384c      	subs	r0, #76	@ 0x4c
 800af8a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800af8e:	4422      	add	r2, r4
 800af90:	4562      	cmp	r2, ip
 800af92:	da04      	bge.n	800af9e <__kernel_rem_pio2f+0x2b6>
 800af94:	4614      	mov	r4, r2
 800af96:	e70e      	b.n	800adb6 <__kernel_rem_pio2f+0xce>
 800af98:	9804      	ldr	r0, [sp, #16]
 800af9a:	2201      	movs	r2, #1
 800af9c:	e7e7      	b.n	800af6e <__kernel_rem_pio2f+0x286>
 800af9e:	9903      	ldr	r1, [sp, #12]
 800afa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800afa4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800afa8:	9105      	str	r1, [sp, #20]
 800afaa:	ee07 1a90 	vmov	s15, r1
 800afae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afb2:	2400      	movs	r4, #0
 800afb4:	ece6 7a01 	vstmia	r6!, {s15}
 800afb8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800afec <__kernel_rem_pio2f+0x304>
 800afbc:	46b1      	mov	r9, r6
 800afbe:	455c      	cmp	r4, fp
 800afc0:	dd04      	ble.n	800afcc <__kernel_rem_pio2f+0x2e4>
 800afc2:	ece0 7a01 	vstmia	r0!, {s15}
 800afc6:	f10c 0c01 	add.w	ip, ip, #1
 800afca:	e7e1      	b.n	800af90 <__kernel_rem_pio2f+0x2a8>
 800afcc:	ecfe 6a01 	vldmia	lr!, {s13}
 800afd0:	ed39 7a01 	vldmdb	r9!, {s14}
 800afd4:	3401      	adds	r4, #1
 800afd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800afda:	e7f0      	b.n	800afbe <__kernel_rem_pio2f+0x2d6>
 800afdc:	0800b738 	.word	0x0800b738
 800afe0:	0800b70c 	.word	0x0800b70c
 800afe4:	43800000 	.word	0x43800000
 800afe8:	3b800000 	.word	0x3b800000
 800afec:	00000000 	.word	0x00000000
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	eeb0 0a48 	vmov.f32	s0, s16
 800aff6:	eba3 0008 	sub.w	r0, r3, r8
 800affa:	f000 f92b 	bl	800b254 <scalbnf>
 800affe:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800afe4 <__kernel_rem_pio2f+0x2fc>
 800b002:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00a:	db19      	blt.n	800b040 <__kernel_rem_pio2f+0x358>
 800b00c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800afe8 <__kernel_rem_pio2f+0x300>
 800b010:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b014:	aa08      	add	r2, sp, #32
 800b016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b01a:	3508      	adds	r5, #8
 800b01c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b020:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b028:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b02c:	ee10 3a10 	vmov	r3, s0
 800b030:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b034:	ee17 3a90 	vmov	r3, s15
 800b038:	3401      	adds	r4, #1
 800b03a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b03e:	e74c      	b.n	800aeda <__kernel_rem_pio2f+0x1f2>
 800b040:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b044:	aa08      	add	r2, sp, #32
 800b046:	ee10 3a10 	vmov	r3, s0
 800b04a:	e7f6      	b.n	800b03a <__kernel_rem_pio2f+0x352>
 800b04c:	a808      	add	r0, sp, #32
 800b04e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b052:	9001      	str	r0, [sp, #4]
 800b054:	ee07 0a90 	vmov	s15, r0
 800b058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b05c:	3b01      	subs	r3, #1
 800b05e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b062:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b066:	ed62 7a01 	vstmdb	r2!, {s15}
 800b06a:	e743      	b.n	800aef4 <__kernel_rem_pio2f+0x20c>
 800b06c:	ecfc 6a01 	vldmia	ip!, {s13}
 800b070:	ecb5 7a01 	vldmia	r5!, {s14}
 800b074:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b078:	3001      	adds	r0, #1
 800b07a:	4550      	cmp	r0, sl
 800b07c:	dc01      	bgt.n	800b082 <__kernel_rem_pio2f+0x39a>
 800b07e:	4282      	cmp	r2, r0
 800b080:	daf4      	bge.n	800b06c <__kernel_rem_pio2f+0x384>
 800b082:	a858      	add	r0, sp, #352	@ 0x160
 800b084:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b088:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800b08c:	3b01      	subs	r3, #1
 800b08e:	e735      	b.n	800aefc <__kernel_rem_pio2f+0x214>
 800b090:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b092:	2b02      	cmp	r3, #2
 800b094:	dc09      	bgt.n	800b0aa <__kernel_rem_pio2f+0x3c2>
 800b096:	2b00      	cmp	r3, #0
 800b098:	dc2b      	bgt.n	800b0f2 <__kernel_rem_pio2f+0x40a>
 800b09a:	d044      	beq.n	800b126 <__kernel_rem_pio2f+0x43e>
 800b09c:	f009 0007 	and.w	r0, r9, #7
 800b0a0:	b059      	add	sp, #356	@ 0x164
 800b0a2:	ecbd 8b04 	vpop	{d8-d9}
 800b0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0aa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d1f5      	bne.n	800b09c <__kernel_rem_pio2f+0x3b4>
 800b0b0:	aa30      	add	r2, sp, #192	@ 0xc0
 800b0b2:	1f0b      	subs	r3, r1, #4
 800b0b4:	4413      	add	r3, r2
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	f1a2 0204 	sub.w	r2, r2, #4
 800b0c0:	dc52      	bgt.n	800b168 <__kernel_rem_pio2f+0x480>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	2a01      	cmp	r2, #1
 800b0c6:	f1a3 0304 	sub.w	r3, r3, #4
 800b0ca:	dc5d      	bgt.n	800b188 <__kernel_rem_pio2f+0x4a0>
 800b0cc:	ab30      	add	r3, sp, #192	@ 0xc0
 800b0ce:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800afec <__kernel_rem_pio2f+0x304>
 800b0d2:	440b      	add	r3, r1
 800b0d4:	2c01      	cmp	r4, #1
 800b0d6:	dc67      	bgt.n	800b1a8 <__kernel_rem_pio2f+0x4c0>
 800b0d8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b0dc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800b0e0:	2e00      	cmp	r6, #0
 800b0e2:	d167      	bne.n	800b1b4 <__kernel_rem_pio2f+0x4cc>
 800b0e4:	edc7 6a00 	vstr	s13, [r7]
 800b0e8:	ed87 7a01 	vstr	s14, [r7, #4]
 800b0ec:	edc7 7a02 	vstr	s15, [r7, #8]
 800b0f0:	e7d4      	b.n	800b09c <__kernel_rem_pio2f+0x3b4>
 800b0f2:	ab30      	add	r3, sp, #192	@ 0xc0
 800b0f4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800afec <__kernel_rem_pio2f+0x304>
 800b0f8:	440b      	add	r3, r1
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	da24      	bge.n	800b14a <__kernel_rem_pio2f+0x462>
 800b100:	b34e      	cbz	r6, 800b156 <__kernel_rem_pio2f+0x46e>
 800b102:	eef1 7a47 	vneg.f32	s15, s14
 800b106:	edc7 7a00 	vstr	s15, [r7]
 800b10a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800b10e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b112:	aa31      	add	r2, sp, #196	@ 0xc4
 800b114:	2301      	movs	r3, #1
 800b116:	429c      	cmp	r4, r3
 800b118:	da20      	bge.n	800b15c <__kernel_rem_pio2f+0x474>
 800b11a:	b10e      	cbz	r6, 800b120 <__kernel_rem_pio2f+0x438>
 800b11c:	eef1 7a67 	vneg.f32	s15, s15
 800b120:	edc7 7a01 	vstr	s15, [r7, #4]
 800b124:	e7ba      	b.n	800b09c <__kernel_rem_pio2f+0x3b4>
 800b126:	ab30      	add	r3, sp, #192	@ 0xc0
 800b128:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800afec <__kernel_rem_pio2f+0x304>
 800b12c:	440b      	add	r3, r1
 800b12e:	2c00      	cmp	r4, #0
 800b130:	da05      	bge.n	800b13e <__kernel_rem_pio2f+0x456>
 800b132:	b10e      	cbz	r6, 800b138 <__kernel_rem_pio2f+0x450>
 800b134:	eef1 7a67 	vneg.f32	s15, s15
 800b138:	edc7 7a00 	vstr	s15, [r7]
 800b13c:	e7ae      	b.n	800b09c <__kernel_rem_pio2f+0x3b4>
 800b13e:	ed33 7a01 	vldmdb	r3!, {s14}
 800b142:	3c01      	subs	r4, #1
 800b144:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b148:	e7f1      	b.n	800b12e <__kernel_rem_pio2f+0x446>
 800b14a:	ed73 7a01 	vldmdb	r3!, {s15}
 800b14e:	3a01      	subs	r2, #1
 800b150:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b154:	e7d2      	b.n	800b0fc <__kernel_rem_pio2f+0x414>
 800b156:	eef0 7a47 	vmov.f32	s15, s14
 800b15a:	e7d4      	b.n	800b106 <__kernel_rem_pio2f+0x41e>
 800b15c:	ecb2 7a01 	vldmia	r2!, {s14}
 800b160:	3301      	adds	r3, #1
 800b162:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b166:	e7d6      	b.n	800b116 <__kernel_rem_pio2f+0x42e>
 800b168:	edd2 7a00 	vldr	s15, [r2]
 800b16c:	edd2 6a01 	vldr	s13, [r2, #4]
 800b170:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b174:	3801      	subs	r0, #1
 800b176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b17a:	ed82 7a00 	vstr	s14, [r2]
 800b17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b182:	edc2 7a01 	vstr	s15, [r2, #4]
 800b186:	e798      	b.n	800b0ba <__kernel_rem_pio2f+0x3d2>
 800b188:	edd3 7a00 	vldr	s15, [r3]
 800b18c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b190:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b194:	3a01      	subs	r2, #1
 800b196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b19a:	ed83 7a00 	vstr	s14, [r3]
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	edc3 7a01 	vstr	s15, [r3, #4]
 800b1a6:	e78d      	b.n	800b0c4 <__kernel_rem_pio2f+0x3dc>
 800b1a8:	ed33 7a01 	vldmdb	r3!, {s14}
 800b1ac:	3c01      	subs	r4, #1
 800b1ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1b2:	e78f      	b.n	800b0d4 <__kernel_rem_pio2f+0x3ec>
 800b1b4:	eef1 6a66 	vneg.f32	s13, s13
 800b1b8:	eeb1 7a47 	vneg.f32	s14, s14
 800b1bc:	edc7 6a00 	vstr	s13, [r7]
 800b1c0:	ed87 7a01 	vstr	s14, [r7, #4]
 800b1c4:	eef1 7a67 	vneg.f32	s15, s15
 800b1c8:	e790      	b.n	800b0ec <__kernel_rem_pio2f+0x404>
 800b1ca:	bf00      	nop

0800b1cc <floorf>:
 800b1cc:	ee10 3a10 	vmov	r3, s0
 800b1d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b1d4:	3a7f      	subs	r2, #127	@ 0x7f
 800b1d6:	2a16      	cmp	r2, #22
 800b1d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b1dc:	dc2b      	bgt.n	800b236 <floorf+0x6a>
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	da12      	bge.n	800b208 <floorf+0x3c>
 800b1e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b248 <floorf+0x7c>
 800b1e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b1ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f2:	dd06      	ble.n	800b202 <floorf+0x36>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	da24      	bge.n	800b242 <floorf+0x76>
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	4b14      	ldr	r3, [pc, #80]	@ (800b24c <floorf+0x80>)
 800b1fc:	bf08      	it	eq
 800b1fe:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b202:	ee00 3a10 	vmov	s0, r3
 800b206:	4770      	bx	lr
 800b208:	4911      	ldr	r1, [pc, #68]	@ (800b250 <floorf+0x84>)
 800b20a:	4111      	asrs	r1, r2
 800b20c:	420b      	tst	r3, r1
 800b20e:	d0fa      	beq.n	800b206 <floorf+0x3a>
 800b210:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b248 <floorf+0x7c>
 800b214:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b218:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b220:	ddef      	ble.n	800b202 <floorf+0x36>
 800b222:	2b00      	cmp	r3, #0
 800b224:	bfbe      	ittt	lt
 800b226:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b22a:	fa40 f202 	asrlt.w	r2, r0, r2
 800b22e:	189b      	addlt	r3, r3, r2
 800b230:	ea23 0301 	bic.w	r3, r3, r1
 800b234:	e7e5      	b.n	800b202 <floorf+0x36>
 800b236:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b23a:	d3e4      	bcc.n	800b206 <floorf+0x3a>
 800b23c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b240:	4770      	bx	lr
 800b242:	2300      	movs	r3, #0
 800b244:	e7dd      	b.n	800b202 <floorf+0x36>
 800b246:	bf00      	nop
 800b248:	7149f2ca 	.word	0x7149f2ca
 800b24c:	bf800000 	.word	0xbf800000
 800b250:	007fffff 	.word	0x007fffff

0800b254 <scalbnf>:
 800b254:	ee10 3a10 	vmov	r3, s0
 800b258:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b25c:	d02b      	beq.n	800b2b6 <scalbnf+0x62>
 800b25e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b262:	d302      	bcc.n	800b26a <scalbnf+0x16>
 800b264:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b268:	4770      	bx	lr
 800b26a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b26e:	d123      	bne.n	800b2b8 <scalbnf+0x64>
 800b270:	4b24      	ldr	r3, [pc, #144]	@ (800b304 <scalbnf+0xb0>)
 800b272:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b308 <scalbnf+0xb4>
 800b276:	4298      	cmp	r0, r3
 800b278:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b27c:	db17      	blt.n	800b2ae <scalbnf+0x5a>
 800b27e:	ee10 3a10 	vmov	r3, s0
 800b282:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b286:	3a19      	subs	r2, #25
 800b288:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b28c:	4288      	cmp	r0, r1
 800b28e:	dd15      	ble.n	800b2bc <scalbnf+0x68>
 800b290:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b30c <scalbnf+0xb8>
 800b294:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b310 <scalbnf+0xbc>
 800b298:	ee10 3a10 	vmov	r3, s0
 800b29c:	eeb0 7a67 	vmov.f32	s14, s15
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	bfb8      	it	lt
 800b2a4:	eef0 7a66 	vmovlt.f32	s15, s13
 800b2a8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b2ac:	4770      	bx	lr
 800b2ae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b314 <scalbnf+0xc0>
 800b2b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b2b6:	4770      	bx	lr
 800b2b8:	0dd2      	lsrs	r2, r2, #23
 800b2ba:	e7e5      	b.n	800b288 <scalbnf+0x34>
 800b2bc:	4410      	add	r0, r2
 800b2be:	28fe      	cmp	r0, #254	@ 0xfe
 800b2c0:	dce6      	bgt.n	800b290 <scalbnf+0x3c>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	dd06      	ble.n	800b2d4 <scalbnf+0x80>
 800b2c6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b2ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b2ce:	ee00 3a10 	vmov	s0, r3
 800b2d2:	4770      	bx	lr
 800b2d4:	f110 0f16 	cmn.w	r0, #22
 800b2d8:	da09      	bge.n	800b2ee <scalbnf+0x9a>
 800b2da:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b314 <scalbnf+0xc0>
 800b2de:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b318 <scalbnf+0xc4>
 800b2e2:	ee10 3a10 	vmov	r3, s0
 800b2e6:	eeb0 7a67 	vmov.f32	s14, s15
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	e7d9      	b.n	800b2a2 <scalbnf+0x4e>
 800b2ee:	3019      	adds	r0, #25
 800b2f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b2f4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b2f8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b31c <scalbnf+0xc8>
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	e7d7      	b.n	800b2b2 <scalbnf+0x5e>
 800b302:	bf00      	nop
 800b304:	ffff3cb0 	.word	0xffff3cb0
 800b308:	4c000000 	.word	0x4c000000
 800b30c:	7149f2ca 	.word	0x7149f2ca
 800b310:	f149f2ca 	.word	0xf149f2ca
 800b314:	0da24260 	.word	0x0da24260
 800b318:	8da24260 	.word	0x8da24260
 800b31c:	33000000 	.word	0x33000000

0800b320 <_init>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	bf00      	nop
 800b324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b326:	bc08      	pop	{r3}
 800b328:	469e      	mov	lr, r3
 800b32a:	4770      	bx	lr

0800b32c <_fini>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr
