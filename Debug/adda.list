
adda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800dd18  0800dd18  0000ed18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e478  0800e478  00010234  2**0
                  CONTENTS
  4 .ARM          00000008  0800e478  0800e478  0000f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e480  0800e480  00010234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e480  0800e480  0000f480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e484  0800e484  0000f484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800e488  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  20000234  0800e6bc  00010234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800e6bc  00011160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c123  00000000  00000000  00010264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5e  00000000  00000000  0002c387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000301e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124e  00000000  00000000  00031970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dcf  00000000  00000000  00032bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e734  00000000  00000000  0005998d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3195  00000000  00000000  000780c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b0  00000000  00000000  0015b29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  0016294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcfc 	.word	0x0800dcfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	0800dcfc 	.word	0x0800dcfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <compute_dft_max_amplitudes>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void compute_dft_max_amplitudes(float *samples, int signal_length, float sample_rate, int *start_freqs, int *end_freqs, int num_bands, float *max_amplitudes) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b09b      	sub	sp, #108	@ 0x6c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6178      	str	r0, [r7, #20]
 8000f40:	6139      	str	r1, [r7, #16]
 8000f42:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f46:	60ba      	str	r2, [r7, #8]
 8000f48:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f50:	4883      	ldr	r0, [pc, #524]	@ (8001160 <compute_dft_max_amplitudes+0x228>)
 8000f52:	f001 fffd 	bl	8002f50 <HAL_GPIO_WritePin>

    float two_pi_over_N = 2.0f * M_PI / signal_length;
 8000f56:	6938      	ldr	r0, [r7, #16]
 8000f58:	f7ff fae4 	bl	8000524 <__aeabi_i2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	a17d      	add	r1, pc, #500	@ (adr r1, 8001158 <compute_dft_max_amplitudes+0x220>)
 8000f62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f66:	f7ff fc71 	bl	800084c <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fe19 	bl	8000ba8 <__aeabi_d2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	647b      	str	r3, [r7, #68]	@ 0x44

    for (int band = 0; band < num_bands; band++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f7e:	e0db      	b.n	8001138 <compute_dft_max_amplitudes+0x200>
        int start_freq = start_freqs[band];
 8000f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	643b      	str	r3, [r7, #64]	@ 0x40
        int end_freq = end_freqs[band];
 8000f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Bereken DFT-indexen voor deze band
        int k_start = (int)(start_freq * signal_length / sample_rate);
 8000f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fa8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb4:	ee17 3a90 	vmov	r3, s15
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
        int k_end = (int)(end_freq * signal_length / sample_rate);
 8000fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fca:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd6:	ee17 3a90 	vmov	r3, s15
 8000fda:	637b      	str	r3, [r7, #52]	@ 0x34

        float max_amplitude_squared = 0.0f;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	663b      	str	r3, [r7, #96]	@ 0x60

        for (int k = k_start; k <= k_end; k++) {
 8000fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fe6:	e093      	b.n	8001110 <compute_dft_max_amplitudes+0x1d8>
            float real_part = 0.0f;
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	65bb      	str	r3, [r7, #88]	@ 0x58
            float imag_part = 0.0f;
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	657b      	str	r3, [r7, #84]	@ 0x54
            float angle_increment = two_pi_over_N * k;
 8000ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffe:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001006:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            float cos_angle = 1.0f; // cos(0)
 800100a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
            float sin_angle = 0.0f; // sin(0)
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	@ 0x4c
            float cos_step = cosf(angle_increment);
 8001016:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 800101a:	f00c f8ed 	bl	800d1f8 <cosf>
 800101e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            float sin_step = sinf(angle_increment);
 8001022:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8001026:	f00c f92b 	bl	800d280 <sinf>
 800102a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

            for (int n = 0; n < signal_length; n++) {
 800102e:	2300      	movs	r3, #0
 8001030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001032:	e046      	b.n	80010c2 <compute_dft_max_amplitudes+0x18a>
                float sample = samples[n];
 8001034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	623b      	str	r3, [r7, #32]

                // Update real en imaginary
                real_part += sample * cos_angle;
 8001040:	ed97 7a08 	vldr	s14, [r7, #32]
 8001044:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
                imag_part += -sample * sin_angle;
 8001058:	edd7 7a08 	vldr	s15, [r7, #32]
 800105c:	eeb1 7a67 	vneg.f32	s14, s15
 8001060:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

                // Update hoeken
                float new_cos = cos_angle * cos_step - sin_angle * sin_step;
 8001074:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001078:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800107c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001080:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001084:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001090:	edc7 7a07 	vstr	s15, [r7, #28]
                float new_sin = cos_angle * sin_step + sin_angle * cos_step;
 8001094:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001098:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800109c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a0:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80010a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	edc7 7a06 	vstr	s15, [r7, #24]
                cos_angle = new_cos;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	653b      	str	r3, [r7, #80]	@ 0x50
                sin_angle = new_sin;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int n = 0; n < signal_length; n++) {
 80010bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010be:	3301      	adds	r3, #1
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbb4      	blt.n	8001034 <compute_dft_max_amplitudes+0xfc>
            }

            // Bereken amplitude^2
            float amplitude_squared = (real_part * real_part + imag_part * imag_part) / (signal_length * signal_length);
 80010ca:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80010ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010d2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80010d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fb03 f303 	mul.w	r3, r3, r3
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

            // Update maximale amplitude^2
            if (amplitude_squared > max_amplitude_squared) {
 80010f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80010f8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80010fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	dd01      	ble.n	800110a <compute_dft_max_amplitudes+0x1d2>
                max_amplitude_squared = amplitude_squared;
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	663b      	str	r3, [r7, #96]	@ 0x60
        for (int k = k_start; k <= k_end; k++) {
 800110a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800110c:	3301      	adds	r3, #1
 800110e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001110:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001114:	429a      	cmp	r2, r3
 8001116:	f77f af67 	ble.w	8000fe8 <compute_dft_max_amplitudes+0xb0>
            }
        }

        max_amplitudes[band] = sqrtf(max_amplitude_squared);
 800111a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001120:	18d4      	adds	r4, r2, r3
 8001122:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8001126:	f00c f849 	bl	800d1bc <sqrtf>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	edc4 7a00 	vstr	s15, [r4]
    for (int band = 0; band < num_bands; band++) {
 8001132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001134:	3301      	adds	r3, #1
 8001136:	667b      	str	r3, [r7, #100]	@ 0x64
 8001138:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800113a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800113c:	429a      	cmp	r2, r3
 800113e:	f6ff af1f 	blt.w	8000f80 <compute_dft_max_amplitudes+0x48>
    }

    HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <compute_dft_max_amplitudes+0x228>)
 800114a:	f001 ff01 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	376c      	adds	r7, #108	@ 0x6c
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	bf00      	nop
 8001158:	54442d18 	.word	0x54442d18
 800115c:	401921fb 	.word	0x401921fb
 8001160:	40020c00 	.word	0x40020c00

08001164 <scale_amplitudes_to_range>:

void scale_amplitudes_to_range(float *max_amplitudes, int num_bands, float input_min, float input_max, int output_min, int output_max, uint8_t *scaled_amplitudes) {
 8001164:	b480      	push	{r7}
 8001166:	b08f      	sub	sp, #60	@ 0x3c
 8001168:	af00      	add	r7, sp, #0
 800116a:	61f8      	str	r0, [r7, #28]
 800116c:	61b9      	str	r1, [r7, #24]
 800116e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001172:	edc7 0a04 	vstr	s1, [r7, #16]
 8001176:	60fa      	str	r2, [r7, #12]
 8001178:	60bb      	str	r3, [r7, #8]
    // Bereken de schaalfactor
    float input_range = input_max - input_min;
 800117a:	ed97 7a04 	vldr	s14, [r7, #16]
 800117e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001186:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float output_range = output_max - output_min;
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Controleer op een geldige invoerbereik
    if (input_range <= 0.0f) {
 800119c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	d810      	bhi.n	80011cc <scale_amplitudes_to_range+0x68>
        for (int i = 0; i < num_bands; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80011ae:	e008      	b.n	80011c2 <scale_amplitudes_to_range+0x5e>
            scaled_amplitudes[i] = output_min; // Als het bereik ongeldig is, stel alles in op de minimumwaarde.
 80011b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011b4:	4413      	add	r3, r2
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < num_bands; i++) {
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	3301      	adds	r3, #1
 80011c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80011c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbf2      	blt.n	80011b0 <scale_amplitudes_to_range+0x4c>
        }
        return;
 80011ca:	e046      	b.n	800125a <scale_amplitudes_to_range+0xf6>
    }

    for (int i = 0; i < num_bands; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80011d0:	e03f      	b.n	8001252 <scale_amplitudes_to_range+0xee>
        // Schaal en beperk de amplitude
        float normalized = (max_amplitudes[i] - input_min) / input_range;
 80011d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011e6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        if (normalized < 0.0f) normalized = 0.0f; // Zorg dat de waarde niet onder 0 gaat
 80011f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d502      	bpl.n	8001206 <scale_amplitudes_to_range+0xa2>
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (normalized > 1.0f) normalized = 1.0f; // Zorg dat de waarde niet boven 1 gaat
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800120a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800120e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001216:	dd02      	ble.n	800121e <scale_amplitudes_to_range+0xba>
 8001218:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Schaal naar het uitvoerbereik
        scaled_amplitudes[i] = (uint8_t)(normalized * output_range + output_min);
 800121e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001222:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800123c:	4413      	add	r3, r2
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	edc7 7a01 	vstr	s15, [r7, #4]
 8001246:	793a      	ldrb	r2, [r7, #4]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_bands; i++) {
 800124c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800124e:	3301      	adds	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
 8001252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbbb      	blt.n	80011d2 <scale_amplitudes_to_range+0x6e>
    }
}
 800125a:	373c      	adds	r7, #60	@ 0x3c
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126a:	f000 fee7 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126e:	f000 f855 	bl	800131c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fa71 	bl	8001758 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001276:	f000 f993 	bl	80015a0 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 800127a:	f009 f80d 	bl	800a298 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 800127e:	f000 f8b7 	bl	80013f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001282:	f000 f907 	bl	8001494 <MX_ADC2_Init>
  MX_DAC_Init();
 8001286:	f000 f957 	bl	8001538 <MX_DAC_Init>
  MX_TIM3_Init();
 800128a:	f000 f9b7 	bl	80015fc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800128e:	f000 fa39 	bl	8001704 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001292:	f000 fa01 	bl	8001698 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);				// start the interrupt timer 3
 8001296:	4816      	ldr	r0, [pc, #88]	@ (80012f0 <main+0x8c>)
 8001298:	f004 fdd4 	bl	8005e44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);				// start the interrupt timer 7
 800129c:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <main+0x90>)
 800129e:	f004 fdd1 	bl	8005e44 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
    {
	  if (buffer_full)
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <main+0x94>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01b      	beq.n	80012e2 <main+0x7e>
	      {
	          buffer_full = false;  // Reset de vlag
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <main+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	          compute_dft_max_amplitudes(samples, SAMPLE_SIZE, SAMPLE_RATE, start_freqs, end_freqs, 8, max_amplitudes);
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <main+0x98>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	2308      	movs	r3, #8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <main+0x9c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <main+0xa0>)
 80012bc:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001308 <main+0xa4>
 80012c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <main+0xa8>)
 80012c6:	f7ff fe37 	bl	8000f38 <compute_dft_max_amplitudes>
	          scale_amplitudes_to_range(max_amplitudes, 8, 0, 1000, 0, 254, scaled_amplitudes);
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <main+0xac>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	23fe      	movs	r3, #254	@ 0xfe
 80012d0:	2200      	movs	r2, #0
 80012d2:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001314 <main+0xb0>
 80012d6:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001318 <main+0xb4>
 80012da:	2108      	movs	r1, #8
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <main+0x98>)
 80012de:	f7ff ff41 	bl	8001164 <scale_amplitudes_to_range>
	      }

	HAL_Delay(100);
 80012e2:	2064      	movs	r0, #100	@ 0x64
 80012e4:	f000 ff1c 	bl	8002120 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012e8:	f008 fffc 	bl	800a2e4 <MX_USB_HOST_Process>
	  if (buffer_full)
 80012ec:	e7d9      	b.n	80012a2 <main+0x3e>
 80012ee:	bf00      	nop
 80012f0:	20000348 	.word	0x20000348
 80012f4:	20000390 	.word	0x20000390
 80012f8:	2000084c 	.word	0x2000084c
 80012fc:	20000420 	.word	0x20000420
 8001300:	20000020 	.word	0x20000020
 8001304:	20000000 	.word	0x20000000
 8001308:	44fa0000 	.word	0x44fa0000
 800130c:	20000448 	.word	0x20000448
 8001310:	20000440 	.word	0x20000440
 8001314:	447a0000 	.word	0x447a0000
 8001318:	00000000 	.word	0x00000000

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	@ 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	@ 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f00a f8d9 	bl	800b4e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <SystemClock_Config+0xcc>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <SystemClock_Config+0xd0>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800138c:	2308      	movs	r3, #8
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001390:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001394:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800139a:	2307      	movs	r3, #7
 800139c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 f866 	bl	8005474 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ae:	f000 faf1 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2105      	movs	r1, #5
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fac7 	bl	8005964 <HAL_RCC_ClockConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013dc:	f000 fada 	bl	8001994 <Error_Handler>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3750      	adds	r7, #80	@ 0x50
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <MX_ADC1_Init+0x9c>)
 8001406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_ADC1_Init+0x98>)
 800140a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800140e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_ADC1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_ADC1_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <MX_ADC1_Init+0xa0>)
 8001434:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_ADC1_Init+0x98>)
 800143e:	2201      	movs	r2, #1
 8001440:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_ADC1_Init+0x98>)
 800144c:	2201      	movs	r2, #1
 800144e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001452:	f000 fe89 	bl	8002168 <HAL_ADC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800145c:	f000 fa9a 	bl	8001994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001460:	230b      	movs	r3, #11
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001472:	f001 f827 	bl	80024c4 <HAL_ADC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800147c:	f000 fa8a 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000250 	.word	0x20000250
 800148c:	40012000 	.word	0x40012000
 8001490:	0f000001 	.word	0x0f000001

08001494 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_ADC2_Init+0x98>)
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <MX_ADC2_Init+0x9c>)
 80014aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_ADC2_Init+0x98>)
 80014ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_ADC2_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_ADC2_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_ADC2_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_ADC2_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_ADC2_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_ADC2_Init+0x98>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <MX_ADC2_Init+0xa0>)
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_ADC2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_ADC2_Init+0x98>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_ADC2_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_ADC2_Init+0x98>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_ADC2_Init+0x98>)
 80014f6:	f000 fe37 	bl	8002168 <HAL_ADC_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001500:	f000 fa48 	bl	8001994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001504:	230c      	movs	r3, #12
 8001506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_ADC2_Init+0x98>)
 8001516:	f000 ffd5 	bl	80024c4 <HAL_ADC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001520:	f000 fa38 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000298 	.word	0x20000298
 8001530:	40012100 	.word	0x40012100
 8001534:	0f000001 	.word	0x0f000001

08001538 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_DAC_Init+0x60>)
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <MX_DAC_Init+0x64>)
 800154a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800154c:	4812      	ldr	r0, [pc, #72]	@ (8001598 <MX_DAC_Init+0x60>)
 800154e:	f001 fae8 	bl	8002b22 <HAL_DAC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001558:	f000 fa1c 	bl	8001994 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	480b      	ldr	r0, [pc, #44]	@ (8001598 <MX_DAC_Init+0x60>)
 800156c:	f001 fafb 	bl	8002b66 <HAL_DAC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001576:	f000 fa0d 	bl	8001994 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	2210      	movs	r2, #16
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_DAC_Init+0x60>)
 8001582:	f001 faf0 	bl	8002b66 <HAL_DAC_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800158c:	f000 fa02 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200002e0 	.word	0x200002e0
 800159c:	40007400 	.word	0x40007400

080015a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015a6:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <MX_I2C1_Init+0x54>)
 80015a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015ac:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <MX_I2C1_Init+0x58>)
 80015ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015de:	f003 fe05 	bl	80051ec <HAL_I2C_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e8:	f000 f9d4 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200002f4 	.word	0x200002f4
 80015f4:	40005400 	.word	0x40005400
 80015f8:	000186a0 	.word	0x000186a0

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	// note that the APB timerclock is used. In this example 168MHz/2 = 84MHz
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  // timer 0.1 sec = 1000*8400 / 84000
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MX_TIM3_Init+0x94>)
 800161a:	4a1e      	ldr	r2, [pc, #120]	@ (8001694 <MX_TIM3_Init+0x98>)
 800161c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 420-1;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MX_TIM3_Init+0x94>)
 8001620:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <MX_TIM3_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_TIM3_Init+0x94>)
 800162e:	2263      	movs	r2, #99	@ 0x63
 8001630:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_TIM3_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <MX_TIM3_Init+0x94>)
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163e:	4814      	ldr	r0, [pc, #80]	@ (8001690 <MX_TIM3_Init+0x94>)
 8001640:	f004 fbb0 	bl	8005da4 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800164a:	f000 f9a3 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_TIM3_Init+0x94>)
 800165c:	f004 fd52 	bl	8006104 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 f995 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <MX_TIM3_Init+0x94>)
 8001678:	f004 ff84 	bl	8006584 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001682:	f000 f987 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000348 	.word	0x20000348
 8001694:	40000400 	.word	0x40000400

08001698 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	463b      	mov	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016a8:	4a15      	ldr	r2, [pc, #84]	@ (8001700 <MX_TIM7_Init+0x68>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2800-1;
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016ae:	f640 22ef 	movw	r2, #2799	@ 0xaef
 80016b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016c4:	2280      	movs	r2, #128	@ 0x80
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016ca:	f004 fb6b 	bl	8005da4 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016d4:	f000 f95e 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_TIM7_Init+0x64>)
 80016e6:	f004 ff4d 	bl	8006584 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016f0:	f000 f950 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000390 	.word	0x20000390
 8001700:	40001400 	.word	0x40001400

08001704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_USART2_UART_Init+0x50>)
 800170c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 8001710:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_USART2_UART_Init+0x4c>)
 800173c:	f004 ffb2 	bl	80066a4 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f000 f925 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200003d8 	.word	0x200003d8
 8001754:	40004400 	.word	0x40004400

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	4b82      	ldr	r3, [pc, #520]	@ (800197c <MX_GPIO_Init+0x224>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a81      	ldr	r2, [pc, #516]	@ (800197c <MX_GPIO_Init+0x224>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b7f      	ldr	r3, [pc, #508]	@ (800197c <MX_GPIO_Init+0x224>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	4b7b      	ldr	r3, [pc, #492]	@ (800197c <MX_GPIO_Init+0x224>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a7a      	ldr	r2, [pc, #488]	@ (800197c <MX_GPIO_Init+0x224>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b78      	ldr	r3, [pc, #480]	@ (800197c <MX_GPIO_Init+0x224>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b74      	ldr	r3, [pc, #464]	@ (800197c <MX_GPIO_Init+0x224>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a73      	ldr	r2, [pc, #460]	@ (800197c <MX_GPIO_Init+0x224>)
 80017b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b71      	ldr	r3, [pc, #452]	@ (800197c <MX_GPIO_Init+0x224>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <MX_GPIO_Init+0x224>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a6c      	ldr	r2, [pc, #432]	@ (800197c <MX_GPIO_Init+0x224>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <MX_GPIO_Init+0x224>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b66      	ldr	r3, [pc, #408]	@ (800197c <MX_GPIO_Init+0x224>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a65      	ldr	r2, [pc, #404]	@ (800197c <MX_GPIO_Init+0x224>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b63      	ldr	r3, [pc, #396]	@ (800197c <MX_GPIO_Init+0x224>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b5f      	ldr	r3, [pc, #380]	@ (800197c <MX_GPIO_Init+0x224>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a5e      	ldr	r2, [pc, #376]	@ (800197c <MX_GPIO_Init+0x224>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b5c      	ldr	r3, [pc, #368]	@ (800197c <MX_GPIO_Init+0x224>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2108      	movs	r1, #8
 800181a:	4859      	ldr	r0, [pc, #356]	@ (8001980 <MX_GPIO_Init+0x228>)
 800181c:	f001 fb98 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	2101      	movs	r1, #1
 8001824:	4857      	ldr	r0, [pc, #348]	@ (8001984 <MX_GPIO_Init+0x22c>)
 8001826:	f001 fb93 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800182a:	2200      	movs	r2, #0
 800182c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001830:	4855      	ldr	r0, [pc, #340]	@ (8001988 <MX_GPIO_Init+0x230>)
 8001832:	f001 fb8d 	bl	8002f50 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001836:	2308      	movs	r3, #8
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	484c      	ldr	r0, [pc, #304]	@ (8001980 <MX_GPIO_Init+0x228>)
 800184e:	f001 f9e3 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4846      	ldr	r0, [pc, #280]	@ (8001984 <MX_GPIO_Init+0x22c>)
 800186a:	f001 f9d5 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800186e:	2308      	movs	r3, #8
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800187e:	2305      	movs	r3, #5
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	483e      	ldr	r0, [pc, #248]	@ (8001984 <MX_GPIO_Init+0x22c>)
 800188a:	f001 f9c5 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001892:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	483a      	ldr	r0, [pc, #232]	@ (800198c <MX_GPIO_Init+0x234>)
 80018a4:	f001 f9b8 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018a8:	23c0      	movs	r3, #192	@ 0xc0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018b8:	2305      	movs	r3, #5
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4832      	ldr	r0, [pc, #200]	@ (800198c <MX_GPIO_Init+0x234>)
 80018c4:	f001 f9a8 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018c8:	2304      	movs	r3, #4
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	482d      	ldr	r0, [pc, #180]	@ (8001990 <MX_GPIO_Init+0x238>)
 80018dc:	f001 f99c 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f2:	2305      	movs	r3, #5
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4824      	ldr	r0, [pc, #144]	@ (8001990 <MX_GPIO_Init+0x238>)
 80018fe:	f001 f98b 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001902:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001906:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	481b      	ldr	r0, [pc, #108]	@ (8001988 <MX_GPIO_Init+0x230>)
 800191c:	f001 f97c 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001920:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001932:	2306      	movs	r3, #6
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_GPIO_Init+0x22c>)
 800193e:	f001 f96b 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001942:	2320      	movs	r3, #32
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <MX_GPIO_Init+0x230>)
 8001956:	f001 f95f 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800195e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4804      	ldr	r0, [pc, #16]	@ (8001980 <MX_GPIO_Init+0x228>)
 8001970:	f001 f952 	bl	8002c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001974:	bf00      	nop
 8001976:	3730      	adds	r7, #48	@ 0x30
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	40021000 	.word	0x40021000
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e2:	2007      	movs	r0, #7
 80019e4:	f001 f85c 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	@ 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2e      	ldr	r2, [pc, #184]	@ (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d128      	bne.n	8001a68 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a25      	ldr	r2, [pc, #148]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481c      	ldr	r0, [pc, #112]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001a62:	f001 f8d9 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a66:	e02c      	b.n	8001ac2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <HAL_ADC_MspInit+0xe4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d127      	bne.n	8001ac2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a15      	ldr	r2, [pc, #84]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001abe:	f001 f8ab 	bl	8002c18 <HAL_GPIO_Init>
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	@ 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40012100 	.word	0x40012100

08001adc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <HAL_DAC_MspInit+0x7c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d127      	bne.n	8001b4e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_DAC_MspInit+0x80>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <HAL_DAC_MspInit+0x80>)
 8001b08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_DAC_MspInit+0x80>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_DAC_MspInit+0x80>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a0e      	ldr	r2, [pc, #56]	@ (8001b5c <HAL_DAC_MspInit+0x80>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_DAC_MspInit+0x80>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b36:	2330      	movs	r3, #48	@ 0x30
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <HAL_DAC_MspInit+0x84>)
 8001b4a:	f001 f865 	bl	8002c18 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	@ 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40007400 	.word	0x40007400
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_I2C_MspInit+0x84>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12c      	bne.n	8001be0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ba2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <HAL_I2C_MspInit+0x8c>)
 8001bc0:	f001 f82a 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_I2C_MspInit+0x88>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40005400 	.word	0x40005400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <HAL_TIM_Base_MspInit+0x80>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d116      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_TIM_Base_MspInit+0x84>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <HAL_TIM_Base_MspInit+0x84>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_TIM_Base_MspInit+0x84>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	201d      	movs	r0, #29
 8001c28:	f000 ff45 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c2c:	201d      	movs	r0, #29
 8001c2e:	f000 ff5e 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c32:	e01a      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <HAL_TIM_Base_MspInit+0x88>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d115      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <HAL_TIM_Base_MspInit+0x84>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <HAL_TIM_Base_MspInit+0x84>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_TIM_Base_MspInit+0x84>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2037      	movs	r0, #55	@ 0x37
 8001c60:	f000 ff29 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c64:	2037      	movs	r0, #55	@ 0x37
 8001c66:	f000 ff42 	bl	8002aee <HAL_NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40001400 	.word	0x40001400

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_UART_MspInit+0x84>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12b      	bne.n	8001cfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_UART_MspInit+0x88>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_UART_MspInit+0x88>)
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_UART_MspInit+0x88>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_UART_MspInit+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <HAL_UART_MspInit+0x88>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_UART_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cda:	230c      	movs	r3, #12
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cea:	2307      	movs	r3, #7
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <HAL_UART_MspInit+0x8c>)
 8001cf6:	f000 ff8f 	bl	8002c18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	@ 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40004400 	.word	0x40004400
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d22:	bf00      	nop
 8001d24:	e7fd      	b.n	8001d22 <HardFault_Handler+0x4>

08001d26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2a:	bf00      	nop
 8001d2c:	e7fd      	b.n	8001d2a <MemManage_Handler+0x4>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <BusFault_Handler+0x4>

08001d36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 f9b8 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d7a:	4817      	ldr	r0, [pc, #92]	@ (8001dd8 <TIM3_IRQHandler+0x64>)
 8001d7c:	f004 f8d2 	bl	8005f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  HAL_ADC_Start(&hadc1);										// start conversion
 8001d80:	4816      	ldr	r0, [pc, #88]	@ (8001ddc <TIM3_IRQHandler+0x68>)
 8001d82:	f000 fa35 	bl	80021f0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,11);							// wait for conversion to end -- mux ADC123_IN11 input PC1
 8001d86:	210b      	movs	r1, #11
 8001d88:	4814      	ldr	r0, [pc, #80]	@ (8001ddc <TIM3_IRQHandler+0x68>)
 8001d8a:	f000 fb03 	bl	8002394 <HAL_ADC_PollForConversion>
  float newValue = HAL_ADC_GetValue(&hadc1);
 8001d8e:	4813      	ldr	r0, [pc, #76]	@ (8001ddc <TIM3_IRQHandler+0x68>)
 8001d90:	f000 fb8b 	bl	80024aa <HAL_ADC_GetValue>
 8001d94:	ee07 0a90 	vmov	s15, r0
 8001d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9c:	edc7 7a01 	vstr	s15, [r7, #4]

  samples[sample_index] = newValue;  // Vervang de oudste waarde met de nieuwe waarde
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <TIM3_IRQHandler+0x6c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0f      	ldr	r2, [pc, #60]	@ (8001de4 <TIM3_IRQHandler+0x70>)
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]

  // Controleer of de pointer "teruggesprongen" is
  if (sample_index == SAMPLE_SIZE - 1) {
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <TIM3_IRQHandler+0x6c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	d102      	bne.n	8001dbc <TIM3_IRQHandler+0x48>
          // Pointer gaat van het einde terug naar het begin
          buffer_full = true;  // Buffer is "vol"
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <TIM3_IRQHandler+0x74>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
      }

  // Verhoog de index en maak er een circulaire buffer van
  sample_index = (sample_index + 1) % SAMPLE_SIZE;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <TIM3_IRQHandler+0x6c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	425a      	negs	r2, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	bf58      	it	pl
 8001dca:	4253      	negpl	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <TIM3_IRQHandler+0x6c>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000348 	.word	0x20000348
 8001ddc:	20000250 	.word	0x20000250
 8001de0:	20000848 	.word	0x20000848
 8001de4:	20000448 	.word	0x20000448
 8001de8:	2000084c 	.word	0x2000084c

08001dec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001df2:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <TIM7_IRQHandler+0x28>)
 8001df4:	f004 f896 	bl	8005f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  //sendFloatAsBytes(123);
  uint8_t temp = 4; // Numerieke waarde 2
 8001df8:	2304      	movs	r3, #4
 8001dfa:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, &temp, 1, HAL_MAX_DELAY);
 8001dfc:	1df9      	adds	r1, r7, #7
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	2201      	movs	r2, #1
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <TIM7_IRQHandler+0x2c>)
 8001e06:	f004 fc9d 	bl	8006744 <HAL_UART_Transmit>

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000390 	.word	0x20000390
 8001e18:	200003d8 	.word	0x200003d8

08001e1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <OTG_FS_IRQHandler+0x10>)
 8001e22:	f001 fb8f 	bl	8003544 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000c34 	.word	0x20000c34

08001e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_kill>:

int _kill(int pid, int sig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e4a:	f009 fbad 	bl	800b5a8 <__errno>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2216      	movs	r2, #22
 8001e52:	601a      	str	r2, [r3, #0]
	return -1;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_exit>:

void _exit (int status)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ffe7 	bl	8001e40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e72:	bf00      	nop
 8001e74:	e7fd      	b.n	8001e72 <_exit+0x12>

08001e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e00a      	b.n	8001e9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e88:	f3af 8000 	nop.w
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	b2ca      	uxtb	r2, r1
 8001e96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbf0      	blt.n	8001e88 <_read+0x12>
	}

return len;
 8001ea6:	687b      	ldr	r3, [r7, #4]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e009      	b.n	8001ed6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbf1      	blt.n	8001ec2 <_write+0x12>
	}
	return len;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_close>:

int _close(int file)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f10:	605a      	str	r2, [r3, #4]
	return 0;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_isatty>:

int _isatty(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
	return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f009 fb12 	bl	800b5a8 <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20020000 	.word	0x20020000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	20000850 	.word	0x20000850
 8001fb8:	20001160 	.word	0x20001160

08001fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <SystemInit+0x28>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <SystemInit+0x28>)
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SystemInit+0x28>)
 8001fd2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002020 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fee:	e003      	b.n	8001ff8 <LoopCopyDataInit>

08001ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ff6:	3104      	adds	r1, #4

08001ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ff8:	480b      	ldr	r0, [pc, #44]	@ (8002028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002000:	d3f6      	bcc.n	8001ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8002002:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002004:	e002      	b.n	800200c <LoopFillZerobss>

08002006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002008:	f842 3b04 	str.w	r3, [r2], #4

0800200c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800200e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002010:	d3f9      	bcc.n	8002006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002012:	f7ff ffd3 	bl	8001fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f009 facd 	bl	800b5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7ff f923 	bl	8001264 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002020:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002024:	0800e488 	.word	0x0800e488
  ldr  r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800202c:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8002030:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 8002034:	20001160 	.word	0x20001160

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <HAL_Init+0x40>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <HAL_Init+0x40>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	@ (800207c <HAL_Init+0x40>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 fd1b 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	2000      	movs	r0, #0
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fc98 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fd33 	bl	8002b0a <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 fcfb 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000040 	.word	0x20000040
 80020d8:	20000048 	.word	0x20000048
 80020dc:	20000044 	.word	0x20000044

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000048 	.word	0x20000048
 8002104:	20000854 	.word	0x20000854

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000854 	.word	0x20000854

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000048 	.word	0x20000048

08002168 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e033      	b.n	80021e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fc34 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 faa4 	bl	8002708 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80021d6:	e001      	b.n	80021dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_ADC_Start+0x1a>
 8002206:	2302      	movs	r3, #2
 8002208:	e0b2      	b.n	8002370 <HAL_ADC_Start+0x180>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d018      	beq.n	8002252 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002230:	4b52      	ldr	r3, [pc, #328]	@ (800237c <HAL_ADC_Start+0x18c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a52      	ldr	r2, [pc, #328]	@ (8002380 <HAL_ADC_Start+0x190>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9a      	lsrs	r2, r3, #18
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002244:	e002      	b.n	800224c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d17a      	bne.n	8002356 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800228a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800229e:	d106      	bne.n	80022ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f023 0206 	bic.w	r2, r3, #6
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022bc:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_ADC_Start+0x194>)
 80022be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d12a      	bne.n	800232c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_ADC_Start+0x198>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d015      	beq.n	800230c <HAL_ADC_Start+0x11c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_ADC_Start+0x19c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_Start+0x106>
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_ADC_Start+0x194>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a25      	ldr	r2, [pc, #148]	@ (8002390 <HAL_ADC_Start+0x1a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d136      	bne.n	800236e <HAL_ADC_Start+0x17e>
 8002300:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_ADC_Start+0x194>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d130      	bne.n	800236e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d129      	bne.n	800236e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	e020      	b.n	800236e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a15      	ldr	r2, [pc, #84]	@ (8002388 <HAL_ADC_Start+0x198>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11b      	bne.n	800236e <HAL_ADC_Start+0x17e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d114      	bne.n	800236e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e00b      	b.n	800236e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f043 0210 	orr.w	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20000040 	.word	0x20000040
 8002380:	431bde83 	.word	0x431bde83
 8002384:	40012300 	.word	0x40012300
 8002388:	40012000 	.word	0x40012000
 800238c:	40012100 	.word	0x40012100
 8002390:	40012200 	.word	0x40012200

08002394 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b0:	d113      	bne.n	80023da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023c0:	d10b      	bne.n	80023da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e063      	b.n	80024a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023da:	f7ff fe95 	bl	8002108 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e0:	e021      	b.n	8002426 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d01d      	beq.n	8002426 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_ADC_PollForConversion+0x6c>
 80023f0:	f7ff fe8a 	bl	8002108 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d212      	bcs.n	8002426 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d00b      	beq.n	8002426 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f043 0204 	orr.w	r2, r3, #4
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e03d      	b.n	80024a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d1d6      	bne.n	80023e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0212 	mvn.w	r2, #18
 800243c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d123      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11f      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x1c>
 80024dc:	2302      	movs	r3, #2
 80024de:	e105      	b.n	80026ec <HAL_ADC_ConfigChannel+0x228>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	d925      	bls.n	800253c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68d9      	ldr	r1, [r3, #12]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	3b1e      	subs	r3, #30
 8002506:	2207      	movs	r2, #7
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68d9      	ldr	r1, [r3, #12]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	4618      	mov	r0, r3
 8002528:	4603      	mov	r3, r0
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4403      	add	r3, r0
 800252e:	3b1e      	subs	r3, #30
 8002530:	409a      	lsls	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	e022      	b.n	8002582 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6919      	ldr	r1, [r3, #16]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	2207      	movs	r2, #7
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	400a      	ands	r2, r1
 800255e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	4603      	mov	r3, r0
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4403      	add	r3, r0
 8002578:	409a      	lsls	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b06      	cmp	r3, #6
 8002588:	d824      	bhi.n	80025d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b05      	subs	r3, #5
 800259c:	221f      	movs	r2, #31
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	3b05      	subs	r3, #5
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025d2:	e04c      	b.n	800266e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d824      	bhi.n	8002626 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b23      	subs	r3, #35	@ 0x23
 80025ee:	221f      	movs	r2, #31
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43da      	mvns	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	400a      	ands	r2, r1
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	4618      	mov	r0, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	3b23      	subs	r3, #35	@ 0x23
 8002618:	fa00 f203 	lsl.w	r2, r0, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
 8002624:	e023      	b.n	800266e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b41      	subs	r3, #65	@ 0x41
 8002638:	221f      	movs	r2, #31
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b41      	subs	r3, #65	@ 0x41
 8002662:	fa00 f203 	lsl.w	r2, r0, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266e:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <HAL_ADC_ConfigChannel+0x234>)
 8002670:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <HAL_ADC_ConfigChannel+0x238>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d109      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1cc>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d105      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a19      	ldr	r2, [pc, #100]	@ (80026fc <HAL_ADC_ConfigChannel+0x238>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d123      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x21e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d003      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x1e6>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b11      	cmp	r3, #17
 80026a8:	d11b      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_ADC_ConfigChannel+0x23c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a10      	ldr	r2, [pc, #64]	@ (8002704 <HAL_ADC_ConfigChannel+0x240>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9a      	lsrs	r2, r3, #18
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026d4:	e002      	b.n	80026dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f9      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012300 	.word	0x40012300
 80026fc:	40012000 	.word	0x40012000
 8002700:	20000040 	.word	0x20000040
 8002704:	431bde83 	.word	0x431bde83

08002708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002710:	4b79      	ldr	r3, [pc, #484]	@ (80028f8 <ADC_Init+0x1f0>)
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	021a      	lsls	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	4a58      	ldr	r2, [pc, #352]	@ (80028fc <ADC_Init+0x1f4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d022      	beq.n	80027e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	e00f      	b.n	8002806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002804:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0202 	bic.w	r2, r2, #2
 8002814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7e1b      	ldrb	r3, [r3, #24]
 8002820:	005a      	lsls	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01b      	beq.n	800286c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002842:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	3b01      	subs	r3, #1
 8002860:	035a      	lsls	r2, r3, #13
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	e007      	b.n	800287c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800287a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800288a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	3b01      	subs	r3, #1
 8002898:	051a      	lsls	r2, r3, #20
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028be:	025a      	lsls	r2, r3, #9
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	029a      	lsls	r2, r3, #10
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40012300 	.word	0x40012300
 80028fc:	0f000001 	.word	0x0f000001

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	@ (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	@ (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	@ (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	@ 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e014      	b.n	8002b5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	791b      	ldrb	r3, [r3, #4]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe ffc9 	bl	8001adc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b089      	sub	sp, #36	@ 0x24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_DAC_ConfigChannel+0x1c>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e042      	b.n	8002c0c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	795b      	ldrb	r3, [r3, #5]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_DAC_ConfigChannel+0x2c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e03c      	b.n	8002c0c <HAL_DAC_ConfigChannel+0xa6>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	22c0      	movs	r2, #192	@ 0xc0
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3724      	adds	r7, #36	@ 0x24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	@ 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e16b      	b.n	8002f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 815a 	bne.w	8002f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d005      	beq.n	8002c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d130      	bne.n	8002ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2203      	movs	r2, #3
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 0201 	and.w	r2, r3, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d017      	beq.n	8002d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80b4 	beq.w	8002f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b60      	ldr	r3, [pc, #384]	@ (8002f24 <HAL_GPIO_Init+0x30c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f24 <HAL_GPIO_Init+0x30c>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dae:	4b5d      	ldr	r3, [pc, #372]	@ (8002f24 <HAL_GPIO_Init+0x30c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dba:	4a5b      	ldr	r2, [pc, #364]	@ (8002f28 <HAL_GPIO_Init+0x310>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_GPIO_Init+0x314>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x226>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a51      	ldr	r2, [pc, #324]	@ (8002f30 <HAL_GPIO_Init+0x318>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x222>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a50      	ldr	r2, [pc, #320]	@ (8002f34 <HAL_GPIO_Init+0x31c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x21e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4f      	ldr	r2, [pc, #316]	@ (8002f38 <HAL_GPIO_Init+0x320>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x21a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4e      	ldr	r2, [pc, #312]	@ (8002f3c <HAL_GPIO_Init+0x324>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x216>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4d      	ldr	r2, [pc, #308]	@ (8002f40 <HAL_GPIO_Init+0x328>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4c      	ldr	r2, [pc, #304]	@ (8002f44 <HAL_GPIO_Init+0x32c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x20e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	@ (8002f48 <HAL_GPIO_Init+0x330>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x20a>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	e00e      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e22:	2308      	movs	r3, #8
 8002e24:	e00c      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e26:	2306      	movs	r3, #6
 8002e28:	e00a      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x228>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	@ (8002f28 <HAL_GPIO_Init+0x310>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e82:	4a32      	ldr	r2, [pc, #200]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e88:	4b30      	ldr	r3, [pc, #192]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb2:	4b26      	ldr	r3, [pc, #152]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f00:	4a12      	ldr	r2, [pc, #72]	@ (8002f4c <HAL_GPIO_Init+0x334>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f ae90 	bls.w	8002c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af02      	add	r7, sp, #8
 8002f88:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e059      	b.n	8003048 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f007 f9d0 	bl	800a354 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc2:	d102      	bne.n	8002fca <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 ffe9 	bl	8006fa6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7c1a      	ldrb	r2, [r3, #16]
 8002fdc:	f88d 2000 	strb.w	r2, [sp]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe4:	f003 ff6a 	bl	8006ebc <USB_CoreInit>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e026      	b.n	8003048 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f003 ffe1 	bl	8006fc8 <USB_SetCurrentMode>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e017      	b.n	8003048 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7c1a      	ldrb	r2, [r3, #16]
 8003020:	f88d 2000 	strb.w	r2, [sp]
 8003024:	3304      	adds	r3, #4
 8003026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003028:	f004 f984 	bl	8007334 <USB_HostInit>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e004      	b.n	8003048 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08b      	sub	sp, #44	@ 0x2c
 8003054:	af04      	add	r7, sp, #16
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	70fb      	strb	r3, [r7, #3]
 8003062:	460b      	mov	r3, r1
 8003064:	70bb      	strb	r3, [r7, #2]
 8003066:	4613      	mov	r3, r2
 8003068:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800306a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800306c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_HCD_HC_Init+0x2c>
 8003078:	2302      	movs	r3, #2
 800307a:	e09d      	b.n	80031b8 <HAL_HCD_HC_Init+0x168>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3319      	adds	r3, #25
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3314      	adds	r3, #20
 80030a8:	787a      	ldrb	r2, [r7, #1]
 80030aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3315      	adds	r3, #21
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3326      	adds	r3, #38	@ 0x26
 80030d0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80030d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	78bb      	ldrb	r3, [r7, #2]
 80030da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030de:	b2d8      	uxtb	r0, r3
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3316      	adds	r3, #22
 80030ee:	4602      	mov	r2, r0
 80030f0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fbc8 	bl	800388c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80030fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003100:	2b00      	cmp	r3, #0
 8003102:	da0a      	bge.n	800311a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3317      	adds	r3, #23
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e009      	b.n	800312e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3317      	adds	r3, #23
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fa62 	bl	80075fc <USB_GetHostSpeed>
 8003138:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800313a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10b      	bne.n	800315a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003142:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_HCD_HC_Init+0x10a>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2bbc      	cmp	r3, #188	@ 0xbc
 8003154:	d901      	bls.n	800315a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003156:	23bc      	movs	r3, #188	@ 0xbc
 8003158:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3318      	adds	r3, #24
 800316a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800316e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	b298      	uxth	r0, r3
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3328      	adds	r3, #40	@ 0x28
 8003184:	4602      	mov	r2, r0
 8003186:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	b29b      	uxth	r3, r3
 8003190:	787c      	ldrb	r4, [r7, #1]
 8003192:	78ba      	ldrb	r2, [r7, #2]
 8003194:	78f9      	ldrb	r1, [r7, #3]
 8003196:	9302      	str	r3, [sp, #8]
 8003198:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4623      	mov	r3, r4
 80031a6:	f004 fa51 	bl	800764c <USB_HC_Init>
 80031aa:	4603      	mov	r3, r0
 80031ac:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_HCD_HC_Halt+0x1e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e00f      	b.n	80031fe <HAL_HCD_HC_Halt+0x3e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fde3 	bl	8007dba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4603      	mov	r3, r0
 8003218:	70fb      	strb	r3, [r7, #3]
 800321a:	460b      	mov	r3, r1
 800321c:	70bb      	strb	r3, [r7, #2]
 800321e:	4613      	mov	r3, r2
 8003220:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3317      	adds	r3, #23
 8003232:	78ba      	ldrb	r2, [r7, #2]
 8003234:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3326      	adds	r3, #38	@ 0x26
 8003246:	787a      	ldrb	r2, [r7, #1]
 8003248:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800324a:	7c3b      	ldrb	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d114      	bne.n	800327a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	332a      	adds	r3, #42	@ 0x2a
 8003260:	2203      	movs	r2, #3
 8003262:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3319      	adds	r3, #25
 8003274:	7f3a      	ldrb	r2, [r7, #28]
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e009      	b.n	800328e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	332a      	adds	r3, #42	@ 0x2a
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800328e:	787b      	ldrb	r3, [r7, #1]
 8003290:	2b03      	cmp	r3, #3
 8003292:	f200 8102 	bhi.w	800349a <HAL_HCD_HC_SubmitRequest+0x292>
 8003296:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	08003485 	.word	0x08003485
 80032a4:	08003371 	.word	0x08003371
 80032a8:	080033fb 	.word	0x080033fb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80032ac:	7c3b      	ldrb	r3, [r7, #16]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	f040 80f5 	bne.w	800349e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80032b4:	78bb      	ldrb	r3, [r7, #2]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d12d      	bne.n	8003316 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80032ba:	8b3b      	ldrh	r3, [r7, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	333d      	adds	r3, #61	@ 0x3d
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	333d      	adds	r3, #61	@ 0x3d
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	332a      	adds	r3, #42	@ 0x2a
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80032fe:	e0ce      	b.n	800349e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	332a      	adds	r3, #42	@ 0x2a
 8003310:	2202      	movs	r2, #2
 8003312:	701a      	strb	r2, [r3, #0]
      break;
 8003314:	e0c3      	b.n	800349e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	331a      	adds	r3, #26
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 80b8 	bne.w	800349e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	333c      	adds	r3, #60	@ 0x3c
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	332a      	adds	r3, #42	@ 0x2a
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
      break;
 8003358:	e0a1      	b.n	800349e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	332a      	adds	r3, #42	@ 0x2a
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	e096      	b.n	800349e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003370:	78bb      	ldrb	r3, [r7, #2]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d120      	bne.n	80033b8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	333d      	adds	r3, #61	@ 0x3d
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	332a      	adds	r3, #42	@ 0x2a
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033a0:	e07e      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	332a      	adds	r3, #42	@ 0x2a
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
      break;
 80033b6:	e073      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	333c      	adds	r3, #60	@ 0x3c
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	332a      	adds	r3, #42	@ 0x2a
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
      break;
 80033e2:	e05d      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	332a      	adds	r3, #42	@ 0x2a
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
      break;
 80033f8:	e052      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80033fa:	78bb      	ldrb	r3, [r7, #2]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d120      	bne.n	8003442 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	333d      	adds	r3, #61	@ 0x3d
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	332a      	adds	r3, #42	@ 0x2a
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800342a:	e039      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	332a      	adds	r3, #42	@ 0x2a
 800343c:	2202      	movs	r2, #2
 800343e:	701a      	strb	r2, [r3, #0]
      break;
 8003440:	e02e      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	333c      	adds	r3, #60	@ 0x3c
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	332a      	adds	r3, #42	@ 0x2a
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
      break;
 800346c:	e018      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	332a      	adds	r3, #42	@ 0x2a
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
      break;
 8003482:	e00d      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	332a      	adds	r3, #42	@ 0x2a
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
      break;
 8003498:	e002      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800349e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	332c      	adds	r3, #44	@ 0x2c
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	8b39      	ldrh	r1, [r7, #24]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4403      	add	r3, r0
 80034c4:	3334      	adds	r3, #52	@ 0x34
 80034c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	334c      	adds	r3, #76	@ 0x4c
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3338      	adds	r3, #56	@ 0x38
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3315      	adds	r3, #21
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	334d      	adds	r3, #77	@ 0x4d
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3310      	adds	r3, #16
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	1d19      	adds	r1, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	799b      	ldrb	r3, [r3, #6]
 8003532:	461a      	mov	r2, r3
 8003534:	f004 f9b6 	bl	80078a4 <USB_HC_StartXfer>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 feaa 	bl	80072b4 <USB_GetMode>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	f040 80fb 	bne.w	800375e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fe6d 	bl	800724c <USB_ReadInterrupts>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80f1 	beq.w	800375c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fe64 	bl	800724c <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800358e:	d104      	bne.n	800359a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003598:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fe54 	bl	800724c <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ae:	d104      	bne.n	80035ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f003 fe44 	bl	800724c <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ce:	d104      	bne.n	80035da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fe34 	bl	800724c <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d103      	bne.n	80035f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2202      	movs	r2, #2
 80035f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fe26 	bl	800724c <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800360a:	d120      	bne.n	800364e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003614:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003626:	2110      	movs	r1, #16
 8003628:	6938      	ldr	r0, [r7, #16]
 800362a:	f003 fd19 	bl	8007060 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800362e:	6938      	ldr	r0, [r7, #16]
 8003630:	f003 fd48 	bl	80070c4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7a5b      	ldrb	r3, [r3, #9]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d105      	bne.n	8003648 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f003 ff3a 	bl	80074bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f006 ff01 	bl	800a450 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fdfa 	bl	800724c <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800365e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003662:	d102      	bne.n	800366a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f001 fd4d 	bl	8005104 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f003 fdec 	bl	800724c <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b08      	cmp	r3, #8
 800367c:	d106      	bne.n	800368c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f006 feca 	bl	800a418 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2208      	movs	r2, #8
 800368a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fddb 	bl	800724c <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a0:	d139      	bne.n	8003716 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fb76 	bl	8007d98 <USB_HC_ReadInterrupt>
 80036ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e025      	b.n	8003700 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d018      	beq.n	80036fa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036de:	d106      	bne.n	80036ee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f905 	bl	80038f6 <HCD_HC_IN_IRQHandler>
 80036ec:	e005      	b.n	80036fa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 ff67 	bl	80045c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	3301      	adds	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	795b      	ldrb	r3, [r3, #5]
 8003704:	461a      	mov	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4293      	cmp	r3, r2
 800370a:	d3d3      	bcc.n	80036b4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 fd96 	bl	800724c <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b10      	cmp	r3, #16
 8003728:	d101      	bne.n	800372e <HAL_HCD_IRQHandler+0x1ea>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_HCD_IRQHandler+0x1ec>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d014      	beq.n	800375e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 fbfe 	bl	8004f46 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699a      	ldr	r2, [r3, #24]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0210 	orr.w	r2, r2, #16
 8003758:	619a      	str	r2, [r3, #24]
 800375a:	e000      	b.n	800375e <HAL_HCD_IRQHandler+0x21a>
      return;
 800375c:	bf00      	nop
    }
  }
}
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_HCD_Start+0x16>
 8003776:	2302      	movs	r3, #2
 8003778:	e013      	b.n	80037a2 <HAL_HCD_Start+0x3e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f003 fefe 	bl	800758a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fbf6 	bl	8006f84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_HCD_Stop+0x16>
 80037bc:	2302      	movs	r3, #2
 80037be:	e00d      	b.n	80037dc <HAL_HCD_Stop+0x32>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 fc51 	bl	8008074 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f003 fea0 	bl	8007536 <USB_ResetPort>
 80037f6:	4603      	mov	r3, r0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	334c      	adds	r3, #76	@ 0x4c
 800381c:	781b      	ldrb	r3, [r3, #0]
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3338      	adds	r3, #56	@ 0x38
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fee2 	bl	800762a <USB_GetCurrentFrame>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f003 febd 	bl	80075fc <USB_GetHostSpeed>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	331a      	adds	r3, #26
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	331b      	adds	r3, #27
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3325      	adds	r3, #37	@ 0x25
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3324      	adds	r3, #36	@ 0x24
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fcac 	bl	8007272 <USB_ReadChInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d11a      	bne.n	800395a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2304      	movs	r3, #4
 8003934:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	334d      	adds	r3, #77	@ 0x4d
 8003946:	2207      	movs	r2, #7
 8003948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fa31 	bl	8007dba <USB_HC_Halt>
 8003958:	e09e      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fc85 	bl	8007272 <USB_ReadChInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003972:	d11b      	bne.n	80039ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003986:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	334d      	adds	r3, #77	@ 0x4d
 8003998:	2208      	movs	r2, #8
 800399a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f004 fa08 	bl	8007dba <USB_HC_Halt>
 80039aa:	e075      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f003 fc5c 	bl	8007272 <USB_ReadChInterrupts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d11a      	bne.n	80039fa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d0:	461a      	mov	r2, r3
 80039d2:	2308      	movs	r3, #8
 80039d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	334d      	adds	r3, #77	@ 0x4d
 80039e6:	2206      	movs	r2, #6
 80039e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 f9e1 	bl	8007dba <USB_HC_Halt>
 80039f8:	e04e      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fc35 	bl	8007272 <USB_ReadChInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a12:	d11b      	bne.n	8003a4c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	334d      	adds	r3, #77	@ 0x4d
 8003a38:	2209      	movs	r2, #9
 8003a3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 f9b8 	bl	8007dba <USB_HC_Halt>
 8003a4a:	e025      	b.n	8003a98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f003 fc0c 	bl	8007272 <USB_ReadChInterrupts>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a60:	2b80      	cmp	r3, #128	@ 0x80
 8003a62:	d119      	bne.n	8003a98 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a70:	461a      	mov	r2, r3
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	334d      	adds	r3, #77	@ 0x4d
 8003a86:	2207      	movs	r2, #7
 8003a88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 f991 	bl	8007dba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f003 fbe6 	bl	8007272 <USB_ReadChInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab0:	d112      	bne.n	8003ad8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 f97d 	bl	8007dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003acc:	461a      	mov	r2, r3
 8003ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ad2:	6093      	str	r3, [r2, #8]
 8003ad4:	f000 bd75 	b.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 fbc6 	bl	8007272 <USB_ReadChInterrupts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 8128 	bne.w	8003d42 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afe:	461a      	mov	r2, r3
 8003b00:	2320      	movs	r3, #32
 8003b02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	331b      	adds	r3, #27
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d119      	bne.n	8003b4e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	331b      	adds	r3, #27
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	799b      	ldrb	r3, [r3, #6]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01b      	beq.n	8003b8e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	3330      	adds	r3, #48	@ 0x30
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	1ac9      	subs	r1, r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4403      	add	r3, r0
 8003b8a:	3338      	adds	r3, #56	@ 0x38
 8003b8c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	334d      	adds	r3, #77	@ 0x4d
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3344      	adds	r3, #68	@ 0x44
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3326      	adds	r3, #38	@ 0x26
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3326      	adds	r3, #38	@ 0x26
 8003bee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d110      	bne.n	8003c16 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 f8dc 	bl	8007dba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2310      	movs	r3, #16
 8003c12:	6093      	str	r3, [r2, #8]
 8003c14:	e03d      	b.n	8003c92 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	3326      	adds	r3, #38	@ 0x26
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d00a      	beq.n	8003c42 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3326      	adds	r3, #38	@ 0x26
 8003c3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d127      	bne.n	8003c92 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c60:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334c      	adds	r3, #76	@ 0x4c
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334c      	adds	r3, #76	@ 0x4c
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f006 fbed 	bl	800a46c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	799b      	ldrb	r3, [r3, #6]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d13b      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3338      	adds	r3, #56	@ 0x38
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4403      	add	r3, r0
 8003cba:	3328      	adds	r3, #40	@ 0x28
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	440b      	add	r3, r1
 8003cc0:	1e59      	subs	r1, r3, #1
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4403      	add	r3, r0
 8003cd0:	3328      	adds	r3, #40	@ 0x28
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8470 	beq.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	333c      	adds	r3, #60	@ 0x3c
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2d8      	uxtb	r0, r3
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333c      	adds	r3, #60	@ 0x3c
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	f000 bc58 	b.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	333c      	adds	r3, #60	@ 0x3c
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	f083 0301 	eor.w	r3, r3, #1
 8003d2a:	b2d8      	uxtb	r0, r3
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	333c      	adds	r3, #60	@ 0x3c
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	f000 bc40 	b.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 fa91 	bl	8007272 <USB_ReadChInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d131      	bne.n	8003dbe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d66:	461a      	mov	r2, r3
 8003d68:	2320      	movs	r3, #32
 8003d6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	331a      	adds	r3, #26
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	f040 841f 	bne.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	331b      	adds	r3, #27
 8003d94:	2201      	movs	r2, #1
 8003d96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	334d      	adds	r3, #77	@ 0x4d
 8003da8:	2203      	movs	r2, #3
 8003daa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 f800 	bl	8007dba <USB_HC_Halt>
 8003dba:	f000 bc02 	b.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 fa53 	bl	8007272 <USB_ReadChInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	f040 8305 	bne.w	80043e2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2302      	movs	r3, #2
 8003de8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	334d      	adds	r3, #77	@ 0x4d
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d114      	bne.n	8003e2a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	334d      	adds	r3, #77	@ 0x4d
 8003e10:	2202      	movs	r2, #2
 8003e12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	334c      	adds	r3, #76	@ 0x4c
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e2cc      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	334d      	adds	r3, #77	@ 0x4d
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b06      	cmp	r3, #6
 8003e3e:	d114      	bne.n	8003e6a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2202      	movs	r2, #2
 8003e52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	334c      	adds	r3, #76	@ 0x4c
 8003e64:	2205      	movs	r2, #5
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e2ac      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334d      	adds	r3, #77	@ 0x4d
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b07      	cmp	r3, #7
 8003e7e:	d00b      	beq.n	8003e98 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334d      	adds	r3, #77	@ 0x4d
 8003e90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	f040 80a6 	bne.w	8003fe4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334d      	adds	r3, #77	@ 0x4d
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3344      	adds	r3, #68	@ 0x44
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4403      	add	r3, r0
 8003ecc:	3344      	adds	r3, #68	@ 0x44
 8003ece:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	@ 0x44
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d943      	bls.n	8003f6e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3344      	adds	r3, #68	@ 0x44
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	331a      	adds	r3, #26
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d123      	bne.n	8003f58 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	331b      	adds	r3, #27
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	331c      	adds	r3, #28
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f56:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334c      	adds	r3, #76	@ 0x4c
 8003f68:	2204      	movs	r2, #4
 8003f6a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f6c:	e229      	b.n	80043c2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334c      	adds	r3, #76	@ 0x4c
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3326      	adds	r3, #38	@ 0x26
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3326      	adds	r3, #38	@ 0x26
 8003fa8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	f040 8209 	bne.w	80043c2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fc6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fe2:	e1ee      	b.n	80043c2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334d      	adds	r3, #77	@ 0x4d
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	f040 80c8 	bne.w	800418c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334d      	adds	r3, #77	@ 0x4d
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	331b      	adds	r3, #27
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	f040 81ce 	bne.w	80043c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3326      	adds	r3, #38	@ 0x26
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d16b      	bne.n	8004116 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3348      	adds	r3, #72	@ 0x48
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1c59      	adds	r1, r3, #1
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4403      	add	r3, r0
 800405e:	3348      	adds	r3, #72	@ 0x48
 8004060:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3348      	adds	r3, #72	@ 0x48
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d943      	bls.n	8004100 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	3348      	adds	r3, #72	@ 0x48
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	331b      	adds	r3, #27
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	3344      	adds	r3, #68	@ 0x44
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d809      	bhi.n	80040ca <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	331c      	adds	r3, #28
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	334c      	adds	r3, #76	@ 0x4c
 80040fa:	2204      	movs	r2, #4
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e014      	b.n	800412a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	334c      	adds	r3, #76	@ 0x4c
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e009      	b.n	800412a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	334c      	adds	r3, #76	@ 0x4c
 8004126:	2202      	movs	r2, #2
 8004128:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3326      	adds	r3, #38	@ 0x26
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3326      	adds	r3, #38	@ 0x26
 8004150:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004152:	2b02      	cmp	r3, #2
 8004154:	f040 8136 	bne.w	80043c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800416e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004176:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004184:	461a      	mov	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e11b      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	334d      	adds	r3, #77	@ 0x4d
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	f040 8081 	bne.w	80042a6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334d      	adds	r3, #77	@ 0x4d
 80041b4:	2202      	movs	r2, #2
 80041b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	331b      	adds	r3, #27
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	f040 80fa 	bne.w	80043c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	334c      	adds	r3, #76	@ 0x4c
 80041e0:	2202      	movs	r2, #2
 80041e2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	440a      	add	r2, r1
 800421a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800421e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004222:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	440a      	add	r2, r1
 800423a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800423e:	f023 0320 	bic.w	r3, r3, #32
 8004242:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	3326      	adds	r3, #38	@ 0x26
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3326      	adds	r3, #38	@ 0x26
 800426a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800426c:	2b02      	cmp	r3, #2
 800426e:	f040 80a9 	bne.w	80043c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004288:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004290:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e08e      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	334d      	adds	r3, #77	@ 0x4d
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d143      	bne.n	8004344 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	2202      	movs	r2, #2
 80042ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	334c      	adds	r3, #76	@ 0x4c
 80042e0:	2202      	movs	r2, #2
 80042e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3326      	adds	r3, #38	@ 0x26
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3326      	adds	r3, #38	@ 0x26
 800430a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800430c:	2b02      	cmp	r3, #2
 800430e:	d159      	bne.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004326:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800432e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800433c:	461a      	mov	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e03f      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334d      	adds	r3, #77	@ 0x4d
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d126      	bne.n	80043a8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	334d      	adds	r3, #77	@ 0x4d
 800436a:	2202      	movs	r2, #2
 800436c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3344      	adds	r3, #68	@ 0x44
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4403      	add	r3, r0
 800438e:	3344      	adds	r3, #68	@ 0x44
 8004390:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	334c      	adds	r3, #76	@ 0x4c
 80043a2:	2204      	movs	r2, #4
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e00d      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	334d      	adds	r3, #77	@ 0x4d
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	f000 8100 	beq.w	80045c0 <HCD_HC_IN_IRQHandler+0xcca>
 80043c0:	e000      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	334c      	adds	r3, #76	@ 0x4c
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f006 f846 	bl	800a46c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043e0:	e0ef      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f002 ff41 	bl	8007272 <USB_ReadChInterrupts>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b40      	cmp	r3, #64	@ 0x40
 80043f8:	d12f      	bne.n	800445a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004406:	461a      	mov	r2, r3
 8004408:	2340      	movs	r3, #64	@ 0x40
 800440a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	334d      	adds	r3, #77	@ 0x4d
 800441c:	2205      	movs	r2, #5
 800441e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	331a      	adds	r3, #26
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3344      	adds	r3, #68	@ 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fcb1 	bl	8007dba <USB_HC_Halt>
 8004458:	e0b3      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f002 ff05 	bl	8007272 <USB_ReadChInterrupts>
 8004468:	4603      	mov	r3, r0
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	f040 80a7 	bne.w	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3326      	adds	r3, #38	@ 0x26
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d11b      	bne.n	80044c2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3344      	adds	r3, #68	@ 0x44
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	334d      	adds	r3, #77	@ 0x4d
 80044ae:	2204      	movs	r2, #4
 80044b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f003 fc7d 	bl	8007dba <USB_HC_Halt>
 80044c0:	e03f      	b.n	8004542 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3326      	adds	r3, #38	@ 0x26
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	3326      	adds	r3, #38	@ 0x26
 80044e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d129      	bne.n	8004542 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3344      	adds	r3, #68	@ 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	799b      	ldrb	r3, [r3, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HCD_HC_IN_IRQHandler+0xc2a>
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	331b      	adds	r3, #27
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d110      	bne.n	8004542 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	334d      	adds	r3, #77	@ 0x4d
 8004530:	2204      	movs	r2, #4
 8004532:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f003 fc3c 	bl	8007dba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	331b      	adds	r3, #27
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d129      	bne.n	80045ac <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	331b      	adds	r3, #27
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	440a      	add	r2, r1
 8004582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800458a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045a6:	f043 0320 	orr.w	r3, r3, #32
 80045aa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b8:	461a      	mov	r2, r3
 80045ba:	2310      	movs	r3, #16
 80045bc:	6093      	str	r3, [r2, #8]
 80045be:	e000      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80045c0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f002 fe43 	bl	8007272 <USB_ReadChInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d11b      	bne.n	800462e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004602:	461a      	mov	r2, r3
 8004604:	2304      	movs	r3, #4
 8004606:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	334d      	adds	r3, #77	@ 0x4d
 8004618:	2207      	movs	r2, #7
 800461a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fbc8 	bl	8007dba <USB_HC_Halt>
 800462a:	f000 bc89 	b.w	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f002 fe1b 	bl	8007272 <USB_ReadChInterrupts>
 800463c:	4603      	mov	r3, r0
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b20      	cmp	r3, #32
 8004644:	f040 8082 	bne.w	800474c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4413      	add	r3, r2
 8004650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004654:	461a      	mov	r2, r3
 8004656:	2320      	movs	r3, #32
 8004658:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3319      	adds	r3, #25
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d124      	bne.n	80046ba <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	3319      	adds	r3, #25
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	334c      	adds	r3, #76	@ 0x4c
 8004694:	2202      	movs	r2, #2
 8004696:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334d      	adds	r3, #77	@ 0x4d
 80046a8:	2203      	movs	r2, #3
 80046aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f003 fb80 	bl	8007dba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	331a      	adds	r3, #26
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 8437 	bne.w	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	331b      	adds	r3, #27
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 842b 	bne.w	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	3326      	adds	r3, #38	@ 0x26
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d009      	beq.n	8004714 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	331b      	adds	r3, #27
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	334d      	adds	r3, #77	@ 0x4d
 8004724:	2203      	movs	r2, #3
 8004726:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f003 fb42 	bl	8007dba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3344      	adds	r3, #68	@ 0x44
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e3f9      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f002 fd8c 	bl	8007272 <USB_ReadChInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004764:	d111      	bne.n	800478a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004772:	461a      	mov	r2, r3
 8004774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004778:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fb19 	bl	8007dba <USB_HC_Halt>
 8004788:	e3da      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f002 fd6d 	bl	8007272 <USB_ReadChInterrupts>
 8004798:	4603      	mov	r3, r0
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d168      	bne.n	8004874 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3344      	adds	r3, #68	@ 0x44
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	4611      	mov	r1, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f002 fd57 	bl	8007272 <USB_ReadChInterrupts>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d112      	bne.n	80047f4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3319      	adds	r3, #25
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ee:	461a      	mov	r2, r3
 80047f0:	2340      	movs	r3, #64	@ 0x40
 80047f2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	331b      	adds	r3, #27
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d019      	beq.n	800483e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	331b      	adds	r3, #27
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	440a      	add	r2, r1
 8004834:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484a:	461a      	mov	r2, r3
 800484c:	2301      	movs	r3, #1
 800484e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	334d      	adds	r3, #77	@ 0x4d
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f003 faa4 	bl	8007dba <USB_HC_Halt>
 8004872:	e365      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f002 fcf8 	bl	8007272 <USB_ReadChInterrupts>
 8004882:	4603      	mov	r3, r0
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b40      	cmp	r3, #64	@ 0x40
 800488a:	d139      	bne.n	8004900 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	334d      	adds	r3, #77	@ 0x4d
 800489c:	2205      	movs	r2, #5
 800489e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	331a      	adds	r3, #26
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3319      	adds	r3, #25
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	3344      	adds	r3, #68	@ 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f003 fa67 	bl	8007dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048f8:	461a      	mov	r2, r3
 80048fa:	2340      	movs	r3, #64	@ 0x40
 80048fc:	6093      	str	r3, [r2, #8]
 80048fe:	e31f      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f002 fcb2 	bl	8007272 <USB_ReadChInterrupts>
 800490e:	4603      	mov	r3, r0
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d11a      	bne.n	800494e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004924:	461a      	mov	r2, r3
 8004926:	2308      	movs	r3, #8
 8004928:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	334d      	adds	r3, #77	@ 0x4d
 800493a:	2206      	movs	r2, #6
 800493c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fa37 	bl	8007dba <USB_HC_Halt>
 800494c:	e2f8      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f002 fc8b 	bl	8007272 <USB_ReadChInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d144      	bne.n	80049f0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3344      	adds	r3, #68	@ 0x44
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	334d      	adds	r3, #77	@ 0x4d
 800498a:	2204      	movs	r2, #4
 800498c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3319      	adds	r3, #25
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d114      	bne.n	80049ce <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3318      	adds	r3, #24
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3319      	adds	r3, #25
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f003 f9ef 	bl	8007dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2310      	movs	r3, #16
 80049ec:	6093      	str	r3, [r2, #8]
 80049ee:	e2a7      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f002 fc3a 	bl	8007272 <USB_ReadChInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	f040 8083 	bne.w	8004b10 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	799b      	ldrb	r3, [r3, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d111      	bne.n	8004a36 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	334d      	adds	r3, #77	@ 0x4d
 8004a22:	2207      	movs	r2, #7
 8004a24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f003 f9c3 	bl	8007dba <USB_HC_Halt>
 8004a34:	e062      	b.n	8004afc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	3344      	adds	r3, #68	@ 0x44
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1c59      	adds	r1, r3, #1
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4403      	add	r3, r0
 8004a56:	3344      	adds	r3, #68	@ 0x44
 8004a58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3344      	adds	r3, #68	@ 0x44
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d922      	bls.n	8004ab6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3344      	adds	r3, #68	@ 0x44
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	334c      	adds	r3, #76	@ 0x4c
 8004a94:	2204      	movs	r2, #4
 8004a96:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334c      	adds	r3, #76	@ 0x4c
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f005 fcdc 	bl	800a46c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ab4:	e022      	b.n	8004afc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334c      	adds	r3, #76	@ 0x4c
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ae0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ae8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	6093      	str	r3, [r2, #8]
 8004b0e:	e217      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f002 fbaa 	bl	8007272 <USB_ReadChInterrupts>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b28:	d11b      	bne.n	8004b62 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334d      	adds	r3, #77	@ 0x4d
 8004b3a:	2209      	movs	r2, #9
 8004b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f003 f937 	bl	8007dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b5e:	6093      	str	r3, [r2, #8]
 8004b60:	e1ee      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f002 fb81 	bl	8007272 <USB_ReadChInterrupts>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	f040 81df 	bne.w	8004f3a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	334d      	adds	r3, #77	@ 0x4d
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f040 8093 	bne.w	8004ccc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ba6:	78fa      	ldrb	r2, [r7, #3]
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	334d      	adds	r3, #77	@ 0x4d
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	334c      	adds	r3, #76	@ 0x4c
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3326      	adds	r3, #38	@ 0x26
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d00b      	beq.n	8004bfc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3326      	adds	r3, #38	@ 0x26
 8004bf4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	f040 8190 	bne.w	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	799b      	ldrb	r3, [r3, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	333d      	adds	r3, #61	@ 0x3d
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	f083 0301 	eor.w	r3, r3, #1
 8004c1c:	b2d8      	uxtb	r0, r3
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	333d      	adds	r3, #61	@ 0x3d
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	799b      	ldrb	r3, [r3, #6]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f040 8171 	bne.w	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3334      	adds	r3, #52	@ 0x34
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8165 	beq.w	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3334      	adds	r3, #52	@ 0x34
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4403      	add	r3, r0
 8004c72:	3328      	adds	r3, #40	@ 0x28
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	440b      	add	r3, r1
 8004c78:	1e59      	subs	r1, r3, #1
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4403      	add	r3, r0
 8004c88:	3328      	adds	r3, #40	@ 0x28
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c90:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 813f 	beq.w	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	333d      	adds	r3, #61	@ 0x3d
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	f083 0301 	eor.w	r3, r3, #1
 8004cb6:	b2d8      	uxtb	r0, r3
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	333d      	adds	r3, #61	@ 0x3d
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e127      	b.n	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	334d      	adds	r3, #77	@ 0x4d
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d120      	bne.n	8004d24 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	334d      	adds	r3, #77	@ 0x4d
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	331b      	adds	r3, #27
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	f040 8107 	bne.w	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	334c      	adds	r3, #76	@ 0x4c
 8004d1e:	2202      	movs	r2, #2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e0fb      	b.n	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	334d      	adds	r3, #77	@ 0x4d
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d13a      	bne.n	8004db0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	334d      	adds	r3, #77	@ 0x4d
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	334c      	adds	r3, #76	@ 0x4c
 8004d5e:	2202      	movs	r2, #2
 8004d60:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	331b      	adds	r3, #27
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	f040 80d1 	bne.w	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	331b      	adds	r3, #27
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	e0b5      	b.n	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334d      	adds	r3, #77	@ 0x4d
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d114      	bne.n	8004df0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	334d      	adds	r3, #77	@ 0x4d
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	334c      	adds	r3, #76	@ 0x4c
 8004dea:	2202      	movs	r2, #2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e095      	b.n	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	334d      	adds	r3, #77	@ 0x4d
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	d114      	bne.n	8004e30 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	334d      	adds	r3, #77	@ 0x4d
 8004e16:	2202      	movs	r2, #2
 8004e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	334c      	adds	r3, #76	@ 0x4c
 8004e2a:	2205      	movs	r2, #5
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e075      	b.n	8004f1c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	334d      	adds	r3, #77	@ 0x4d
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b07      	cmp	r3, #7
 8004e44:	d00a      	beq.n	8004e5c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	334d      	adds	r3, #77	@ 0x4d
 8004e56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	d170      	bne.n	8004f3e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	334d      	adds	r3, #77	@ 0x4d
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3344      	adds	r3, #68	@ 0x44
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4403      	add	r3, r0
 8004e90:	3344      	adds	r3, #68	@ 0x44
 8004e92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3344      	adds	r3, #68	@ 0x44
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d914      	bls.n	8004ed4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3344      	adds	r3, #68	@ 0x44
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	334c      	adds	r3, #76	@ 0x4c
 8004ece:	2204      	movs	r2, #4
 8004ed0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ed2:	e022      	b.n	8004f1a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	334c      	adds	r3, #76	@ 0x4c
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004efe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f1a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	334c      	adds	r3, #76	@ 0x4c
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f005 fa9a 	bl	800a46c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f38:	e002      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004f3e:	bf00      	nop
  }
}
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b08a      	sub	sp, #40	@ 0x28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	0c5b      	lsrs	r3, r3, #17
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f7a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d004      	beq.n	8004f8c <HCD_RXQLVL_IRQHandler+0x46>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	f000 80b6 	beq.w	80050f6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f8a:	e0b7      	b.n	80050fc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80b3 	beq.w	80050fa <HCD_RXQLVL_IRQHandler+0x1b4>
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	332c      	adds	r3, #44	@ 0x2c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80a7 	beq.w	80050fa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3338      	adds	r3, #56	@ 0x38
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	18d1      	adds	r1, r2, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4403      	add	r3, r0
 8004fd0:	3334      	adds	r3, #52	@ 0x34
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	f200 8083 	bhi.w	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	332c      	adds	r3, #44	@ 0x2c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f002 f8d1 	bl	800719c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4613      	mov	r3, r2
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	332c      	adds	r3, #44	@ 0x2c
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	18d1      	adds	r1, r2, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4613      	mov	r3, r2
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4403      	add	r3, r0
 800501e:	332c      	adds	r3, #44	@ 0x2c
 8005020:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3338      	adds	r3, #56	@ 0x38
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	18d1      	adds	r1, r2, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4613      	mov	r3, r2
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4403      	add	r3, r0
 8005046:	3338      	adds	r3, #56	@ 0x38
 8005048:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	0cdb      	lsrs	r3, r3, #19
 800505a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3328      	adds	r3, #40	@ 0x28
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4293      	cmp	r3, r2
 8005078:	d13f      	bne.n	80050fa <HCD_RXQLVL_IRQHandler+0x1b4>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03c      	beq.n	80050fa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005096:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800509e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ac:	461a      	mov	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4613      	mov	r3, r2
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	333c      	adds	r3, #60	@ 0x3c
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	f083 0301 	eor.w	r3, r3, #1
 80050c8:	b2d8      	uxtb	r0, r3
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	333c      	adds	r3, #60	@ 0x3c
 80050da:	4602      	mov	r2, r0
 80050dc:	701a      	strb	r2, [r3, #0]
      break;
 80050de:	e00c      	b.n	80050fa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	334c      	adds	r3, #76	@ 0x4c
 80050f0:	2204      	movs	r2, #4
 80050f2:	701a      	strb	r2, [r3, #0]
      break;
 80050f4:	e001      	b.n	80050fa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80050fa:	bf00      	nop
  }
}
 80050fc:	bf00      	nop
 80050fe:	3728      	adds	r7, #40	@ 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005130:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d10b      	bne.n	8005154 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f005 f974 	bl	800a434 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b08      	cmp	r3, #8
 800515c:	d132      	bne.n	80051c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d126      	bne.n	80051be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7a5b      	ldrb	r3, [r3, #9]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d113      	bne.n	80051a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800517e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005182:	d106      	bne.n	8005192 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2102      	movs	r1, #2
 800518a:	4618      	mov	r0, r3
 800518c:	f002 f996 	bl	80074bc <USB_InitFSLSPClkSel>
 8005190:	e011      	b.n	80051b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2101      	movs	r1, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f002 f98f 	bl	80074bc <USB_InitFSLSPClkSel>
 800519e:	e00a      	b.n	80051b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	79db      	ldrb	r3, [r3, #7]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051ae:	461a      	mov	r2, r3
 80051b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80051b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f005 f966 	bl	800a488 <HAL_HCD_PortEnabled_Callback>
 80051bc:	e002      	b.n	80051c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f005 f970 	bl	800a4a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d103      	bne.n	80051d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f043 0320 	orr.w	r3, r3, #32
 80051d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051dc:	461a      	mov	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6013      	str	r3, [r2, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e12b      	b.n	8005456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc fca6 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2224      	movs	r2, #36	@ 0x24
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0201 	bic.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800523e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800524e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005250:	f000 fd80 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8005254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4a81      	ldr	r2, [pc, #516]	@ (8005460 <HAL_I2C_Init+0x274>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d807      	bhi.n	8005270 <HAL_I2C_Init+0x84>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a80      	ldr	r2, [pc, #512]	@ (8005464 <HAL_I2C_Init+0x278>)
 8005264:	4293      	cmp	r3, r2
 8005266:	bf94      	ite	ls
 8005268:	2301      	movls	r3, #1
 800526a:	2300      	movhi	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e006      	b.n	800527e <HAL_I2C_Init+0x92>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a7d      	ldr	r2, [pc, #500]	@ (8005468 <HAL_I2C_Init+0x27c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	bf94      	ite	ls
 8005278:	2301      	movls	r3, #1
 800527a:	2300      	movhi	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0e7      	b.n	8005456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4a78      	ldr	r2, [pc, #480]	@ (800546c <HAL_I2C_Init+0x280>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	0c9b      	lsrs	r3, r3, #18
 8005290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005460 <HAL_I2C_Init+0x274>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d802      	bhi.n	80052c0 <HAL_I2C_Init+0xd4>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3301      	adds	r3, #1
 80052be:	e009      	b.n	80052d4 <HAL_I2C_Init+0xe8>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	4a69      	ldr	r2, [pc, #420]	@ (8005470 <HAL_I2C_Init+0x284>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	3301      	adds	r3, #1
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	430b      	orrs	r3, r1
 80052da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	495c      	ldr	r1, [pc, #368]	@ (8005460 <HAL_I2C_Init+0x274>)
 80052f0:	428b      	cmp	r3, r1
 80052f2:	d819      	bhi.n	8005328 <HAL_I2C_Init+0x13c>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1e59      	subs	r1, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005308:	400b      	ands	r3, r1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_I2C_Init+0x138>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1e59      	subs	r1, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	fbb1 f3f3 	udiv	r3, r1, r3
 800531c:	3301      	adds	r3, #1
 800531e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005322:	e051      	b.n	80053c8 <HAL_I2C_Init+0x1dc>
 8005324:	2304      	movs	r3, #4
 8005326:	e04f      	b.n	80053c8 <HAL_I2C_Init+0x1dc>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d111      	bne.n	8005354 <HAL_I2C_Init+0x168>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1e58      	subs	r0, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6859      	ldr	r1, [r3, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	440b      	add	r3, r1
 800533e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005342:	3301      	adds	r3, #1
 8005344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e012      	b.n	800537a <HAL_I2C_Init+0x18e>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1e58      	subs	r0, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6859      	ldr	r1, [r3, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	0099      	lsls	r1, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	fbb0 f3f3 	udiv	r3, r0, r3
 800536a:	3301      	adds	r3, #1
 800536c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_Init+0x196>
 800537e:	2301      	movs	r3, #1
 8005380:	e022      	b.n	80053c8 <HAL_I2C_Init+0x1dc>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10e      	bne.n	80053a8 <HAL_I2C_Init+0x1bc>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1e58      	subs	r0, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	460b      	mov	r3, r1
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	440b      	add	r3, r1
 8005398:	fbb0 f3f3 	udiv	r3, r0, r3
 800539c:	3301      	adds	r3, #1
 800539e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a6:	e00f      	b.n	80053c8 <HAL_I2C_Init+0x1dc>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1e58      	subs	r0, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	0099      	lsls	r1, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80053be:	3301      	adds	r3, #1
 80053c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	6809      	ldr	r1, [r1, #0]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80053f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6911      	ldr	r1, [r2, #16]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68d2      	ldr	r2, [r2, #12]
 8005402:	4311      	orrs	r1, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	430b      	orrs	r3, r1
 800540a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	000186a0 	.word	0x000186a0
 8005464:	001e847f 	.word	0x001e847f
 8005468:	003d08ff 	.word	0x003d08ff
 800546c:	431bde83 	.word	0x431bde83
 8005470:	10624dd3 	.word	0x10624dd3

08005474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e267      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d075      	beq.n	800557e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005492:	4b88      	ldr	r3, [pc, #544]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b04      	cmp	r3, #4
 800549c:	d00c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549e:	4b85      	ldr	r3, [pc, #532]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d112      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054aa:	4b82      	ldr	r3, [pc, #520]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054b6:	d10b      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	4b7e      	ldr	r3, [pc, #504]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05b      	beq.n	800557c <HAL_RCC_OscConfig+0x108>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d157      	bne.n	800557c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e242      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_OscConfig+0x74>
 80054da:	4b76      	ldr	r3, [pc, #472]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a75      	ldr	r2, [pc, #468]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <HAL_RCC_OscConfig+0xb0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0x98>
 80054f2:	4b70      	ldr	r3, [pc, #448]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6f      	ldr	r2, [pc, #444]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b6d      	ldr	r3, [pc, #436]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6c      	ldr	r2, [pc, #432]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0xb0>
 800550c:	4b69      	ldr	r3, [pc, #420]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a68      	ldr	r2, [pc, #416]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b66      	ldr	r3, [pc, #408]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a65      	ldr	r2, [pc, #404]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fc fdec 	bl	8002108 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fc fde8 	bl	8002108 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	@ 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e207      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b5b      	ldr	r3, [pc, #364]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0xc0>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fc fdd8 	bl	8002108 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800555c:	f7fc fdd4 	bl	8002108 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	@ 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e1f3      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	4b51      	ldr	r3, [pc, #324]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0xe8>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d063      	beq.n	8005652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800558a:	4b4a      	ldr	r3, [pc, #296]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005596:	4b47      	ldr	r3, [pc, #284]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d11c      	bne.n	80055dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a2:	4b44      	ldr	r3, [pc, #272]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	4b41      	ldr	r3, [pc, #260]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCC_OscConfig+0x152>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e1c7      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b3b      	ldr	r3, [pc, #236]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4937      	ldr	r1, [pc, #220]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	e03a      	b.n	8005652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <HAL_RCC_OscConfig+0x244>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fc fd8d 	bl	8002108 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fc fd89 	bl	8002108 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1a8      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	4b2b      	ldr	r3, [pc, #172]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4925      	ldr	r1, [pc, #148]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
 8005624:	e015      	b.n	8005652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <HAL_RCC_OscConfig+0x244>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc fd6c 	bl	8002108 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005634:	f7fc fd68 	bl	8002108 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e187      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d036      	beq.n	80056cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <HAL_RCC_OscConfig+0x248>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fc fd4c 	bl	8002108 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005674:	f7fc fd48 	bl	8002108 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e167      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <HAL_RCC_OscConfig+0x240>)
 8005688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x200>
 8005692:	e01b      	b.n	80056cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005694:	4b09      	ldr	r3, [pc, #36]	@ (80056bc <HAL_RCC_OscConfig+0x248>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569a:	f7fc fd35 	bl	8002108 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a0:	e00e      	b.n	80056c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a2:	f7fc fd31 	bl	8002108 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d907      	bls.n	80056c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e150      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	42470000 	.word	0x42470000
 80056bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c0:	4b88      	ldr	r3, [pc, #544]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ea      	bne.n	80056a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8097 	beq.w	8005808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056de:	4b81      	ldr	r3, [pc, #516]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10f      	bne.n	800570a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	4b7d      	ldr	r3, [pc, #500]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	4a7c      	ldr	r2, [pc, #496]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fa:	4b7a      	ldr	r3, [pc, #488]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570a:	4b77      	ldr	r3, [pc, #476]	@ (80058e8 <HAL_RCC_OscConfig+0x474>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d118      	bne.n	8005748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005716:	4b74      	ldr	r3, [pc, #464]	@ (80058e8 <HAL_RCC_OscConfig+0x474>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a73      	ldr	r2, [pc, #460]	@ (80058e8 <HAL_RCC_OscConfig+0x474>)
 800571c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005722:	f7fc fcf1 	bl	8002108 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572a:	f7fc fced 	bl	8002108 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e10c      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	4b6a      	ldr	r3, [pc, #424]	@ (80058e8 <HAL_RCC_OscConfig+0x474>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x2ea>
 8005750:	4b64      	ldr	r3, [pc, #400]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005754:	4a63      	ldr	r2, [pc, #396]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6713      	str	r3, [r2, #112]	@ 0x70
 800575c:	e01c      	b.n	8005798 <HAL_RCC_OscConfig+0x324>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b05      	cmp	r3, #5
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x30c>
 8005766:	4b5f      	ldr	r3, [pc, #380]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	4a5e      	ldr	r2, [pc, #376]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	@ 0x70
 8005772:	4b5c      	ldr	r3, [pc, #368]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005776:	4a5b      	ldr	r2, [pc, #364]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	@ 0x70
 800577e:	e00b      	b.n	8005798 <HAL_RCC_OscConfig+0x324>
 8005780:	4b58      	ldr	r3, [pc, #352]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005784:	4a57      	ldr	r2, [pc, #348]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	6713      	str	r3, [r2, #112]	@ 0x70
 800578c:	4b55      	ldr	r3, [pc, #340]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005790:	4a54      	ldr	r2, [pc, #336]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005792:	f023 0304 	bic.w	r3, r3, #4
 8005796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d015      	beq.n	80057cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fc fcb2 	bl	8002108 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	e00a      	b.n	80057be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fc fcae 	bl	8002108 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0cb      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	4b49      	ldr	r3, [pc, #292]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ee      	beq.n	80057a8 <HAL_RCC_OscConfig+0x334>
 80057ca:	e014      	b.n	80057f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057cc:	f7fc fc9c 	bl	8002108 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fc fc98 	bl	8002108 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0b5      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1ee      	bne.n	80057d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fc:	4b39      	ldr	r3, [pc, #228]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	4a38      	ldr	r2, [pc, #224]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80a1 	beq.w	8005954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005812:	4b34      	ldr	r3, [pc, #208]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b08      	cmp	r3, #8
 800581c:	d05c      	beq.n	80058d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d141      	bne.n	80058aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b31      	ldr	r3, [pc, #196]	@ (80058ec <HAL_RCC_OscConfig+0x478>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fc fc6c 	bl	8002108 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005834:	f7fc fc68 	bl	8002108 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e087      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	491b      	ldr	r1, [pc, #108]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 8005878:	4313      	orrs	r3, r2
 800587a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800587c:	4b1b      	ldr	r3, [pc, #108]	@ (80058ec <HAL_RCC_OscConfig+0x478>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005882:	f7fc fc41 	bl	8002108 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588a:	f7fc fc3d 	bl	8002108 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e05c      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589c:	4b11      	ldr	r3, [pc, #68]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x416>
 80058a8:	e054      	b.n	8005954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058aa:	4b10      	ldr	r3, [pc, #64]	@ (80058ec <HAL_RCC_OscConfig+0x478>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fc fc2a 	bl	8002108 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b8:	f7fc fc26 	bl	8002108 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e045      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_RCC_OscConfig+0x470>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f0      	bne.n	80058b8 <HAL_RCC_OscConfig+0x444>
 80058d6:	e03d      	b.n	8005954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e038      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40007000 	.word	0x40007000
 80058ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005960 <HAL_RCC_OscConfig+0x4ec>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d028      	beq.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d121      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d11a      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005920:	4013      	ands	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005928:	4293      	cmp	r3, r2
 800592a:	d111      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	3b01      	subs	r3, #1
 800593a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d107      	bne.n	8005950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800

08005964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0cc      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005978:	4b68      	ldr	r3, [pc, #416]	@ (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d90c      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b65      	ldr	r3, [pc, #404]	@ (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b63      	ldr	r3, [pc, #396]	@ (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0b8      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b8:	4b59      	ldr	r3, [pc, #356]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a58      	ldr	r2, [pc, #352]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d0:	4b53      	ldr	r3, [pc, #332]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a52      	ldr	r2, [pc, #328]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059dc:	4b50      	ldr	r3, [pc, #320]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	494d      	ldr	r1, [pc, #308]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d044      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b47      	ldr	r3, [pc, #284]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d119      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d107      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a22:	4b3f      	ldr	r3, [pc, #252]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e06f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a32:	4b3b      	ldr	r3, [pc, #236]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e067      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a42:	4b37      	ldr	r3, [pc, #220]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0203 	bic.w	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4934      	ldr	r1, [pc, #208]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a54:	f7fc fb58 	bl	8002108 <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5c:	f7fc fb54 	bl	8002108 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e04f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	4b2b      	ldr	r3, [pc, #172]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 020c 	and.w	r2, r3, #12
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1eb      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a84:	4b25      	ldr	r3, [pc, #148]	@ (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d20c      	bcs.n	8005aac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b22      	ldr	r3, [pc, #136]	@ (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b20      	ldr	r3, [pc, #128]	@ (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e032      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab8:	4b19      	ldr	r3, [pc, #100]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4916      	ldr	r1, [pc, #88]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad6:	4b12      	ldr	r3, [pc, #72]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	490e      	ldr	r1, [pc, #56]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aea:	f000 f821 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 8005aee:	4602      	mov	r2, r0
 8005af0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	490a      	ldr	r1, [pc, #40]	@ (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	5ccb      	ldrb	r3, [r1, r3]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	4a09      	ldr	r2, [pc, #36]	@ (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b06:	4b09      	ldr	r3, [pc, #36]	@ (8005b2c <HAL_RCC_ClockConfig+0x1c8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fc fab8 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023c00 	.word	0x40023c00
 8005b20:	40023800 	.word	0x40023800
 8005b24:	0800dd1c 	.word	0x0800dd1c
 8005b28:	20000040 	.word	0x20000040
 8005b2c:	20000044 	.word	0x20000044

08005b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b34:	b094      	sub	sp, #80	@ 0x50
 8005b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b48:	4b79      	ldr	r3, [pc, #484]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d00d      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x40>
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	f200 80e1 	bhi.w	8005d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0x34>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b62:	e0db      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b73      	ldr	r3, [pc, #460]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b68:	e0db      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b6a:	4b73      	ldr	r3, [pc, #460]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b6e:	e0d8      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b70:	4b6f      	ldr	r3, [pc, #444]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d063      	beq.n	8005c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b86:	4b6a      	ldr	r3, [pc, #424]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	f04f 0000 	mov.w	r0, #0
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	0159      	lsls	r1, r3, #5
 8005bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bb4:	0150      	lsls	r0, r2, #5
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4621      	mov	r1, r4
 8005bbc:	1a51      	subs	r1, r2, r1
 8005bbe:	6139      	str	r1, [r7, #16]
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	018b      	lsls	r3, r1, #6
 8005bd8:	4651      	mov	r1, sl
 8005bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bde:	4651      	mov	r1, sl
 8005be0:	018a      	lsls	r2, r1, #6
 8005be2:	4651      	mov	r1, sl
 8005be4:	ebb2 0801 	subs.w	r8, r2, r1
 8005be8:	4659      	mov	r1, fp
 8005bea:	eb63 0901 	sbc.w	r9, r3, r1
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c02:	4690      	mov	r8, r2
 8005c04:	4699      	mov	r9, r3
 8005c06:	4623      	mov	r3, r4
 8005c08:	eb18 0303 	adds.w	r3, r8, r3
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	462b      	mov	r3, r5
 8005c10:	eb49 0303 	adc.w	r3, r9, r3
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c22:	4629      	mov	r1, r5
 8005c24:	024b      	lsls	r3, r1, #9
 8005c26:	4621      	mov	r1, r4
 8005c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	024a      	lsls	r2, r1, #9
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c36:	2200      	movs	r2, #0
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c40:	f7fb f802 	bl	8000c48 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4613      	mov	r3, r2
 8005c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4c:	e058      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c4e:	4b38      	ldr	r3, [pc, #224]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	2200      	movs	r2, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	4611      	mov	r1, r2
 8005c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	2300      	movs	r3, #0
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c68:	4642      	mov	r2, r8
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	f04f 0000 	mov.w	r0, #0
 8005c70:	f04f 0100 	mov.w	r1, #0
 8005c74:	0159      	lsls	r1, r3, #5
 8005c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c7a:	0150      	lsls	r0, r2, #5
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4641      	mov	r1, r8
 8005c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c86:	4649      	mov	r1, r9
 8005c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	00eb      	lsls	r3, r5, #3
 8005cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb6:	00e2      	lsls	r2, r4, #3
 8005cb8:	4614      	mov	r4, r2
 8005cba:	461d      	mov	r5, r3
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	18e3      	adds	r3, r4, r3
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	eb45 0303 	adc.w	r3, r5, r3
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	028b      	lsls	r3, r1, #10
 8005cda:	4621      	mov	r1, r4
 8005cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	028a      	lsls	r2, r1, #10
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cea:	2200      	movs	r2, #0
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	61fa      	str	r2, [r7, #28]
 8005cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf4:	f7fa ffa8 	bl	8000c48 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d1a:	e002      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3750      	adds	r7, #80	@ 0x50
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	007a1200 	.word	0x007a1200

08005d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d40:	4b03      	ldr	r3, [pc, #12]	@ (8005d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d42:	681b      	ldr	r3, [r3, #0]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000040 	.word	0x20000040

08005d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d58:	f7ff fff0 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0a9b      	lsrs	r3, r3, #10
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4903      	ldr	r1, [pc, #12]	@ (8005d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40023800 	.word	0x40023800
 8005d78:	0800dd2c 	.word	0x0800dd2c

08005d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d80:	f7ff ffdc 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	0b5b      	lsrs	r3, r3, #13
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	4903      	ldr	r1, [pc, #12]	@ (8005da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d92:	5ccb      	ldrb	r3, [r1, r3]
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	0800dd2c 	.word	0x0800dd2c

08005da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e041      	b.n	8005e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb ff12 	bl	8001bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f000 fa88 	bl	80062f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e04e      	b.n	8005efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a23      	ldr	r2, [pc, #140]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e86:	d01d      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d111      	bne.n	8005ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d010      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e007      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40001800 	.word	0x40001800

08005f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0202 	mvn.w	r2, #2
 8005f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9a3 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8005f74:	e005      	b.n	8005f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f995 	bl	80062a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f9a6 	bl	80062ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0204 	mvn.w	r2, #4
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f97d 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f96f 	bl	80062a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f980 	bl	80062ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d020      	beq.n	8006020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01b      	beq.n	8006020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f957 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f949 	bl	80062a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f95a 	bl	80062ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	d020      	beq.n	800606c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0210 	mvn.w	r2, #16
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2208      	movs	r2, #8
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f931 	bl	80062ba <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f923 	bl	80062a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f934 	bl	80062ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f901 	bl	8006292 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00c      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 faee 	bl	8006690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f905 	bl	80062e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0220 	mvn.w	r2, #32
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fac0 	bl	800667c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIM_ConfigClockSource+0x1c>
 800611c:	2302      	movs	r3, #2
 800611e:	e0b4      	b.n	800628a <HAL_TIM_ConfigClockSource+0x186>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800613e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006158:	d03e      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0xd4>
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615e:	f200 8087 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006166:	f000 8086 	beq.w	8006276 <HAL_TIM_ConfigClockSource+0x172>
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616e:	d87f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b70      	cmp	r3, #112	@ 0x70
 8006172:	d01a      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xa6>
 8006174:	2b70      	cmp	r3, #112	@ 0x70
 8006176:	d87b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b60      	cmp	r3, #96	@ 0x60
 800617a:	d050      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x11a>
 800617c:	2b60      	cmp	r3, #96	@ 0x60
 800617e:	d877      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b50      	cmp	r3, #80	@ 0x50
 8006182:	d03c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0xfa>
 8006184:	2b50      	cmp	r3, #80	@ 0x50
 8006186:	d873      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	d058      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x13a>
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d86f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b30      	cmp	r3, #48	@ 0x30
 8006192:	d064      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b30      	cmp	r3, #48	@ 0x30
 8006196:	d86b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d060      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d867      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05c      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d05a      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 80061a8:	e062      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ba:	f000 f9c3 	bl	8006544 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	609a      	str	r2, [r3, #8]
      break;
 80061d6:	e04f      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e8:	f000 f9ac 	bl	8006544 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061fa:	609a      	str	r2, [r3, #8]
      break;
 80061fc:	e03c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	461a      	mov	r2, r3
 800620c:	f000 f920 	bl	8006450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2150      	movs	r1, #80	@ 0x50
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f979 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 800621c:	e02c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800622a:	461a      	mov	r2, r3
 800622c:	f000 f93f 	bl	80064ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2160      	movs	r1, #96	@ 0x60
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f969 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 800623c:	e01c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	461a      	mov	r2, r3
 800624c:	f000 f900 	bl	8006450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2140      	movs	r1, #64	@ 0x40
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f959 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 800625c:	e00c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f000 f950 	bl	800650e <TIM_ITRx_SetConfig>
      break;
 800626e:	e003      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e000      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a46      	ldr	r2, [pc, #280]	@ (8006424 <TIM_Base_SetConfig+0x12c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	d00f      	beq.n	8006338 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a43      	ldr	r2, [pc, #268]	@ (8006428 <TIM_Base_SetConfig+0x130>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00b      	beq.n	8006338 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a42      	ldr	r2, [pc, #264]	@ (800642c <TIM_Base_SetConfig+0x134>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d007      	beq.n	8006338 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a41      	ldr	r2, [pc, #260]	@ (8006430 <TIM_Base_SetConfig+0x138>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a40      	ldr	r2, [pc, #256]	@ (8006434 <TIM_Base_SetConfig+0x13c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d108      	bne.n	800634a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a35      	ldr	r2, [pc, #212]	@ (8006424 <TIM_Base_SetConfig+0x12c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d02b      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006358:	d027      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a32      	ldr	r2, [pc, #200]	@ (8006428 <TIM_Base_SetConfig+0x130>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d023      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a31      	ldr	r2, [pc, #196]	@ (800642c <TIM_Base_SetConfig+0x134>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01f      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a30      	ldr	r2, [pc, #192]	@ (8006430 <TIM_Base_SetConfig+0x138>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01b      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2f      	ldr	r2, [pc, #188]	@ (8006434 <TIM_Base_SetConfig+0x13c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d017      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2e      	ldr	r2, [pc, #184]	@ (8006438 <TIM_Base_SetConfig+0x140>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2d      	ldr	r2, [pc, #180]	@ (800643c <TIM_Base_SetConfig+0x144>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2c      	ldr	r2, [pc, #176]	@ (8006440 <TIM_Base_SetConfig+0x148>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2b      	ldr	r2, [pc, #172]	@ (8006444 <TIM_Base_SetConfig+0x14c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <TIM_Base_SetConfig+0x150>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a29      	ldr	r2, [pc, #164]	@ (800644c <TIM_Base_SetConfig+0x154>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d108      	bne.n	80063bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a10      	ldr	r2, [pc, #64]	@ (8006424 <TIM_Base_SetConfig+0x12c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_Base_SetConfig+0xf8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <TIM_Base_SetConfig+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d103      	bne.n	80063f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d105      	bne.n	8006416 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f023 0201 	bic.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]
  }
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	40010400 	.word	0x40010400
 8006438:	40014000 	.word	0x40014000
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800
 8006444:	40001800 	.word	0x40001800
 8006448:	40001c00 	.word	0x40001c00
 800644c:	40002000 	.word	0x40002000

08006450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800647a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 030a 	bic.w	r3, r3, #10
 800648c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b087      	sub	sp, #28
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0210 	bic.w	r2, r3, #16
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	031b      	lsls	r3, r3, #12
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	f043 0307 	orr.w	r3, r3, #7
 8006530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	609a      	str	r2, [r3, #8]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800655e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	021a      	lsls	r2, r3, #8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	431a      	orrs	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4313      	orrs	r3, r2
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006598:	2302      	movs	r3, #2
 800659a:	e05a      	b.n	8006652 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a21      	ldr	r2, [pc, #132]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d022      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e8:	d01d      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d018      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00e      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a17      	ldr	r2, [pc, #92]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d004      	beq.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d10c      	bne.n	8006640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800662c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	4313      	orrs	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010000 	.word	0x40010000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40010400 	.word	0x40010400
 8006674:	40014000 	.word	0x40014000
 8006678:	40001800 	.word	0x40001800

0800667c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e042      	b.n	800673c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb fad8 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	@ 0x24
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f973 	bl	80069d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800670c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800671c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	@ 0x28
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b20      	cmp	r3, #32
 8006762:	d175      	bne.n	8006850 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_UART_Transmit+0x2c>
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e06e      	b.n	8006852 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2221      	movs	r2, #33	@ 0x21
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006782:	f7fb fcc1 	bl	8002108 <HAL_GetTick>
 8006786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679c:	d108      	bne.n	80067b0 <HAL_UART_Transmit+0x6c>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e003      	b.n	80067b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b8:	e02e      	b.n	8006818 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2180      	movs	r1, #128	@ 0x80
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f848 	bl	800685a <UART_WaitOnFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e03a      	b.n	8006852 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	3302      	adds	r3, #2
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	e007      	b.n	800680a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	3301      	adds	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1cb      	bne.n	80067ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2200      	movs	r2, #0
 800682a:	2140      	movs	r1, #64	@ 0x40
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f814 	bl	800685a <UART_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e006      	b.n	8006852 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	e000      	b.n	8006852 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3720      	adds	r7, #32
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	603b      	str	r3, [r7, #0]
 8006866:	4613      	mov	r3, r2
 8006868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686a:	e03b      	b.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d037      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006874:	f7fb fc48 	bl	8002108 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	6a3a      	ldr	r2, [r7, #32]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <UART_WaitOnFlagUntilTimeout+0x30>
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e03a      	b.n	8006904 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d023      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b80      	cmp	r3, #128	@ 0x80
 80068a0:	d020      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b40      	cmp	r3, #64	@ 0x40
 80068a6:	d01d      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d116      	bne.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f81d 	bl	800690c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2208      	movs	r2, #8
 80068d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e00f      	b.n	8006904 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4013      	ands	r3, r2
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d0b4      	beq.n	800686c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b095      	sub	sp, #84	@ 0x54
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800692a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006934:	643a      	str	r2, [r7, #64]	@ 0x40
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800693a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	61fb      	str	r3, [r7, #28]
   return(result);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800696a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e5      	bne.n	8006948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60bb      	str	r3, [r7, #8]
   return(result);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	647b      	str	r3, [r7, #68]	@ 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069c6:	bf00      	nop
 80069c8:	3754      	adds	r7, #84	@ 0x54
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b0c0      	sub	sp, #256	@ 0x100
 80069da:	af00      	add	r7, sp, #0
 80069dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	68d9      	ldr	r1, [r3, #12]
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	ea40 0301 	orr.w	r3, r0, r1
 80069fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a2c:	f021 010c 	bic.w	r1, r1, #12
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4e:	6999      	ldr	r1, [r3, #24]
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	ea40 0301 	orr.w	r3, r0, r1
 8006a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b8f      	ldr	r3, [pc, #572]	@ (8006ca0 <UART_SetConfig+0x2cc>)
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d005      	beq.n	8006a74 <UART_SetConfig+0xa0>
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ca4 <UART_SetConfig+0x2d0>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d104      	bne.n	8006a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7ff f982 	bl	8005d7c <HAL_RCC_GetPCLK2Freq>
 8006a78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a7c:	e003      	b.n	8006a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f7ff f969 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8006a82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a90:	f040 810c 	bne.w	8006cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	1891      	adds	r1, r2, r2
 8006aac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aae:	415b      	adcs	r3, r3
 8006ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	eb12 0801 	adds.w	r8, r2, r1
 8006abc:	4629      	mov	r1, r5
 8006abe:	eb43 0901 	adc.w	r9, r3, r1
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad6:	4690      	mov	r8, r2
 8006ad8:	4699      	mov	r9, r3
 8006ada:	4623      	mov	r3, r4
 8006adc:	eb18 0303 	adds.w	r3, r8, r3
 8006ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	eb49 0303 	adc.w	r3, r9, r3
 8006aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006afa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b02:	460b      	mov	r3, r1
 8006b04:	18db      	adds	r3, r3, r3
 8006b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b08:	4613      	mov	r3, r2
 8006b0a:	eb42 0303 	adc.w	r3, r2, r3
 8006b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b18:	f7fa f896 	bl	8000c48 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4b61      	ldr	r3, [pc, #388]	@ (8006ca8 <UART_SetConfig+0x2d4>)
 8006b22:	fba3 2302 	umull	r2, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	011c      	lsls	r4, r3, #4
 8006b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	1891      	adds	r1, r2, r2
 8006b42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b44:	415b      	adcs	r3, r3
 8006b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b52:	4649      	mov	r1, r9
 8006b54:	eb43 0b01 	adc.w	fp, r3, r1
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b6c:	4692      	mov	sl, r2
 8006b6e:	469b      	mov	fp, r3
 8006b70:	4643      	mov	r3, r8
 8006b72:	eb1a 0303 	adds.w	r3, sl, r3
 8006b76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	18db      	adds	r3, r3, r3
 8006b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	eb42 0303 	adc.w	r3, r2, r3
 8006ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bae:	f7fa f84b 	bl	8000c48 <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca8 <UART_SetConfig+0x2d4>)
 8006bba:	fba3 2301 	umull	r2, r3, r3, r1
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	2264      	movs	r2, #100	@ 0x64
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	1acb      	subs	r3, r1, r3
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bce:	4b36      	ldr	r3, [pc, #216]	@ (8006ca8 <UART_SetConfig+0x2d4>)
 8006bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bdc:	441c      	add	r4, r3
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006be8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c34:	464b      	mov	r3, r9
 8006c36:	460a      	mov	r2, r1
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c54:	460b      	mov	r3, r1
 8006c56:	18db      	adds	r3, r3, r3
 8006c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	eb42 0303 	adc.w	r3, r2, r3
 8006c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c6a:	f7f9 ffed 	bl	8000c48 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <UART_SetConfig+0x2d4>)
 8006c74:	fba3 1302 	umull	r1, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	2164      	movs	r1, #100	@ 0x64
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	3332      	adds	r3, #50	@ 0x32
 8006c86:	4a08      	ldr	r2, [pc, #32]	@ (8006ca8 <UART_SetConfig+0x2d4>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	f003 0207 	and.w	r2, r3, #7
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4422      	add	r2, r4
 8006c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c9c:	e106      	b.n	8006eac <UART_SetConfig+0x4d8>
 8006c9e:	bf00      	nop
 8006ca0:	40011000 	.word	0x40011000
 8006ca4:	40011400 	.word	0x40011400
 8006ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	6239      	str	r1, [r7, #32]
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cce:	4641      	mov	r1, r8
 8006cd0:	1854      	adds	r4, r2, r1
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	eb43 0501 	adc.w	r5, r3, r1
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	00eb      	lsls	r3, r5, #3
 8006ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ce6:	00e2      	lsls	r2, r4, #3
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	4643      	mov	r3, r8
 8006cee:	18e3      	adds	r3, r4, r3
 8006cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	eb45 0303 	adc.w	r3, r5, r3
 8006cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	008b      	lsls	r3, r1, #2
 8006d1e:	4621      	mov	r1, r4
 8006d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d24:	4621      	mov	r1, r4
 8006d26:	008a      	lsls	r2, r1, #2
 8006d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d2c:	f7f9 ff8c 	bl	8000c48 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b60      	ldr	r3, [pc, #384]	@ (8006eb8 <UART_SetConfig+0x4e4>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011c      	lsls	r4, r3, #4
 8006d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	61b9      	str	r1, [r7, #24]
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d60:	4641      	mov	r1, r8
 8006d62:	1851      	adds	r1, r2, r1
 8006d64:	6139      	str	r1, [r7, #16]
 8006d66:	4649      	mov	r1, r9
 8006d68:	414b      	adcs	r3, r1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d78:	4659      	mov	r1, fp
 8006d7a:	00cb      	lsls	r3, r1, #3
 8006d7c:	4651      	mov	r1, sl
 8006d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d82:	4651      	mov	r1, sl
 8006d84:	00ca      	lsls	r2, r1, #3
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	189b      	adds	r3, r3, r2
 8006d90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d94:	464b      	mov	r3, r9
 8006d96:	460a      	mov	r2, r1
 8006d98:	eb42 0303 	adc.w	r3, r2, r3
 8006d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006daa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006db8:	4649      	mov	r1, r9
 8006dba:	008b      	lsls	r3, r1, #2
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	008a      	lsls	r2, r1, #2
 8006dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006dca:	f7f9 ff3d 	bl	8000c48 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4b38      	ldr	r3, [pc, #224]	@ (8006eb8 <UART_SetConfig+0x4e4>)
 8006dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2264      	movs	r2, #100	@ 0x64
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	1acb      	subs	r3, r1, r3
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	3332      	adds	r3, #50	@ 0x32
 8006de8:	4a33      	ldr	r2, [pc, #204]	@ (8006eb8 <UART_SetConfig+0x4e4>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006df4:	441c      	add	r4, r3
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e14:	4641      	mov	r1, r8
 8006e16:	1851      	adds	r1, r2, r1
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	00cb      	lsls	r3, r1, #3
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e36:	4651      	mov	r1, sl
 8006e38:	00ca      	lsls	r2, r1, #3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4642      	mov	r2, r8
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e46:	464b      	mov	r3, r9
 8006e48:	460a      	mov	r2, r1
 8006e4a:	eb42 0303 	adc.w	r3, r2, r3
 8006e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e68:	4649      	mov	r1, r9
 8006e6a:	008b      	lsls	r3, r1, #2
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e72:	4641      	mov	r1, r8
 8006e74:	008a      	lsls	r2, r1, #2
 8006e76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e7a:	f7f9 fee5 	bl	8000c48 <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <UART_SetConfig+0x4e4>)
 8006e84:	fba3 1302 	umull	r1, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	2164      	movs	r1, #100	@ 0x64
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	3332      	adds	r3, #50	@ 0x32
 8006e96:	4a08      	ldr	r2, [pc, #32]	@ (8006eb8 <UART_SetConfig+0x4e4>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	f003 020f 	and.w	r2, r3, #15
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4422      	add	r2, r4
 8006eaa:	609a      	str	r2, [r3, #8]
}
 8006eac:	bf00      	nop
 8006eae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb8:	51eb851f 	.word	0x51eb851f

08006ebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	f107 001c 	add.w	r0, r7, #28
 8006eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ece:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d123      	bne.n	8006f1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006efe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d105      	bne.n	8006f12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9dc 	bl	80072d0 <USB_CoreReset>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
 8006f1c:	e01b      	b.n	8006f56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f9d0 	bl	80072d0 <USB_CoreReset>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d106      	bne.n	8006f4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f48:	e005      	b.n	8006f56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f56:	7fbb      	ldrb	r3, [r7, #30]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d10b      	bne.n	8006f74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f043 0206 	orr.w	r2, r3, #6
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f043 0220 	orr.w	r2, r3, #32
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f80:	b004      	add	sp, #16
 8006f82:	4770      	bx	lr

08006f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f043 0201 	orr.w	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d115      	bne.n	8007016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ff6:	200a      	movs	r0, #10
 8006ff8:	f7fb f892 	bl	8002120 <HAL_Delay>
      ms += 10U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	330a      	adds	r3, #10
 8007000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f956 	bl	80072b4 <USB_GetMode>
 8007008:	4603      	mov	r3, r0
 800700a:	2b01      	cmp	r3, #1
 800700c:	d01e      	beq.n	800704c <USB_SetCurrentMode+0x84>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2bc7      	cmp	r3, #199	@ 0xc7
 8007012:	d9f0      	bls.n	8006ff6 <USB_SetCurrentMode+0x2e>
 8007014:	e01a      	b.n	800704c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d115      	bne.n	8007048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007028:	200a      	movs	r0, #10
 800702a:	f7fb f879 	bl	8002120 <HAL_Delay>
      ms += 10U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	330a      	adds	r3, #10
 8007032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f93d 	bl	80072b4 <USB_GetMode>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <USB_SetCurrentMode+0x84>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2bc7      	cmp	r3, #199	@ 0xc7
 8007044:	d9f0      	bls.n	8007028 <USB_SetCurrentMode+0x60>
 8007046:	e001      	b.n	800704c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e005      	b.n	8007058 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007050:	d101      	bne.n	8007056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3301      	adds	r3, #1
 8007072:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800707a:	d901      	bls.n	8007080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e01b      	b.n	80070b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	daf2      	bge.n	800706e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	019b      	lsls	r3, r3, #6
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3301      	adds	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070a4:	d901      	bls.n	80070aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e006      	b.n	80070b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d0f0      	beq.n	8007098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070dc:	d901      	bls.n	80070e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e018      	b.n	8007114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	daf2      	bge.n	80070d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2210      	movs	r2, #16
 80070f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007100:	d901      	bls.n	8007106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e006      	b.n	8007114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b10      	cmp	r3, #16
 8007110:	d0f0      	beq.n	80070f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	@ 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	4611      	mov	r1, r2
 800712c:	461a      	mov	r2, r3
 800712e:	460b      	mov	r3, r1
 8007130:	71fb      	strb	r3, [r7, #7]
 8007132:	4613      	mov	r3, r2
 8007134:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800713e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d123      	bne.n	800718e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007146:	88bb      	ldrh	r3, [r7, #4]
 8007148:	3303      	adds	r3, #3
 800714a:	089b      	lsrs	r3, r3, #2
 800714c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	e018      	b.n	8007186 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	031a      	lsls	r2, r3, #12
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4413      	add	r3, r2
 800715c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007160:	461a      	mov	r2, r3
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	3301      	adds	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	3301      	adds	r3, #1
 800717e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	3301      	adds	r3, #1
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	429a      	cmp	r2, r3
 800718c:	d3e2      	bcc.n	8007154 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3724      	adds	r7, #36	@ 0x24
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800719c:	b480      	push	{r7}
 800719e:	b08b      	sub	sp, #44	@ 0x2c
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	089b      	lsrs	r3, r3, #2
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071c2:	2300      	movs	r3, #0
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	e014      	b.n	80071f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	3301      	adds	r3, #1
 80071d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	3301      	adds	r3, #1
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	3301      	adds	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	3301      	adds	r3, #1
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	3301      	adds	r3, #1
 80071f0:	623b      	str	r3, [r7, #32]
 80071f2:	6a3a      	ldr	r2, [r7, #32]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d3e6      	bcc.n	80071c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071fa:	8bfb      	ldrh	r3, [r7, #30]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800720a:	461a      	mov	r2, r3
 800720c:	f107 0310 	add.w	r3, r7, #16
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
 8007220:	b2da      	uxtb	r2, r3
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	701a      	strb	r2, [r3, #0]
      i++;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	3301      	adds	r3, #1
 800722a:	623b      	str	r3, [r7, #32]
      pDest++;
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	3301      	adds	r3, #1
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007232:	8bfb      	ldrh	r3, [r7, #30]
 8007234:	3b01      	subs	r3, #1
 8007236:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007238:	8bfb      	ldrh	r3, [r7, #30]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1ea      	bne.n	8007214 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007240:	4618      	mov	r0, r3
 8007242:	372c      	adds	r7, #44	@ 0x2c
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4013      	ands	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007264:	68fb      	ldr	r3, [r7, #12]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	4013      	ands	r3, r2
 80072a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072a6:	68bb      	ldr	r3, [r7, #8]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	f003 0301 	and.w	r3, r3, #1
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072e8:	d901      	bls.n	80072ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e01b      	b.n	8007326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	daf2      	bge.n	80072dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f043 0201 	orr.w	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007312:	d901      	bls.n	8007318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e006      	b.n	8007326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d0f0      	beq.n	8007306 <USB_CoreReset+0x36>

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007334:	b084      	sub	sp, #16
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007354:	461a      	mov	r2, r3
 8007356:	2300      	movs	r3, #0
 8007358:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d119      	bne.n	80073be <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800738a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800738e:	2b01      	cmp	r3, #1
 8007390:	d10a      	bne.n	80073a8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073a0:	f043 0304 	orr.w	r3, r3, #4
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e014      	b.n	80073d2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073b6:	f023 0304 	bic.w	r3, r3, #4
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	e009      	b.n	80073d2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073cc:	f023 0304 	bic.w	r3, r3, #4
 80073d0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073d2:	2110      	movs	r1, #16
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff fe43 	bl	8007060 <USB_FlushTxFifo>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff fe6d 	bl	80070c4 <USB_FlushRxFifo>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	e015      	b.n	8007426 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007406:	461a      	mov	r2, r3
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741a:	461a      	mov	r2, r3
 800741c:	2300      	movs	r3, #0
 800741e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	3301      	adds	r3, #1
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800742a:	461a      	mov	r2, r3
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4293      	cmp	r3, r2
 8007430:	d3e3      	bcc.n	80073fa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <USB_HostInit+0x170>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d10b      	bne.n	8007460 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800744e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a15      	ldr	r2, [pc, #84]	@ (80074a8 <USB_HostInit+0x174>)
 8007454:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <USB_HostInit+0x178>)
 800745a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800745e:	e009      	b.n	8007474 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2280      	movs	r2, #128	@ 0x80
 8007464:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a11      	ldr	r2, [pc, #68]	@ (80074b0 <USB_HostInit+0x17c>)
 800746a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a11      	ldr	r2, [pc, #68]	@ (80074b4 <USB_HostInit+0x180>)
 8007470:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007474:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007478:	2b00      	cmp	r3, #0
 800747a:	d105      	bne.n	8007488 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f043 0210 	orr.w	r2, r3, #16
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699a      	ldr	r2, [r3, #24]
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <USB_HostInit+0x184>)
 800748e:	4313      	orrs	r3, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074a0:	b004      	add	sp, #16
 80074a2:	4770      	bx	lr
 80074a4:	40040000 	.word	0x40040000
 80074a8:	01000200 	.word	0x01000200
 80074ac:	00e00300 	.word	0x00e00300
 80074b0:	00600080 	.word	0x00600080
 80074b4:	004000e0 	.word	0x004000e0
 80074b8:	a3200008 	.word	0xa3200008

080074bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074f4:	4313      	orrs	r3, r2
 80074f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d107      	bne.n	800750e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007504:	461a      	mov	r2, r3
 8007506:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800750a:	6053      	str	r3, [r2, #4]
 800750c:	e00c      	b.n	8007528 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d107      	bne.n	8007524 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800751a:	461a      	mov	r2, r3
 800751c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007520:	6053      	str	r3, [r2, #4]
 8007522:	e001      	b.n	8007528 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007556:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007564:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007566:	2064      	movs	r0, #100	@ 0x64
 8007568:	f7fa fdda 	bl	8002120 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007578:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800757a:	200a      	movs	r0, #10
 800757c:	f7fa fdd0 	bl	8002120 <HAL_Delay>

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <USB_DriveVbus+0x44>
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d106      	bne.n	80075ce <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075cc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d8:	d109      	bne.n	80075ee <USB_DriveVbus+0x64>
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d106      	bne.n	80075ee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075ec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	0c5b      	lsrs	r3, r3, #17
 800761a:	f003 0303 	and.w	r3, r3, #3
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	b29b      	uxth	r3, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4603      	mov	r3, r0
 800765c:	70fb      	strb	r3, [r7, #3]
 800765e:	460b      	mov	r3, r1
 8007660:	70bb      	strb	r3, [r7, #2]
 8007662:	4613      	mov	r3, r2
 8007664:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800767a:	461a      	mov	r2, r3
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007682:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007686:	2b03      	cmp	r3, #3
 8007688:	d87c      	bhi.n	8007784 <USB_HC_Init+0x138>
 800768a:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <USB_HC_Init+0x44>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a1 	.word	0x080076a1
 8007694:	08007747 	.word	0x08007747
 8007698:	080076a1 	.word	0x080076a1
 800769c:	08007709 	.word	0x08007709
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ac:	461a      	mov	r2, r3
 80076ae:	f240 439d 	movw	r3, #1181	@ 0x49d
 80076b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80076b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da10      	bge.n	80076de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	78fa      	ldrb	r2, [r7, #3]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076da:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80076dc:	e055      	b.n	800778a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a6f      	ldr	r2, [pc, #444]	@ (80078a0 <USB_HC_Init+0x254>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d151      	bne.n	800778a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007700:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007704:	60d3      	str	r3, [r2, #12]
      break;
 8007706:	e040      	b.n	800778a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007714:	461a      	mov	r2, r3
 8007716:	f240 639d 	movw	r3, #1693	@ 0x69d
 800771a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800771c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da34      	bge.n	800778e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	440a      	add	r2, r1
 800773a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800773e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007742:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007744:	e023      	b.n	800778e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	4413      	add	r3, r2
 800774e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007752:	461a      	mov	r2, r3
 8007754:	f240 2325 	movw	r3, #549	@ 0x225
 8007758:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800775a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800775e:	2b00      	cmp	r3, #0
 8007760:	da17      	bge.n	8007792 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	4413      	add	r3, r2
 800776a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	440a      	add	r2, r1
 8007778:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800777c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007780:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007782:	e006      	b.n	8007792 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	77fb      	strb	r3, [r7, #31]
      break;
 8007788:	e004      	b.n	8007794 <USB_HC_Init+0x148>
      break;
 800778a:	bf00      	nop
 800778c:	e002      	b.n	8007794 <USB_HC_Init+0x148>
      break;
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <USB_HC_Init+0x148>
      break;
 8007792:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077c0:	f043 0302 	orr.w	r3, r3, #2
 80077c4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	6939      	ldr	r1, [r7, #16]
 80077dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80077e0:	4313      	orrs	r3, r2
 80077e2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80077f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da03      	bge.n	8007800 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80077f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	e001      	b.n	8007804 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fef9 	bl	80075fc <USB_GetHostSpeed>
 800780a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800780c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007810:	2b02      	cmp	r3, #2
 8007812:	d106      	bne.n	8007822 <USB_HC_Init+0x1d6>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d003      	beq.n	8007822 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800781a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e001      	b.n	8007826 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007826:	787b      	ldrb	r3, [r7, #1]
 8007828:	059b      	lsls	r3, r3, #22
 800782a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800782e:	78bb      	ldrb	r3, [r7, #2]
 8007830:	02db      	lsls	r3, r3, #11
 8007832:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007836:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007838:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800783c:	049b      	lsls	r3, r3, #18
 800783e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007842:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007844:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007846:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800784a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	431a      	orrs	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	440a      	add	r2, r1
 800785c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007864:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007866:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800786a:	2b03      	cmp	r3, #3
 800786c:	d003      	beq.n	8007876 <USB_HC_Init+0x22a>
 800786e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007872:	2b01      	cmp	r3, #1
 8007874:	d10f      	bne.n	8007896 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	440a      	add	r2, r1
 800788c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007890:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007894:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007896:	7ffb      	ldrb	r3, [r7, #31]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40040000 	.word	0x40040000

080078a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08c      	sub	sp, #48	@ 0x30
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80078bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078c0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4a5d      	ldr	r2, [pc, #372]	@ (8007a3c <USB_HC_StartXfer+0x198>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d12f      	bne.n	800792a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d11c      	bne.n	800790a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	7c9b      	ldrb	r3, [r3, #18]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <USB_HC_StartXfer+0x3c>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	7c9b      	ldrb	r3, [r3, #18]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d124      	bne.n	800792a <USB_HC_StartXfer+0x86>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	799b      	ldrb	r3, [r3, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d120      	bne.n	800792a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007906:	60d3      	str	r3, [r2, #12]
 8007908:	e00f      	b.n	800792a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	791b      	ldrb	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10b      	bne.n	800792a <USB_HC_StartXfer+0x86>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	795b      	ldrb	r3, [r3, #5]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d107      	bne.n	800792a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fb6b 	bl	8007ffc <USB_DoPing>
        return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e232      	b.n	8007d90 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	799b      	ldrb	r3, [r3, #6]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d158      	bne.n	80079e4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007932:	2301      	movs	r3, #1
 8007934:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800793e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	8a92      	ldrh	r2, [r2, #20]
 8007944:	fb03 f202 	mul.w	r2, r3, r2
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	61da      	str	r2, [r3, #28]
 800794c:	e07c      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	7c9b      	ldrb	r3, [r3, #18]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d130      	bne.n	80079b8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	2bbc      	cmp	r3, #188	@ 0xbc
 800795c:	d918      	bls.n	8007990 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	8a9b      	ldrh	r3, [r3, #20]
 8007962:	461a      	mov	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	69da      	ldr	r2, [r3, #28]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d003      	beq.n	8007980 <USB_HC_StartXfer+0xdc>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d103      	bne.n	8007988 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2202      	movs	r2, #2
 8007984:	60da      	str	r2, [r3, #12]
 8007986:	e05f      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2201      	movs	r2, #1
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	e05b      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d007      	beq.n	80079b0 <USB_HC_StartXfer+0x10c>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d003      	beq.n	80079b0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2204      	movs	r2, #4
 80079ac:	60da      	str	r2, [r3, #12]
 80079ae:	e04b      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2203      	movs	r2, #3
 80079b4:	60da      	str	r2, [r3, #12]
 80079b6:	e047      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d10d      	bne.n	80079da <USB_HC_StartXfer+0x136>
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	8a92      	ldrh	r2, [r2, #20]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d907      	bls.n	80079da <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	8a92      	ldrh	r2, [r2, #20]
 80079d0:	fb03 f202 	mul.w	r2, r3, r2
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	61da      	str	r2, [r3, #28]
 80079d8:	e036      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6a1a      	ldr	r2, [r3, #32]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	61da      	str	r2, [r3, #28]
 80079e2:	e031      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d018      	beq.n	8007a1e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	8a92      	ldrh	r2, [r2, #20]
 80079f4:	4413      	add	r3, r2
 80079f6:	3b01      	subs	r3, #1
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	8a92      	ldrh	r2, [r2, #20]
 80079fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a00:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007a02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a04:	8b7b      	ldrh	r3, [r7, #26]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d90b      	bls.n	8007a22 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007a0a:	8b7b      	ldrh	r3, [r7, #26]
 8007a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	8a92      	ldrh	r2, [r2, #20]
 8007a14:	fb03 f202 	mul.w	r2, r3, r2
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	61da      	str	r2, [r3, #28]
 8007a1c:	e001      	b.n	8007a22 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	78db      	ldrb	r3, [r3, #3]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	8a92      	ldrh	r2, [r2, #20]
 8007a30:	fb03 f202 	mul.w	r2, r3, r2
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	61da      	str	r2, [r3, #28]
 8007a38:	e006      	b.n	8007a48 <USB_HC_StartXfer+0x1a4>
 8007a3a:	bf00      	nop
 8007a3c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6a1a      	ldr	r2, [r3, #32]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a52:	04d9      	lsls	r1, r3, #19
 8007a54:	4ba3      	ldr	r3, [pc, #652]	@ (8007ce4 <USB_HC_StartXfer+0x440>)
 8007a56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	7d9b      	ldrb	r3, [r3, #22]
 8007a5e:	075b      	lsls	r3, r3, #29
 8007a60:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	0148      	lsls	r0, r1, #5
 8007a68:	6a39      	ldr	r1, [r7, #32]
 8007a6a:	4401      	add	r1, r0
 8007a6c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6999      	ldr	r1, [r3, #24]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf0c      	ite	eq
 8007a9e:	2301      	moveq	r3, #1
 8007aa0:	2300      	movne	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	6a3a      	ldr	r2, [r7, #32]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ac0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ac4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	7e7b      	ldrb	r3, [r7, #25]
 8007ad6:	075b      	lsls	r3, r3, #29
 8007ad8:	69f9      	ldr	r1, [r7, #28]
 8007ada:	0148      	lsls	r0, r1, #5
 8007adc:	6a39      	ldr	r1, [r7, #32]
 8007ade:	4401      	add	r1, r0
 8007ae0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	799b      	ldrb	r3, [r3, #6]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	f040 80c3 	bne.w	8007c78 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	7c5b      	ldrb	r3, [r3, #17]
 8007af6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007afc:	4313      	orrs	r3, r2
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	6a3a      	ldr	r2, [r7, #32]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b0e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	6a3a      	ldr	r2, [r7, #32]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b2a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	79db      	ldrb	r3, [r3, #7]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d123      	bne.n	8007b80 <USB_HC_StartXfer+0x2dc>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11f      	bne.n	8007b80 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	6a3a      	ldr	r2, [r7, #32]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	6a3a      	ldr	r2, [r7, #32]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	7c9b      	ldrb	r3, [r3, #18]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d003      	beq.n	8007b90 <USB_HC_StartXfer+0x2ec>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	7c9b      	ldrb	r3, [r3, #18]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d117      	bne.n	8007bc0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d113      	bne.n	8007bc0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	78db      	ldrb	r3, [r3, #3]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10f      	bne.n	8007bc0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	6a3a      	ldr	r2, [r7, #32]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	7c9b      	ldrb	r3, [r3, #18]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d162      	bne.n	8007c8e <USB_HC_StartXfer+0x3ea>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	78db      	ldrb	r3, [r3, #3]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d15e      	bne.n	8007c8e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d858      	bhi.n	8007c8c <USB_HC_StartXfer+0x3e8>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <USB_HC_StartXfer+0x33c>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007c13 	.word	0x08007c13
 8007be8:	08007c35 	.word	0x08007c35
 8007bec:	08007c57 	.word	0x08007c57
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	6a3a      	ldr	r2, [r7, #32]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c0e:	6053      	str	r3, [r2, #4]
          break;
 8007c10:	e03d      	b.n	8007c8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c2c:	f043 030e 	orr.w	r3, r3, #14
 8007c30:	6053      	str	r3, [r2, #4]
          break;
 8007c32:	e02c      	b.n	8007c8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	6a3a      	ldr	r2, [r7, #32]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c52:	6053      	str	r3, [r2, #4]
          break;
 8007c54:	e01b      	b.n	8007c8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	0151      	lsls	r1, r2, #5
 8007c68:	6a3a      	ldr	r2, [r7, #32]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c74:	6053      	str	r3, [r2, #4]
          break;
 8007c76:	e00a      	b.n	8007c8e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	461a      	mov	r2, r3
 8007c86:	2300      	movs	r3, #0
 8007c88:	6053      	str	r3, [r2, #4]
 8007c8a:	e000      	b.n	8007c8e <USB_HC_StartXfer+0x3ea>
          break;
 8007c8c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ca4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	78db      	ldrb	r3, [r3, #3]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	e003      	b.n	8007cc0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cbe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cc6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e055      	b.n	8007d90 <USB_HC_StartXfer+0x4ec>
 8007ce4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	78db      	ldrb	r3, [r3, #3]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d14e      	bne.n	8007d8e <USB_HC_StartXfer+0x4ea>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d04a      	beq.n	8007d8e <USB_HC_StartXfer+0x4ea>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	79db      	ldrb	r3, [r3, #7]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d146      	bne.n	8007d8e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7c9b      	ldrb	r3, [r3, #18]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d831      	bhi.n	8007d6c <USB_HC_StartXfer+0x4c8>
 8007d08:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <USB_HC_StartXfer+0x46c>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d45 	.word	0x08007d45
 8007d18:	08007d21 	.word	0x08007d21
 8007d1c:	08007d45 	.word	0x08007d45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	3303      	adds	r3, #3
 8007d26:	089b      	lsrs	r3, r3, #2
 8007d28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d2a:	8afa      	ldrh	r2, [r7, #22]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d91c      	bls.n	8007d70 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f043 0220 	orr.w	r2, r3, #32
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d42:	e015      	b.n	8007d70 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	3303      	adds	r3, #3
 8007d4a:	089b      	lsrs	r3, r3, #2
 8007d4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d4e:	8afa      	ldrh	r2, [r7, #22]
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d90a      	bls.n	8007d74 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d6a:	e003      	b.n	8007d74 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007d6c:	bf00      	nop
 8007d6e:	e002      	b.n	8007d76 <USB_HC_StartXfer+0x4d2>
        break;
 8007d70:	bf00      	nop
 8007d72:	e000      	b.n	8007d76 <USB_HC_StartXfer+0x4d2>
        break;
 8007d74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6999      	ldr	r1, [r3, #24]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	785a      	ldrb	r2, [r3, #1]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2000      	movs	r0, #0
 8007d86:	9000      	str	r0, [sp, #0]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff f9c9 	bl	8007120 <USB_WritePacket>
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3728      	adds	r7, #40	@ 0x28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	b29b      	uxth	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b089      	sub	sp, #36	@ 0x24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	0c9b      	lsrs	r3, r3, #18
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	0fdb      	lsrs	r3, r3, #31
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	0fdb      	lsrs	r3, r3, #31
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d10d      	bne.n	8007e3c <USB_HC_Halt+0x82>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <USB_HC_Halt+0x82>
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d002      	beq.n	8007e38 <USB_HC_Halt+0x7e>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d101      	bne.n	8007e3c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e0d8      	b.n	8007fee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <USB_HC_Halt+0x8e>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d173      	bne.n	8007f30 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e66:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d14a      	bne.n	8007f0a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d133      	bne.n	8007ee8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e9e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ebe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ecc:	d82e      	bhi.n	8007f2c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee4:	d0ec      	beq.n	8007ec0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ee6:	e081      	b.n	8007fec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f06:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f08:	e070      	b.n	8007fec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	69fa      	ldr	r2, [r7, #28]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f28:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f2a:	e05f      	b.n	8007fec <USB_HC_Halt+0x232>
            break;
 8007f2c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f2e:	e05d      	b.n	8007fec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f4e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d133      	bne.n	8007fc8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f9e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fac:	d81d      	bhi.n	8007fea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fc4:	d0ec      	beq.n	8007fa0 <USB_HC_Halt+0x1e6>
 8007fc6:	e011      	b.n	8007fec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	e000      	b.n	8007fec <USB_HC_Halt+0x232>
          break;
 8007fea:	bf00      	nop
    }
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3724      	adds	r7, #36	@ 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008010:	2301      	movs	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	04da      	lsls	r2, r3, #19
 8008018:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <USB_DoPing+0x74>)
 800801a:	4013      	ands	r3, r2
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	440a      	add	r2, r1
 8008024:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008028:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800802c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008044:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800804c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	4413      	add	r3, r2
 8008056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800805a:	461a      	mov	r2, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	1ff80000 	.word	0x1ff80000

08008074 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fe ff8c 	bl	8006fa6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800808e:	2110      	movs	r1, #16
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7fe ffe5 	bl	8007060 <USB_FlushTxFifo>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff f80f 	bl	80070c4 <USB_FlushRxFifo>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080b0:	2300      	movs	r3, #0
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	e01f      	b.n	80080f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ea:	461a      	mov	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	3301      	adds	r3, #1
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b0f      	cmp	r3, #15
 80080fa:	d9dc      	bls.n	80080b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	e034      	b.n	800816c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	4413      	add	r3, r2
 800810a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008118:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008120:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008128:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	4413      	add	r3, r2
 8008132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008136:	461a      	mov	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008148:	d80c      	bhi.n	8008164 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008160:	d0ec      	beq.n	800813c <USB_StopHost+0xc8>
 8008162:	e000      	b.n	8008166 <USB_StopHost+0xf2>
        break;
 8008164:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	3301      	adds	r3, #1
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b0f      	cmp	r3, #15
 8008170:	d9c7      	bls.n	8008102 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008178:	461a      	mov	r2, r3
 800817a:	f04f 33ff 	mov.w	r3, #4294967295
 800817e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7fe fefb 	bl	8006f84 <USB_EnableGlobalInt>

  return ret;
 800818e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008198:	b590      	push	{r4, r7, lr}
 800819a:	b089      	sub	sp, #36	@ 0x24
 800819c:	af04      	add	r7, sp, #16
 800819e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80081a0:	2301      	movs	r3, #1
 80081a2:	2202      	movs	r2, #2
 80081a4:	2102      	movs	r1, #2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fc85 	bl	8008ab6 <USBH_FindInterface>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2bff      	cmp	r3, #255	@ 0xff
 80081b4:	d002      	beq.n	80081bc <USBH_CDC_InterfaceInit+0x24>
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d901      	bls.n	80081c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081bc:	2302      	movs	r3, #2
 80081be:	e13d      	b.n	800843c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fc5a 	bl	8008a7e <USBH_SelectInterface>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80081d4:	2302      	movs	r3, #2
 80081d6:	e131      	b.n	800843c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80081de:	2050      	movs	r0, #80	@ 0x50
 80081e0:	f002 fb64 	bl	800a8ac <malloc>
 80081e4:	4603      	mov	r3, r0
 80081e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80081f8:	2302      	movs	r3, #2
 80081fa:	e11f      	b.n	800843c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80081fc:	2250      	movs	r2, #80	@ 0x50
 80081fe:	2100      	movs	r1, #0
 8008200:	68b8      	ldr	r0, [r7, #8]
 8008202:	f003 f96e 	bl	800b4e2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	211a      	movs	r1, #26
 800820c:	fb01 f303 	mul.w	r3, r1, r3
 8008210:	4413      	add	r3, r2
 8008212:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b25b      	sxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	da15      	bge.n	800824a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	211a      	movs	r1, #26
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	211a      	movs	r1, #26
 800823a:	fb01 f303 	mul.w	r3, r1, r3
 800823e:	4413      	add	r3, r2
 8008240:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008244:	881a      	ldrh	r2, [r3, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 ffbe 	bl	800a1d2 <USBH_AllocPipe>
 8008256:	4603      	mov	r3, r0
 8008258:	461a      	mov	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	7819      	ldrb	r1, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	7858      	ldrb	r0, [r3, #1]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	8952      	ldrh	r2, [r2, #10]
 8008276:	9202      	str	r2, [sp, #8]
 8008278:	2203      	movs	r2, #3
 800827a:	9201      	str	r2, [sp, #4]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4623      	mov	r3, r4
 8008280:	4602      	mov	r2, r0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 ff76 	bl	800a174 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f002 fa85 	bl	800a7a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008296:	2300      	movs	r3, #0
 8008298:	2200      	movs	r2, #0
 800829a:	210a      	movs	r1, #10
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fc0a 	bl	8008ab6 <USBH_FindInterface>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2bff      	cmp	r3, #255	@ 0xff
 80082aa:	d002      	beq.n	80082b2 <USBH_CDC_InterfaceInit+0x11a>
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d901      	bls.n	80082b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80082b2:	2302      	movs	r3, #2
 80082b4:	e0c2      	b.n	800843c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	211a      	movs	r1, #26
 80082bc:	fb01 f303 	mul.w	r3, r1, r3
 80082c0:	4413      	add	r3, r2
 80082c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	da16      	bge.n	80082fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	211a      	movs	r1, #26
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	4413      	add	r3, r2
 80082da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	211a      	movs	r1, #26
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082f4:	881a      	ldrh	r2, [r3, #0]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	835a      	strh	r2, [r3, #26]
 80082fa:	e015      	b.n	8008328 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	211a      	movs	r1, #26
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	4413      	add	r3, r2
 8008308:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	211a      	movs	r1, #26
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	4413      	add	r3, r2
 800831e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008322:	881a      	ldrh	r2, [r3, #0]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	211a      	movs	r1, #26
 800832e:	fb01 f303 	mul.w	r3, r1, r3
 8008332:	4413      	add	r3, r2
 8008334:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b25b      	sxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	da16      	bge.n	800836e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	211a      	movs	r1, #26
 8008346:	fb01 f303 	mul.w	r3, r1, r3
 800834a:	4413      	add	r3, r2
 800834c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	211a      	movs	r1, #26
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	4413      	add	r3, r2
 8008362:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008366:	881a      	ldrh	r2, [r3, #0]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	835a      	strh	r2, [r3, #26]
 800836c:	e015      	b.n	800839a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	211a      	movs	r1, #26
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	4413      	add	r3, r2
 800837a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800837e:	781a      	ldrb	r2, [r3, #0]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	211a      	movs	r1, #26
 800838a:	fb01 f303 	mul.w	r3, r1, r3
 800838e:	4413      	add	r3, r2
 8008390:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008394:	881a      	ldrh	r2, [r3, #0]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	7b9b      	ldrb	r3, [r3, #14]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 ff16 	bl	800a1d2 <USBH_AllocPipe>
 80083a6:	4603      	mov	r3, r0
 80083a8:	461a      	mov	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	7bdb      	ldrb	r3, [r3, #15]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 ff0c 	bl	800a1d2 <USBH_AllocPipe>
 80083ba:	4603      	mov	r3, r0
 80083bc:	461a      	mov	r2, r3
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	7b59      	ldrb	r1, [r3, #13]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	7b98      	ldrb	r0, [r3, #14]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	8b12      	ldrh	r2, [r2, #24]
 80083da:	9202      	str	r2, [sp, #8]
 80083dc:	2202      	movs	r2, #2
 80083de:	9201      	str	r2, [sp, #4]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4623      	mov	r3, r4
 80083e4:	4602      	mov	r2, r0
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fec4 	bl	800a174 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	7b19      	ldrb	r1, [r3, #12]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	7bd8      	ldrb	r0, [r3, #15]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	8b52      	ldrh	r2, [r2, #26]
 8008404:	9202      	str	r2, [sp, #8]
 8008406:	2202      	movs	r2, #2
 8008408:	9201      	str	r2, [sp, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4623      	mov	r3, r4
 800840e:	4602      	mov	r2, r0
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 feaf 	bl	800a174 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7b5b      	ldrb	r3, [r3, #13]
 8008422:	2200      	movs	r2, #0
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f002 f9ba 	bl	800a7a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	7b1b      	ldrb	r3, [r3, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f002 f9b3 	bl	800a7a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00e      	beq.n	800847c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 fea4 	bl	800a1b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fecf 	bl	800a214 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	7b1b      	ldrb	r3, [r3, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00e      	beq.n	80084a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	7b1b      	ldrb	r3, [r3, #12]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 fe91 	bl	800a1b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	7b1b      	ldrb	r3, [r3, #12]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 febc 	bl	800a214 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	7b5b      	ldrb	r3, [r3, #13]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00e      	beq.n	80084c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	7b5b      	ldrb	r3, [r3, #13]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 fe7e 	bl	800a1b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	7b5b      	ldrb	r3, [r3, #13]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fea9 	bl	800a214 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	4618      	mov	r0, r3
 80084de:	f002 f9ed 	bl	800a8bc <free>
    phost->pActiveClass->pData = 0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084e8:	2200      	movs	r2, #0
 80084ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3340      	adds	r3, #64	@ 0x40
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8b1 	bl	8008676 <GetLineCoding>
 8008514:	4603      	mov	r3, r0
 8008516:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008524:	2102      	movs	r1, #2
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800852a:	7afb      	ldrb	r3, [r7, #11]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008554:	2b04      	cmp	r3, #4
 8008556:	d877      	bhi.n	8008648 <USBH_CDC_Process+0x114>
 8008558:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <USBH_CDC_Process+0x2c>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008575 	.word	0x08008575
 8008564:	0800857b 	.word	0x0800857b
 8008568:	080085ab 	.word	0x080085ab
 800856c:	0800861f 	.word	0x0800861f
 8008570:	0800862d 	.word	0x0800862d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
      break;
 8008578:	e06d      	b.n	8008656 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f897 	bl	80086b4 <SetLineCoding>
 8008586:	4603      	mov	r3, r0
 8008588:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008598:	e058      	b.n	800864c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d055      	beq.n	800864c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2204      	movs	r2, #4
 80085a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80085a8:	e050      	b.n	800864c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3340      	adds	r3, #64	@ 0x40
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f860 	bl	8008676 <GetLineCoding>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d126      	bne.n	800860e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d2:	791b      	ldrb	r3, [r3, #4]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d13b      	bne.n	8008650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d133      	bne.n	8008650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d12b      	bne.n	8008650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008600:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008602:	429a      	cmp	r2, r3
 8008604:	d124      	bne.n	8008650 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f958 	bl	80088bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800860c:	e020      	b.n	8008650 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d01d      	beq.n	8008650 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2204      	movs	r2, #4
 8008618:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800861c:	e018      	b.n	8008650 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f867 	bl	80086f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8da 	bl	80087de <CDC_ProcessReception>
      break;
 800862a:	e014      	b.n	8008656 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 f81a 	bl	8009668 <USBH_ClrFeature>
 8008634:	4603      	mov	r3, r0
 8008636:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008646:	e005      	b.n	8008654 <USBH_CDC_Process+0x120>

    default:
      break;
 8008648:	bf00      	nop
 800864a:	e004      	b.n	8008656 <USBH_CDC_Process+0x122>
      break;
 800864c:	bf00      	nop
 800864e:	e002      	b.n	8008656 <USBH_CDC_Process+0x122>
      break;
 8008650:	bf00      	nop
 8008652:	e000      	b.n	8008656 <USBH_CDC_Process+0x122>
      break;
 8008654:	bf00      	nop

  }

  return status;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	22a1      	movs	r2, #161	@ 0xa1
 8008684:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2221      	movs	r2, #33	@ 0x21
 800868a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2207      	movs	r2, #7
 800869c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2207      	movs	r2, #7
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fb14 	bl	8009cd2 <USBH_CtlReq>
 80086aa:	4603      	mov	r3, r0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2221      	movs	r2, #33	@ 0x21
 80086c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2207      	movs	r2, #7
 80086da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2207      	movs	r2, #7
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 faf5 	bl	8009cd2 <USBH_CtlReq>
 80086e8:	4603      	mov	r3, r0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b086      	sub	sp, #24
 80086f6:	af02      	add	r7, sp, #8
 80086f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008704:	2300      	movs	r3, #0
 8008706:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800870e:	2b01      	cmp	r3, #1
 8008710:	d002      	beq.n	8008718 <CDC_ProcessTransmission+0x26>
 8008712:	2b02      	cmp	r3, #2
 8008714:	d023      	beq.n	800875e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008716:	e05e      	b.n	80087d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	8b12      	ldrh	r2, [r2, #24]
 8008720:	4293      	cmp	r3, r2
 8008722:	d90b      	bls.n	800873c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	69d9      	ldr	r1, [r3, #28]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8b1a      	ldrh	r2, [r3, #24]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	7b5b      	ldrb	r3, [r3, #13]
 8008730:	2001      	movs	r0, #1
 8008732:	9000      	str	r0, [sp, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 fcda 	bl	800a0ee <USBH_BulkSendData>
 800873a:	e00b      	b.n	8008754 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	7b5b      	ldrb	r3, [r3, #13]
 800874a:	2001      	movs	r0, #1
 800874c:	9000      	str	r0, [sp, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fccd 	bl	800a0ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800875c:	e03b      	b.n	80087d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	7b5b      	ldrb	r3, [r3, #13]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fff1 	bl	800a74c <USBH_LL_GetURBState>
 800876a:	4603      	mov	r3, r0
 800876c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800876e:	7afb      	ldrb	r3, [r7, #11]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d128      	bne.n	80087c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	8b12      	ldrh	r2, [r2, #24]
 800877c:	4293      	cmp	r3, r2
 800877e:	d90e      	bls.n	800879e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	8b12      	ldrh	r2, [r2, #24]
 8008788:	1a9a      	subs	r2, r3, r2
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	8b12      	ldrh	r2, [r2, #24]
 8008796:	441a      	add	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	61da      	str	r2, [r3, #28]
 800879c:	e002      	b.n	80087a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087b4:	e00e      	b.n	80087d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f868 	bl	8008894 <USBH_CDC_TransmitCallback>
      break;
 80087c4:	e006      	b.n	80087d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d103      	bne.n	80087d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087d4:	bf00      	nop
  }
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087f0:	2300      	movs	r3, #0
 80087f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d002      	beq.n	8008804 <CDC_ProcessReception+0x26>
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d00e      	beq.n	8008820 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008802:	e043      	b.n	800888c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6a19      	ldr	r1, [r3, #32]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	8b5a      	ldrh	r2, [r3, #26]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	7b1b      	ldrb	r3, [r3, #12]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fc91 	bl	800a138 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2204      	movs	r2, #4
 800881a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800881e:	e035      	b.n	800888c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	7b1b      	ldrb	r3, [r3, #12]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 ff90 	bl	800a74c <USBH_LL_GetURBState>
 800882c:	4603      	mov	r3, r0
 800882e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008830:	7cfb      	ldrb	r3, [r7, #19]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d129      	bne.n	800888a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	7b1b      	ldrb	r3, [r3, #12]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 fef3 	bl	800a628 <USBH_LL_GetLastXferSize>
 8008842:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	429a      	cmp	r2, r3
 800884c:	d016      	beq.n	800887c <CDC_ProcessReception+0x9e>
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	8b5b      	ldrh	r3, [r3, #26]
 8008852:	461a      	mov	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4293      	cmp	r3, r2
 8008858:	d110      	bne.n	800887c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	441a      	add	r2, r3
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2203      	movs	r2, #3
 8008876:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800887a:	e006      	b.n	800888a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f80f 	bl	80088a8 <USBH_CDC_ReceiveCallback>
      break;
 800888a:	bf00      	nop
  }
}
 800888c:	bf00      	nop
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80088e4:	2302      	movs	r3, #2
 80088e6:	e029      	b.n	800893c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	79fa      	ldrb	r2, [r7, #7]
 80088ec:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f81f 	bl	8008944 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 fdc3 	bl	800a4c0 <USBH_LL_Init>

  return USBH_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e009      	b.n	800896a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	33e0      	adds	r3, #224	@ 0xe0
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	2200      	movs	r2, #0
 8008962:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3301      	adds	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b0f      	cmp	r3, #15
 800896e:	d9f2      	bls.n	8008956 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e009      	b.n	800898a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3301      	adds	r3, #1
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008990:	d3f1      	bcc.n	8008976 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2240      	movs	r2, #64	@ 0x40
 80089b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	331c      	adds	r3, #28
 80089e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089e6:	2100      	movs	r1, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f002 fd7a 	bl	800b4e2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 fd71 	bl	800b4e2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a06:	2212      	movs	r2, #18
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f002 fd69 	bl	800b4e2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a16:	223e      	movs	r2, #62	@ 0x3e
 8008a18:	2100      	movs	r1, #0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f002 fd61 	bl	800b4e2 <memset>

  return USBH_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d016      	beq.n	8008a6c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10e      	bne.n	8008a66 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a4e:	1c59      	adds	r1, r3, #1
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	33de      	adds	r3, #222	@ 0xde
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e004      	b.n	8008a70 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	73fb      	strb	r3, [r7, #15]
 8008a6a:	e001      	b.n	8008a70 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d204      	bcs.n	8008aa4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008aa2:	e001      	b.n	8008aa8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b087      	sub	sp, #28
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	70fb      	strb	r3, [r7, #3]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70bb      	strb	r3, [r7, #2]
 8008acc:	4613      	mov	r3, r2
 8008ace:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ade:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ae0:	e025      	b.n	8008b2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	221a      	movs	r2, #26
 8008ae6:	fb02 f303 	mul.w	r3, r2, r3
 8008aea:	3308      	adds	r3, #8
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	3302      	adds	r3, #2
 8008af2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	795b      	ldrb	r3, [r3, #5]
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d002      	beq.n	8008b04 <USBH_FindInterface+0x4e>
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	2bff      	cmp	r3, #255	@ 0xff
 8008b02:	d111      	bne.n	8008b28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b08:	78ba      	ldrb	r2, [r7, #2]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d002      	beq.n	8008b14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b0e:	78bb      	ldrb	r3, [r7, #2]
 8008b10:	2bff      	cmp	r3, #255	@ 0xff
 8008b12:	d109      	bne.n	8008b28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b18:	787a      	ldrb	r2, [r7, #1]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d002      	beq.n	8008b24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b1e:	787b      	ldrb	r3, [r7, #1]
 8008b20:	2bff      	cmp	r3, #255	@ 0xff
 8008b22:	d101      	bne.n	8008b28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	e006      	b.n	8008b36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d9d6      	bls.n	8008ae2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b34:	23ff      	movs	r3, #255	@ 0xff
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 fcf4 	bl	800a538 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b50:	2101      	movs	r1, #1
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 fe0d 	bl	800a772 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d102      	bne.n	8008b86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2203      	movs	r2, #3
 8008b84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b0b      	cmp	r3, #11
 8008b8e:	f200 81bb 	bhi.w	8008f08 <USBH_Process+0x3a4>
 8008b92:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <USBH_Process+0x34>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bc9 	.word	0x08008bc9
 8008b9c:	08008bfb 	.word	0x08008bfb
 8008ba0:	08008c63 	.word	0x08008c63
 8008ba4:	08008ea3 	.word	0x08008ea3
 8008ba8:	08008f09 	.word	0x08008f09
 8008bac:	08008d03 	.word	0x08008d03
 8008bb0:	08008e49 	.word	0x08008e49
 8008bb4:	08008d39 	.word	0x08008d39
 8008bb8:	08008d59 	.word	0x08008d59
 8008bbc:	08008d77 	.word	0x08008d77
 8008bc0:	08008dbb 	.word	0x08008dbb
 8008bc4:	08008e8b 	.word	0x08008e8b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 819b 	beq.w	8008f0c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008bdc:	20c8      	movs	r0, #200	@ 0xc8
 8008bde:	f001 fe12 	bl	800a806 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f001 fd05 	bl	800a5f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bf8:	e188      	b.n	8008f0c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d107      	bne.n	8008c14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c12:	e18a      	b.n	8008f2a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c1e:	d914      	bls.n	8008c4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c26:	3301      	adds	r3, #1
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d903      	bls.n	8008c42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	220d      	movs	r2, #13
 8008c3e:	701a      	strb	r2, [r3, #0]
      break;
 8008c40:	e173      	b.n	8008f2a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
      break;
 8008c48:	e16f      	b.n	8008f2a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c50:	f103 020a 	add.w	r2, r3, #10
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008c5a:	200a      	movs	r0, #10
 8008c5c:	f001 fdd3 	bl	800a806 <USBH_Delay>
      break;
 8008c60:	e163      	b.n	8008f2a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c72:	2104      	movs	r1, #4
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c78:	2064      	movs	r0, #100	@ 0x64
 8008c7a:	f001 fdc4 	bl	800a806 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fc90 	bl	800a5a4 <USBH_LL_GetSpeed>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2205      	movs	r2, #5
 8008c92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 fa9b 	bl	800a1d2 <USBH_AllocPipe>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ca4:	2180      	movs	r1, #128	@ 0x80
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fa93 	bl	800a1d2 <USBH_AllocPipe>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7919      	ldrb	r1, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cc8:	9202      	str	r2, [sp, #8]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	9201      	str	r2, [sp, #4]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2280      	movs	r2, #128	@ 0x80
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 fa4d 	bl	800a174 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	7959      	ldrb	r1, [r3, #5]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cee:	9202      	str	r2, [sp, #8]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	9201      	str	r2, [sp, #4]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fa3a 	bl	800a174 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d00:	e113      	b.n	8008f2a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f916 	bl	8008f34 <USBH_HandleEnum>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f040 80fd 	bne.w	8008f10 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d103      	bne.n	8008d30 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d2e:	e0ef      	b.n	8008f10 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2207      	movs	r2, #7
 8008d34:	701a      	strb	r2, [r3, #0]
      break;
 8008d36:	e0eb      	b.n	8008f10 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 80e8 	beq.w	8008f14 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2208      	movs	r2, #8
 8008d54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008d56:	e0dd      	b.n	8008f14 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc3a 	bl	80095da <USBH_SetCfg>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 80d5 	bne.w	8008f18 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2209      	movs	r2, #9
 8008d72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d74:	e0d0      	b.n	8008f18 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d016      	beq.n	8008db2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008d84:	2101      	movs	r1, #1
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fc4a 	bl	8009620 <USBH_SetFeature>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	220a      	movs	r2, #10
 8008d9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d9e:	e0bd      	b.n	8008f1c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	f040 80b9 	bne.w	8008f1c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	220a      	movs	r2, #10
 8008dae:	701a      	strb	r2, [r3, #0]
      break;
 8008db0:	e0b4      	b.n	8008f1c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	220a      	movs	r2, #10
 8008db6:	701a      	strb	r2, [r3, #0]
      break;
 8008db8:	e0b0      	b.n	8008f1c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80ad 	beq.w	8008f20 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
 8008dd2:	e016      	b.n	8008e02 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008dd4:	7bfa      	ldrb	r2, [r7, #15]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32de      	adds	r2, #222	@ 0xde
 8008dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dde:	791a      	ldrb	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d108      	bne.n	8008dfc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008dea:	7bfa      	ldrb	r2, [r7, #15]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	32de      	adds	r2, #222	@ 0xde
 8008df0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008dfa:	e005      	b.n	8008e08 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	73fb      	strb	r3, [r7, #15]
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0e5      	beq.n	8008dd4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d016      	beq.n	8008e40 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d109      	bne.n	8008e38 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2206      	movs	r2, #6
 8008e28:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e30:	2103      	movs	r1, #3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e36:	e073      	b.n	8008f20 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	220d      	movs	r2, #13
 8008e3c:	701a      	strb	r2, [r3, #0]
      break;
 8008e3e:	e06f      	b.n	8008f20 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	220d      	movs	r2, #13
 8008e44:	701a      	strb	r2, [r3, #0]
      break;
 8008e46:	e06b      	b.n	8008f20 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d017      	beq.n	8008e82 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	220b      	movs	r2, #11
 8008e6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e70:	e058      	b.n	8008f24 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d154      	bne.n	8008f24 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220d      	movs	r2, #13
 8008e7e:	701a      	strb	r2, [r3, #0]
      break;
 8008e80:	e050      	b.n	8008f24 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	220d      	movs	r2, #13
 8008e86:	701a      	strb	r2, [r3, #0]
      break;
 8008e88:	e04c      	b.n	8008f24 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d049      	beq.n	8008f28 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
      }
      break;
 8008ea0:	e042      	b.n	8008f28 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fd4a 	bl	8008944 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ede:	2105      	movs	r1, #5
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d107      	bne.n	8008f00 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fe22 	bl	8008b42 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008efe:	e014      	b.n	8008f2a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 fb19 	bl	800a538 <USBH_LL_Start>
      break;
 8008f06:	e010      	b.n	8008f2a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f08:	bf00      	nop
 8008f0a:	e00e      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f0c:	bf00      	nop
 8008f0e:	e00c      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f10:	bf00      	nop
 8008f12:	e00a      	b.n	8008f2a <USBH_Process+0x3c6>
    break;
 8008f14:	bf00      	nop
 8008f16:	e008      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f18:	bf00      	nop
 8008f1a:	e006      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f1c:	bf00      	nop
 8008f1e:	e004      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f20:	bf00      	nop
 8008f22:	e002      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f24:	bf00      	nop
 8008f26:	e000      	b.n	8008f2a <USBH_Process+0x3c6>
      break;
 8008f28:	bf00      	nop
  }
  return USBH_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	2b07      	cmp	r3, #7
 8008f4a:	f200 81bd 	bhi.w	80092c8 <USBH_HandleEnum+0x394>
 8008f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <USBH_HandleEnum+0x20>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f75 	.word	0x08008f75
 8008f58:	0800902f 	.word	0x0800902f
 8008f5c:	08009099 	.word	0x08009099
 8008f60:	08009123 	.word	0x08009123
 8008f64:	0800918d 	.word	0x0800918d
 8008f68:	080091fd 	.word	0x080091fd
 8008f6c:	08009243 	.word	0x08009243
 8008f70:	08009289 	.word	0x08009289
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f74:	2108      	movs	r1, #8
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa4c 	bl	8009414 <USBH_Get_DevDesc>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d12e      	bne.n	8008fe4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7919      	ldrb	r1, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008faa:	9202      	str	r2, [sp, #8]
 8008fac:	2200      	movs	r2, #0
 8008fae:	9201      	str	r2, [sp, #4]
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2280      	movs	r2, #128	@ 0x80
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f8dc 	bl	800a174 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7959      	ldrb	r1, [r3, #5]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fd0:	9202      	str	r2, [sp, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	9201      	str	r2, [sp, #4]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2200      	movs	r2, #0
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 f8c9 	bl	800a174 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fe2:	e173      	b.n	80092cc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	f040 8170 	bne.w	80092cc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009002:	2b03      	cmp	r3, #3
 8009004:	d903      	bls.n	800900e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	220d      	movs	r2, #13
 800900a:	701a      	strb	r2, [r3, #0]
      break;
 800900c:	e15e      	b.n	80092cc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	795b      	ldrb	r3, [r3, #5]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f8fd 	bl	800a214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	791b      	ldrb	r3, [r3, #4]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f8f7 	bl	800a214 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
      break;
 800902c:	e14e      	b.n	80092cc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800902e:	2112      	movs	r1, #18
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f9ef 	bl	8009414 <USBH_Get_DevDesc>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d103      	bne.n	8009048 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009046:	e143      	b.n	80092d0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b03      	cmp	r3, #3
 800904c:	f040 8140 	bne.w	80092d0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009056:	3301      	adds	r3, #1
 8009058:	b2da      	uxtb	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009066:	2b03      	cmp	r3, #3
 8009068:	d903      	bls.n	8009072 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	220d      	movs	r2, #13
 800906e:	701a      	strb	r2, [r3, #0]
      break;
 8009070:	e12e      	b.n	80092d0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	795b      	ldrb	r3, [r3, #5]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f8cb 	bl	800a214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	791b      	ldrb	r3, [r3, #4]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f8c5 	bl	800a214 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
      break;
 8009096:	e11b      	b.n	80092d0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009098:	2101      	movs	r1, #1
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa79 	bl	8009592 <USBH_SetAddress>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d130      	bne.n	800910c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80090aa:	2002      	movs	r0, #2
 80090ac:	f001 fbab 	bl	800a806 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2203      	movs	r2, #3
 80090bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	7919      	ldrb	r1, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090d2:	9202      	str	r2, [sp, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	9201      	str	r2, [sp, #4]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4603      	mov	r3, r0
 80090dc:	2280      	movs	r2, #128	@ 0x80
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 f848 	bl	800a174 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7959      	ldrb	r1, [r3, #5]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090f8:	9202      	str	r2, [sp, #8]
 80090fa:	2200      	movs	r2, #0
 80090fc:	9201      	str	r2, [sp, #4]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	2200      	movs	r2, #0
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f835 	bl	800a174 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800910a:	e0e3      	b.n	80092d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b03      	cmp	r3, #3
 8009110:	f040 80e0 	bne.w	80092d4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	220d      	movs	r2, #13
 8009118:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	705a      	strb	r2, [r3, #1]
      break;
 8009120:	e0d8      	b.n	80092d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009122:	2109      	movs	r1, #9
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f9a1 	bl	800946c <USBH_Get_CfgDesc>
 800912a:	4603      	mov	r3, r0
 800912c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2204      	movs	r2, #4
 8009138:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800913a:	e0cd      	b.n	80092d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	2b03      	cmp	r3, #3
 8009140:	f040 80ca 	bne.w	80092d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800914a:	3301      	adds	r3, #1
 800914c:	b2da      	uxtb	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800915a:	2b03      	cmp	r3, #3
 800915c:	d903      	bls.n	8009166 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	220d      	movs	r2, #13
 8009162:	701a      	strb	r2, [r3, #0]
      break;
 8009164:	e0b8      	b.n	80092d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	795b      	ldrb	r3, [r3, #5]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f851 	bl	800a214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 f84b 	bl	800a214 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	701a      	strb	r2, [r3, #0]
      break;
 800918a:	e0a5      	b.n	80092d8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f969 	bl	800946c <USBH_Get_CfgDesc>
 800919a:	4603      	mov	r3, r0
 800919c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d103      	bne.n	80091ac <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2205      	movs	r2, #5
 80091a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091aa:	e097      	b.n	80092dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	f040 8094 	bne.w	80092dc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091ba:	3301      	adds	r3, #1
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d903      	bls.n	80091d6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	220d      	movs	r2, #13
 80091d2:	701a      	strb	r2, [r3, #0]
      break;
 80091d4:	e082      	b.n	80092dc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	795b      	ldrb	r3, [r3, #5]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 f819 	bl	800a214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 f813 	bl	800a214 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
      break;
 80091fa:	e06f      	b.n	80092dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009202:	2b00      	cmp	r3, #0
 8009204:	d019      	beq.n	800923a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009212:	23ff      	movs	r3, #255	@ 0xff
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f953 	bl	80094c0 <USBH_Get_StringDesc>
 800921a:	4603      	mov	r3, r0
 800921c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2206      	movs	r2, #6
 8009228:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800922a:	e059      	b.n	80092e0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b03      	cmp	r3, #3
 8009230:	d156      	bne.n	80092e0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2206      	movs	r2, #6
 8009236:	705a      	strb	r2, [r3, #1]
      break;
 8009238:	e052      	b.n	80092e0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2206      	movs	r2, #6
 800923e:	705a      	strb	r2, [r3, #1]
      break;
 8009240:	e04e      	b.n	80092e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009248:	2b00      	cmp	r3, #0
 800924a:	d019      	beq.n	8009280 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009258:	23ff      	movs	r3, #255	@ 0xff
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f930 	bl	80094c0 <USBH_Get_StringDesc>
 8009260:	4603      	mov	r3, r0
 8009262:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2207      	movs	r2, #7
 800926e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009270:	e038      	b.n	80092e4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d135      	bne.n	80092e4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2207      	movs	r2, #7
 800927c:	705a      	strb	r2, [r3, #1]
      break;
 800927e:	e031      	b.n	80092e4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2207      	movs	r2, #7
 8009284:	705a      	strb	r2, [r3, #1]
      break;
 8009286:	e02d      	b.n	80092e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800929e:	23ff      	movs	r3, #255	@ 0xff
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f90d 	bl	80094c0 <USBH_Get_StringDesc>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092b4:	e018      	b.n	80092e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d115      	bne.n	80092e8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]
      break;
 80092c0:	e012      	b.n	80092e8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
      break;
 80092c6:	e00f      	b.n	80092e8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80092c8:	bf00      	nop
 80092ca:	e00e      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092cc:	bf00      	nop
 80092ce:	e00c      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092d0:	bf00      	nop
 80092d2:	e00a      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092d4:	bf00      	nop
 80092d6:	e008      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092d8:	bf00      	nop
 80092da:	e006      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092dc:	bf00      	nop
 80092de:	e004      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092e0:	bf00      	nop
 80092e2:	e002      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092e4:	bf00      	nop
 80092e6:	e000      	b.n	80092ea <USBH_HandleEnum+0x3b6>
      break;
 80092e8:	bf00      	nop
  }
  return Status;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f804 	bl	8009336 <USBH_HandleSof>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b0b      	cmp	r3, #11
 8009346:	d10a      	bne.n	800935e <USBH_HandleSof+0x28>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
  }
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009376:	bf00      	nop
}
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009392:	bf00      	nop
}
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 f8be 	bl	800a56e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	791b      	ldrb	r3, [r3, #4]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 ff0b 	bl	800a214 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	795b      	ldrb	r3, [r3, #5]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 ff05 	bl	800a214 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af02      	add	r7, sp, #8
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009420:	887b      	ldrh	r3, [r7, #2]
 8009422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009426:	d901      	bls.n	800942c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009428:	2303      	movs	r3, #3
 800942a:	e01b      	b.n	8009464 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009432:	887b      	ldrh	r3, [r7, #2]
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	4613      	mov	r3, r2
 8009438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800943c:	2100      	movs	r1, #0
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f872 	bl	8009528 <USBH_GetDescriptor>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009454:	887a      	ldrh	r2, [r7, #2]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f929 	bl	80096b0 <USBH_ParseDevDesc>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009462:	7bfb      	ldrb	r3, [r7, #15]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	331c      	adds	r3, #28
 800947c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800947e:	887b      	ldrh	r3, [r7, #2]
 8009480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009484:	d901      	bls.n	800948a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009486:	2303      	movs	r3, #3
 8009488:	e016      	b.n	80094b8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800948a:	887b      	ldrh	r3, [r7, #2]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009494:	2100      	movs	r1, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f846 	bl	8009528 <USBH_GetDescriptor>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d107      	bne.n	80094b6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094a6:	887b      	ldrh	r3, [r7, #2]
 80094a8:	461a      	mov	r2, r3
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f9af 	bl	8009810 <USBH_ParseCfgDesc>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	607a      	str	r2, [r7, #4]
 80094ca:	461a      	mov	r2, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	72fb      	strb	r3, [r7, #11]
 80094d0:	4613      	mov	r3, r2
 80094d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80094d4:	893b      	ldrh	r3, [r7, #8]
 80094d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094da:	d802      	bhi.n	80094e2 <USBH_Get_StringDesc+0x22>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e01c      	b.n	8009520 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80094ee:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80094f6:	893b      	ldrh	r3, [r7, #8]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	460b      	mov	r3, r1
 80094fc:	2100      	movs	r1, #0
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f812 	bl	8009528 <USBH_GetDescriptor>
 8009504:	4603      	mov	r3, r0
 8009506:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d107      	bne.n	800951e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009514:	893a      	ldrh	r2, [r7, #8]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fb8d 	bl	8009c38 <USBH_ParseStringDesc>
  }

  return status;
 800951e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	607b      	str	r3, [r7, #4]
 8009532:	460b      	mov	r3, r1
 8009534:	72fb      	strb	r3, [r7, #11]
 8009536:	4613      	mov	r3, r2
 8009538:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	789b      	ldrb	r3, [r3, #2]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d11c      	bne.n	800957c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009548:	b2da      	uxtb	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2206      	movs	r2, #6
 8009552:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	893a      	ldrh	r2, [r7, #8]
 8009558:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800955a:	893b      	ldrh	r3, [r7, #8]
 800955c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009564:	d104      	bne.n	8009570 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f240 4209 	movw	r2, #1033	@ 0x409
 800956c:	829a      	strh	r2, [r3, #20]
 800956e:	e002      	b.n	8009576 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8b3a      	ldrh	r2, [r7, #24]
 800957a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800957c:	8b3b      	ldrh	r3, [r7, #24]
 800957e:	461a      	mov	r2, r3
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 fba5 	bl	8009cd2 <USBH_CtlReq>
 8009588:	4603      	mov	r3, r0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	789b      	ldrb	r3, [r3, #2]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d10f      	bne.n	80095c6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2205      	movs	r2, #5
 80095b0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095c6:	2200      	movs	r2, #0
 80095c8:	2100      	movs	r1, #0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fb81 	bl	8009cd2 <USBH_CtlReq>
 80095d0:	4603      	mov	r3, r0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	789b      	ldrb	r3, [r3, #2]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d10e      	bne.n	800960c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2209      	movs	r2, #9
 80095f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	887a      	ldrh	r2, [r7, #2]
 80095fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fb5e 	bl	8009cd2 <USBH_CtlReq>
 8009616:	4603      	mov	r3, r0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	789b      	ldrb	r3, [r3, #2]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d10f      	bne.n	8009654 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2203      	movs	r2, #3
 800963e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	b29a      	uxth	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009654:	2200      	movs	r2, #0
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fb3a 	bl	8009cd2 <USBH_CtlReq>
 800965e:	4603      	mov	r3, r0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	789b      	ldrb	r3, [r3, #2]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d10f      	bne.n	800969c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	b29a      	uxth	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800969c:	2200      	movs	r2, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fb16 	bl	8009cd2 <USBH_CtlReq>
 80096a6:	4603      	mov	r3, r0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80096c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80096d0:	2302      	movs	r3, #2
 80096d2:	e094      	b.n	80097fe <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	785a      	ldrb	r2, [r3, #1]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	3302      	adds	r3, #2
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	3303      	adds	r3, #3
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4313      	orrs	r3, r2
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	791a      	ldrb	r2, [r3, #4]
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	795a      	ldrb	r2, [r3, #5]
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	799a      	ldrb	r2, [r3, #6]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	79da      	ldrb	r2, [r3, #7]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009724:	2b00      	cmp	r3, #0
 8009726:	d004      	beq.n	8009732 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800972e:	2b01      	cmp	r3, #1
 8009730:	d11b      	bne.n	800976a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	79db      	ldrb	r3, [r3, #7]
 8009736:	2b20      	cmp	r3, #32
 8009738:	dc0f      	bgt.n	800975a <USBH_ParseDevDesc+0xaa>
 800973a:	2b08      	cmp	r3, #8
 800973c:	db0f      	blt.n	800975e <USBH_ParseDevDesc+0xae>
 800973e:	3b08      	subs	r3, #8
 8009740:	4a32      	ldr	r2, [pc, #200]	@ (800980c <USBH_ParseDevDesc+0x15c>)
 8009742:	fa22 f303 	lsr.w	r3, r2, r3
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	bf14      	ite	ne
 800974e:	2301      	movne	r3, #1
 8009750:	2300      	moveq	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <USBH_ParseDevDesc+0xb6>
 8009758:	e001      	b.n	800975e <USBH_ParseDevDesc+0xae>
 800975a:	2b40      	cmp	r3, #64	@ 0x40
 800975c:	d003      	beq.n	8009766 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2208      	movs	r2, #8
 8009762:	71da      	strb	r2, [r3, #7]
        break;
 8009764:	e000      	b.n	8009768 <USBH_ParseDevDesc+0xb8>
        break;
 8009766:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009768:	e00e      	b.n	8009788 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009770:	2b02      	cmp	r3, #2
 8009772:	d107      	bne.n	8009784 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	79db      	ldrb	r3, [r3, #7]
 8009778:	2b08      	cmp	r3, #8
 800977a:	d005      	beq.n	8009788 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2208      	movs	r2, #8
 8009780:	71da      	strb	r2, [r3, #7]
 8009782:	e001      	b.n	8009788 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009784:	2303      	movs	r3, #3
 8009786:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	2b08      	cmp	r3, #8
 800978c:	d936      	bls.n	80097fc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	3308      	adds	r3, #8
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	3309      	adds	r3, #9
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	330a      	adds	r3, #10
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	330b      	adds	r3, #11
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	330c      	adds	r3, #12
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	330d      	adds	r3, #13
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4313      	orrs	r3, r2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	7b9a      	ldrb	r2, [r3, #14]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	7bda      	ldrb	r2, [r3, #15]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	7c1a      	ldrb	r2, [r3, #16]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	7c5a      	ldrb	r2, [r3, #17]
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	01000101 	.word	0x01000101

08009810 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08c      	sub	sp, #48	@ 0x30
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009824:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800983e:	2302      	movs	r3, #2
 8009840:	e0da      	b.n	80099f8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b09      	cmp	r3, #9
 800984c:	d002      	beq.n	8009854 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	2209      	movs	r2, #9
 8009852:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	785a      	ldrb	r2, [r3, #1]
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	3302      	adds	r3, #2
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	3303      	adds	r3, #3
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	b29b      	uxth	r3, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	b29b      	uxth	r3, r3
 800987a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800987e:	bf28      	it	cs
 8009880:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009884:	b29a      	uxth	r2, r3
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	791a      	ldrb	r2, [r3, #4]
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	795a      	ldrb	r2, [r3, #5]
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	799a      	ldrb	r2, [r3, #6]
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	79da      	ldrb	r2, [r3, #7]
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	7a1a      	ldrb	r2, [r3, #8]
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	2b09      	cmp	r3, #9
 80098b6:	f240 809d 	bls.w	80099f4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80098ba:	2309      	movs	r3, #9
 80098bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098c2:	e081      	b.n	80099c8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098c4:	f107 0316 	add.w	r3, r7, #22
 80098c8:	4619      	mov	r1, r3
 80098ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098cc:	f000 f9e7 	bl	8009c9e <USBH_GetNextDesc>
 80098d0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80098d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b04      	cmp	r3, #4
 80098d8:	d176      	bne.n	80099c8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b09      	cmp	r3, #9
 80098e0:	d002      	beq.n	80098e8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	2209      	movs	r2, #9
 80098e6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098ec:	221a      	movs	r2, #26
 80098ee:	fb02 f303 	mul.w	r3, r2, r3
 80098f2:	3308      	adds	r3, #8
 80098f4:	6a3a      	ldr	r2, [r7, #32]
 80098f6:	4413      	add	r3, r2
 80098f8:	3302      	adds	r3, #2
 80098fa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098fe:	69f8      	ldr	r0, [r7, #28]
 8009900:	f000 f87e 	bl	8009a00 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800990e:	e043      	b.n	8009998 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009910:	f107 0316 	add.w	r3, r7, #22
 8009914:	4619      	mov	r1, r3
 8009916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009918:	f000 f9c1 	bl	8009c9e <USBH_GetNextDesc>
 800991c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b05      	cmp	r3, #5
 8009924:	d138      	bne.n	8009998 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	795b      	ldrb	r3, [r3, #5]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d113      	bne.n	8009956 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009932:	2b02      	cmp	r3, #2
 8009934:	d003      	beq.n	800993e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	799b      	ldrb	r3, [r3, #6]
 800993a:	2b03      	cmp	r3, #3
 800993c:	d10b      	bne.n	8009956 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	79db      	ldrb	r3, [r3, #7]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <USBH_ParseCfgDesc+0x14e>
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b09      	cmp	r3, #9
 800994c:	d007      	beq.n	800995e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	2209      	movs	r2, #9
 8009952:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009954:	e003      	b.n	800995e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	2207      	movs	r2, #7
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	e000      	b.n	8009960 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800995e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009964:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009968:	3201      	adds	r2, #1
 800996a:	00d2      	lsls	r2, r2, #3
 800996c:	211a      	movs	r1, #26
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	4413      	add	r3, r2
 8009974:	3308      	adds	r3, #8
 8009976:	6a3a      	ldr	r2, [r7, #32]
 8009978:	4413      	add	r3, r2
 800997a:	3304      	adds	r3, #4
 800997c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800997e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009980:	69b9      	ldr	r1, [r7, #24]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 f870 	bl	8009a68 <USBH_ParseEPDesc>
 8009988:	4603      	mov	r3, r0
 800998a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800998e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009992:	3301      	adds	r3, #1
 8009994:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	791b      	ldrb	r3, [r3, #4]
 800999c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d204      	bcs.n	80099ae <USBH_ParseCfgDesc+0x19e>
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	885a      	ldrh	r2, [r3, #2]
 80099a8:	8afb      	ldrh	r3, [r7, #22]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d8b0      	bhi.n	8009910 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	791b      	ldrb	r3, [r3, #4]
 80099b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d201      	bcs.n	80099be <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e01c      	b.n	80099f8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80099be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099c2:	3301      	adds	r3, #1
 80099c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d805      	bhi.n	80099dc <USBH_ParseCfgDesc+0x1cc>
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	885a      	ldrh	r2, [r3, #2]
 80099d4:	8afb      	ldrh	r3, [r7, #22]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	f63f af74 	bhi.w	80098c4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	791b      	ldrb	r3, [r3, #4]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	bf28      	it	cs
 80099e4:	2302      	movcs	r3, #2
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d201      	bcs.n	80099f4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e001      	b.n	80099f8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80099f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3730      	adds	r7, #48	@ 0x30
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781a      	ldrb	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	785a      	ldrb	r2, [r3, #1]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	789a      	ldrb	r2, [r3, #2]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	78da      	ldrb	r2, [r3, #3]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	bf28      	it	cs
 8009a34:	2302      	movcs	r3, #2
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	795a      	ldrb	r2, [r3, #5]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	799a      	ldrb	r2, [r3, #6]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	79da      	ldrb	r2, [r3, #7]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	7a1a      	ldrb	r2, [r3, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	721a      	strb	r2, [r3, #8]
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	781a      	ldrb	r2, [r3, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	785a      	ldrb	r2, [r3, #1]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	789a      	ldrb	r2, [r3, #2]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	78da      	ldrb	r2, [r3, #3]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3305      	adds	r3, #5
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	021b      	lsls	r3, r3, #8
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	799a      	ldrb	r2, [r3, #6]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	889b      	ldrh	r3, [r3, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aca:	d804      	bhi.n	8009ad6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad4:	d901      	bls.n	8009ada <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d136      	bne.n	8009b52 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	78db      	ldrb	r3, [r3, #3]
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d108      	bne.n	8009b02 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	889b      	ldrh	r3, [r3, #4]
 8009af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af8:	f240 8097 	bls.w	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009afc:	2303      	movs	r3, #3
 8009afe:	75fb      	strb	r3, [r7, #23]
 8009b00:	e093      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	78db      	ldrb	r3, [r3, #3]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d107      	bne.n	8009b1e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	889b      	ldrh	r3, [r3, #4]
 8009b12:	2b40      	cmp	r3, #64	@ 0x40
 8009b14:	f240 8089 	bls.w	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	75fb      	strb	r3, [r7, #23]
 8009b1c:	e085      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	78db      	ldrb	r3, [r3, #3]
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d005      	beq.n	8009b36 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d10a      	bne.n	8009b4c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	799b      	ldrb	r3, [r3, #6]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <USBH_ParseEPDesc+0xde>
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	799b      	ldrb	r3, [r3, #6]
 8009b42:	2b10      	cmp	r3, #16
 8009b44:	d970      	bls.n	8009c28 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b46:	2303      	movs	r3, #3
 8009b48:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b4a:	e06d      	b.n	8009c28 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	75fb      	strb	r3, [r7, #23]
 8009b50:	e06b      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d13c      	bne.n	8009bd6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	78db      	ldrb	r3, [r3, #3]
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d005      	beq.n	8009b74 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	78db      	ldrb	r3, [r3, #3]
 8009b6c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	889b      	ldrh	r3, [r3, #4]
 8009b78:	2b40      	cmp	r3, #64	@ 0x40
 8009b7a:	d956      	bls.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b80:	e053      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	78db      	ldrb	r3, [r3, #3]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d10e      	bne.n	8009bac <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	799b      	ldrb	r3, [r3, #6]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009b9a:	2b10      	cmp	r3, #16
 8009b9c:	d803      	bhi.n	8009ba6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009ba2:	2b40      	cmp	r3, #64	@ 0x40
 8009ba4:	d941      	bls.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	75fb      	strb	r3, [r7, #23]
 8009baa:	e03e      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	78db      	ldrb	r3, [r3, #3]
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d10b      	bne.n	8009bd0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	799b      	ldrb	r3, [r3, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <USBH_ParseEPDesc+0x162>
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	889b      	ldrh	r3, [r3, #4]
 8009bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc8:	d32f      	bcc.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	75fb      	strb	r3, [r7, #23]
 8009bce:	e02c      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	75fb      	strb	r3, [r7, #23]
 8009bd4:	e029      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d120      	bne.n	8009c22 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	78db      	ldrb	r3, [r3, #3]
 8009be4:	f003 0303 	and.w	r3, r3, #3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d106      	bne.n	8009bfa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	889b      	ldrh	r3, [r3, #4]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d01a      	beq.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	75fb      	strb	r3, [r7, #23]
 8009bf8:	e017      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	78db      	ldrb	r3, [r3, #3]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d10a      	bne.n	8009c1c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	799b      	ldrb	r3, [r3, #6]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <USBH_ParseEPDesc+0x1ae>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	889b      	ldrh	r3, [r3, #4]
 8009c12:	2b08      	cmp	r3, #8
 8009c14:	d909      	bls.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c16:	2303      	movs	r3, #3
 8009c18:	75fb      	strb	r3, [r7, #23]
 8009c1a:	e006      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	75fb      	strb	r3, [r7, #23]
 8009c20:	e003      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c22:	2303      	movs	r3, #3
 8009c24:	75fb      	strb	r3, [r7, #23]
 8009c26:	e000      	b.n	8009c2a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c28:	bf00      	nop
  }

  return status;
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d120      	bne.n	8009c92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	1e9a      	subs	r2, r3, #2
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bf28      	it	cs
 8009c5c:	4613      	movcs	r3, r2
 8009c5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3302      	adds	r3, #2
 8009c64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c66:	2300      	movs	r3, #0
 8009c68:	82fb      	strh	r3, [r7, #22]
 8009c6a:	e00b      	b.n	8009c84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c6c:	8afb      	ldrh	r3, [r7, #22]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c7e:	8afb      	ldrh	r3, [r7, #22]
 8009c80:	3302      	adds	r3, #2
 8009c82:	82fb      	strh	r3, [r7, #22]
 8009c84:	8afa      	ldrh	r2, [r7, #22]
 8009c86:	8abb      	ldrh	r3, [r7, #20]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d3ef      	bcc.n	8009c6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
  }
}
 8009c92:	bf00      	nop
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d002      	beq.n	8009cf2 <USBH_CtlReq+0x20>
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d00f      	beq.n	8009d10 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009cf0:	e027      	b.n	8009d42 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	88fa      	ldrh	r2, [r7, #6]
 8009cfc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2202      	movs	r2, #2
 8009d08:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0e:	e018      	b.n	8009d42 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f81b 	bl	8009d4c <USBH_HandleControl>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <USBH_CtlReq+0x54>
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d106      	bne.n	8009d34 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	761a      	strb	r2, [r3, #24]
      break;
 8009d32:	e005      	b.n	8009d40 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d102      	bne.n	8009d40 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	709a      	strb	r2, [r3, #2]
      break;
 8009d40:	bf00      	nop
  }
  return status;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af02      	add	r7, sp, #8
 8009d52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d54:	2301      	movs	r3, #1
 8009d56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7e1b      	ldrb	r3, [r3, #24]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	2b0a      	cmp	r3, #10
 8009d64:	f200 8156 	bhi.w	800a014 <USBH_HandleControl+0x2c8>
 8009d68:	a201      	add	r2, pc, #4	@ (adr r2, 8009d70 <USBH_HandleControl+0x24>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d9d 	.word	0x08009d9d
 8009d74:	08009db7 	.word	0x08009db7
 8009d78:	08009e21 	.word	0x08009e21
 8009d7c:	08009e47 	.word	0x08009e47
 8009d80:	08009e7f 	.word	0x08009e7f
 8009d84:	08009ea9 	.word	0x08009ea9
 8009d88:	08009efb 	.word	0x08009efb
 8009d8c:	08009f1d 	.word	0x08009f1d
 8009d90:	08009f59 	.word	0x08009f59
 8009d94:	08009f7f 	.word	0x08009f7f
 8009d98:	08009fbd 	.word	0x08009fbd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f103 0110 	add.w	r1, r3, #16
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	795b      	ldrb	r3, [r3, #5]
 8009da6:	461a      	mov	r2, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f943 	bl	800a034 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	761a      	strb	r2, [r3, #24]
      break;
 8009db4:	e139      	b.n	800a02a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	795b      	ldrb	r3, [r3, #5]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fcc5 	bl	800a74c <USBH_LL_GetURBState>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d11e      	bne.n	8009e0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7c1b      	ldrb	r3, [r3, #16]
 8009dd0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009dd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8adb      	ldrh	r3, [r3, #22]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009dde:	7b7b      	ldrb	r3, [r7, #13]
 8009de0:	2b80      	cmp	r3, #128	@ 0x80
 8009de2:	d103      	bne.n	8009dec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2203      	movs	r2, #3
 8009de8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009dea:	e115      	b.n	800a018 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2205      	movs	r2, #5
 8009df0:	761a      	strb	r2, [r3, #24]
      break;
 8009df2:	e111      	b.n	800a018 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009df4:	7b7b      	ldrb	r3, [r7, #13]
 8009df6:	2b80      	cmp	r3, #128	@ 0x80
 8009df8:	d103      	bne.n	8009e02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2209      	movs	r2, #9
 8009dfe:	761a      	strb	r2, [r3, #24]
      break;
 8009e00:	e10a      	b.n	800a018 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2207      	movs	r2, #7
 8009e06:	761a      	strb	r2, [r3, #24]
      break;
 8009e08:	e106      	b.n	800a018 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d003      	beq.n	8009e18 <USBH_HandleControl+0xcc>
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	f040 8100 	bne.w	800a018 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	220b      	movs	r2, #11
 8009e1c:	761a      	strb	r2, [r3, #24]
      break;
 8009e1e:	e0fb      	b.n	800a018 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6899      	ldr	r1, [r3, #8]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	899a      	ldrh	r2, [r3, #12]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	791b      	ldrb	r3, [r3, #4]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f93a 	bl	800a0b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2204      	movs	r2, #4
 8009e42:	761a      	strb	r2, [r3, #24]
      break;
 8009e44:	e0f1      	b.n	800a02a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	791b      	ldrb	r3, [r3, #4]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fc7d 	bl	800a74c <USBH_LL_GetURBState>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d102      	bne.n	8009e62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2209      	movs	r2, #9
 8009e60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	2b05      	cmp	r3, #5
 8009e66:	d102      	bne.n	8009e6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e6c:	e0d6      	b.n	800a01c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	f040 80d3 	bne.w	800a01c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	220b      	movs	r2, #11
 8009e7a:	761a      	strb	r2, [r3, #24]
      break;
 8009e7c:	e0ce      	b.n	800a01c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6899      	ldr	r1, [r3, #8]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	899a      	ldrh	r2, [r3, #12]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	795b      	ldrb	r3, [r3, #5]
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	9000      	str	r0, [sp, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8ea 	bl	800a068 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2206      	movs	r2, #6
 8009ea4:	761a      	strb	r2, [r3, #24]
      break;
 8009ea6:	e0c0      	b.n	800a02a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	795b      	ldrb	r3, [r3, #5]
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fc4c 	bl	800a74c <USBH_LL_GetURBState>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d103      	bne.n	8009ec6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2207      	movs	r2, #7
 8009ec2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ec4:	e0ac      	b.n	800a020 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b05      	cmp	r3, #5
 8009eca:	d105      	bne.n	8009ed8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	220c      	movs	r2, #12
 8009ed0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed6:	e0a3      	b.n	800a020 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d103      	bne.n	8009ee6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2205      	movs	r2, #5
 8009ee2:	761a      	strb	r2, [r3, #24]
      break;
 8009ee4:	e09c      	b.n	800a020 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	f040 8099 	bne.w	800a020 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	220b      	movs	r2, #11
 8009ef2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef8:	e092      	b.n	800a020 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	791b      	ldrb	r3, [r3, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f8d5 	bl	800a0b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2208      	movs	r2, #8
 8009f18:	761a      	strb	r2, [r3, #24]

      break;
 8009f1a:	e086      	b.n	800a02a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	791b      	ldrb	r3, [r3, #4]
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fc12 	bl	800a74c <USBH_LL_GetURBState>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d105      	bne.n	8009f3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	220d      	movs	r2, #13
 8009f36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f3c:	e072      	b.n	800a024 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d103      	bne.n	8009f4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	220b      	movs	r2, #11
 8009f48:	761a      	strb	r2, [r3, #24]
      break;
 8009f4a:	e06b      	b.n	800a024 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b05      	cmp	r3, #5
 8009f50:	d168      	bne.n	800a024 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f52:	2303      	movs	r3, #3
 8009f54:	73fb      	strb	r3, [r7, #15]
      break;
 8009f56:	e065      	b.n	800a024 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	795b      	ldrb	r3, [r3, #5]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	9200      	str	r2, [sp, #0]
 8009f60:	2200      	movs	r2, #0
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f87f 	bl	800a068 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	220a      	movs	r2, #10
 8009f7a:	761a      	strb	r2, [r3, #24]
      break;
 8009f7c:	e055      	b.n	800a02a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	795b      	ldrb	r3, [r3, #5]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fbe1 	bl	800a74c <USBH_LL_GetURBState>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d105      	bne.n	8009fa0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	220d      	movs	r2, #13
 8009f9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f9e:	e043      	b.n	800a028 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d103      	bne.n	8009fae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2209      	movs	r2, #9
 8009faa:	761a      	strb	r2, [r3, #24]
      break;
 8009fac:	e03c      	b.n	800a028 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d139      	bne.n	800a028 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	220b      	movs	r2, #11
 8009fb8:	761a      	strb	r2, [r3, #24]
      break;
 8009fba:	e035      	b.n	800a028 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	7e5b      	ldrb	r3, [r3, #25]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	765a      	strb	r2, [r3, #25]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7e5b      	ldrb	r3, [r3, #25]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d806      	bhi.n	8009fde <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fdc:	e025      	b.n	800a02a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fe4:	2106      	movs	r1, #6
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	795b      	ldrb	r3, [r3, #5]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f90c 	bl	800a214 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	791b      	ldrb	r3, [r3, #4]
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f906 	bl	800a214 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a00e:	2302      	movs	r3, #2
 800a010:	73fb      	strb	r3, [r7, #15]
      break;
 800a012:	e00a      	b.n	800a02a <USBH_HandleControl+0x2de>

    default:
      break;
 800a014:	bf00      	nop
 800a016:	e008      	b.n	800a02a <USBH_HandleControl+0x2de>
      break;
 800a018:	bf00      	nop
 800a01a:	e006      	b.n	800a02a <USBH_HandleControl+0x2de>
      break;
 800a01c:	bf00      	nop
 800a01e:	e004      	b.n	800a02a <USBH_HandleControl+0x2de>
      break;
 800a020:	bf00      	nop
 800a022:	e002      	b.n	800a02a <USBH_HandleControl+0x2de>
      break;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <USBH_HandleControl+0x2de>
      break;
 800a028:	bf00      	nop
  }

  return status;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af04      	add	r7, sp, #16
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	4613      	mov	r3, r2
 800a040:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a042:	79f9      	ldrb	r1, [r7, #7]
 800a044:	2300      	movs	r3, #0
 800a046:	9303      	str	r3, [sp, #12]
 800a048:	2308      	movs	r3, #8
 800a04a:	9302      	str	r3, [sp, #8]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	2300      	movs	r3, #0
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	2300      	movs	r3, #0
 800a056:	2200      	movs	r2, #0
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fb46 	bl	800a6ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af04      	add	r7, sp, #16
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4611      	mov	r1, r2
 800a074:	461a      	mov	r2, r3
 800a076:	460b      	mov	r3, r1
 800a078:	80fb      	strh	r3, [r7, #6]
 800a07a:	4613      	mov	r3, r2
 800a07c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a08c:	7979      	ldrb	r1, [r7, #5]
 800a08e:	7e3b      	ldrb	r3, [r7, #24]
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	9302      	str	r3, [sp, #8]
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	2301      	movs	r3, #1
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 fb21 	bl	800a6ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b088      	sub	sp, #32
 800a0b6:	af04      	add	r7, sp, #16
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	461a      	mov	r2, r3
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	80fb      	strh	r3, [r7, #6]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0c8:	7979      	ldrb	r1, [r7, #5]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9303      	str	r3, [sp, #12]
 800a0ce:	88fb      	ldrh	r3, [r7, #6]
 800a0d0:	9302      	str	r3, [sp, #8]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2201      	movs	r2, #1
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 fb03 	bl	800a6ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0e4:	2300      	movs	r3, #0

}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b088      	sub	sp, #32
 800a0f2:	af04      	add	r7, sp, #16
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	80fb      	strh	r3, [r7, #6]
 800a100:	4613      	mov	r3, r2
 800a102:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a112:	7979      	ldrb	r1, [r7, #5]
 800a114:	7e3b      	ldrb	r3, [r7, #24]
 800a116:	9303      	str	r3, [sp, #12]
 800a118:	88fb      	ldrh	r3, [r7, #6]
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	2301      	movs	r3, #1
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	2302      	movs	r3, #2
 800a126:	2200      	movs	r2, #0
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fade 	bl	800a6ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4611      	mov	r1, r2
 800a144:	461a      	mov	r2, r3
 800a146:	460b      	mov	r3, r1
 800a148:	80fb      	strh	r3, [r7, #6]
 800a14a:	4613      	mov	r3, r2
 800a14c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a14e:	7979      	ldrb	r1, [r7, #5]
 800a150:	2300      	movs	r3, #0
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	88fb      	ldrh	r3, [r7, #6]
 800a156:	9302      	str	r3, [sp, #8]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	2301      	movs	r3, #1
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	2302      	movs	r3, #2
 800a162:	2201      	movs	r2, #1
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fac0 	bl	800a6ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af04      	add	r7, sp, #16
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4603      	mov	r3, r0
 800a184:	70fb      	strb	r3, [r7, #3]
 800a186:	460b      	mov	r3, r1
 800a188:	70bb      	strb	r3, [r7, #2]
 800a18a:	4613      	mov	r3, r2
 800a18c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a18e:	7878      	ldrb	r0, [r7, #1]
 800a190:	78ba      	ldrb	r2, [r7, #2]
 800a192:	78f9      	ldrb	r1, [r7, #3]
 800a194:	8b3b      	ldrh	r3, [r7, #24]
 800a196:	9302      	str	r3, [sp, #8]
 800a198:	7d3b      	ldrb	r3, [r7, #20]
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	7c3b      	ldrb	r3, [r7, #16]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fa53 	bl	800a64e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fa72 	bl	800a6ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f836 	bl	800a250 <USBH_GetFreePipe>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a1e8:	89fb      	ldrh	r3, [r7, #14]
 800a1ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d00a      	beq.n	800a208 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	33e0      	adds	r3, #224	@ 0xe0
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	440b      	add	r3, r1
 800a206:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a208:	89fb      	ldrh	r3, [r7, #14]
 800a20a:	b2db      	uxtb	r3, r3
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	2b0f      	cmp	r3, #15
 800a224:	d80d      	bhi.n	800a242 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a226:	78fb      	ldrb	r3, [r7, #3]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	33e0      	adds	r3, #224	@ 0xe0
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	33e0      	adds	r3, #224	@ 0xe0
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	440b      	add	r3, r1
 800a240:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a25c:	2300      	movs	r3, #0
 800a25e:	73fb      	strb	r3, [r7, #15]
 800a260:	e00f      	b.n	800a282 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	33e0      	adds	r3, #224	@ 0xe0
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d102      	bne.n	800a27c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	e007      	b.n	800a28c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	3301      	adds	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	2b0f      	cmp	r3, #15
 800a286:	d9ec      	bls.n	800a262 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a288:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a29c:	2201      	movs	r2, #1
 800a29e:	490e      	ldr	r1, [pc, #56]	@ (800a2d8 <MX_USB_HOST_Init+0x40>)
 800a2a0:	480e      	ldr	r0, [pc, #56]	@ (800a2dc <MX_USB_HOST_Init+0x44>)
 800a2a2:	f7fe fb15 	bl	80088d0 <USBH_Init>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a2ac:	f7f7 fb72 	bl	8001994 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a2b0:	490b      	ldr	r1, [pc, #44]	@ (800a2e0 <MX_USB_HOST_Init+0x48>)
 800a2b2:	480a      	ldr	r0, [pc, #40]	@ (800a2dc <MX_USB_HOST_Init+0x44>)
 800a2b4:	f7fe fbb9 	bl	8008a2a <USBH_RegisterClass>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a2be:	f7f7 fb69 	bl	8001994 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a2c2:	4806      	ldr	r0, [pc, #24]	@ (800a2dc <MX_USB_HOST_Init+0x44>)
 800a2c4:	f7fe fc3d 	bl	8008b42 <USBH_Start>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a2ce:	f7f7 fb61 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a2d2:	bf00      	nop
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0800a2f9 	.word	0x0800a2f9
 800a2dc:	20000858 	.word	0x20000858
 800a2e0:	2000004c 	.word	0x2000004c

0800a2e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a2e8:	4802      	ldr	r0, [pc, #8]	@ (800a2f4 <MX_USB_HOST_Process+0x10>)
 800a2ea:	f7fe fc3b 	bl	8008b64 <USBH_Process>
}
 800a2ee:	bf00      	nop
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000858 	.word	0x20000858

0800a2f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	3b01      	subs	r3, #1
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d819      	bhi.n	800a340 <USBH_UserProcess+0x48>
 800a30c:	a201      	add	r2, pc, #4	@ (adr r2, 800a314 <USBH_UserProcess+0x1c>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a341 	.word	0x0800a341
 800a318:	0800a331 	.word	0x0800a331
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a339 	.word	0x0800a339
 800a324:	0800a329 	.word	0x0800a329
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a328:	4b09      	ldr	r3, [pc, #36]	@ (800a350 <USBH_UserProcess+0x58>)
 800a32a:	2203      	movs	r2, #3
 800a32c:	701a      	strb	r2, [r3, #0]
  break;
 800a32e:	e008      	b.n	800a342 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a330:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <USBH_UserProcess+0x58>)
 800a332:	2202      	movs	r2, #2
 800a334:	701a      	strb	r2, [r3, #0]
  break;
 800a336:	e004      	b.n	800a342 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a338:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <USBH_UserProcess+0x58>)
 800a33a:	2201      	movs	r2, #1
 800a33c:	701a      	strb	r2, [r3, #0]
  break;
 800a33e:	e000      	b.n	800a342 <USBH_UserProcess+0x4a>

  default:
  break;
 800a340:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20000c30 	.word	0x20000c30

0800a354 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08a      	sub	sp, #40	@ 0x28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	609a      	str	r2, [r3, #8]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a374:	d147      	bne.n	800a406 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a376:	2300      	movs	r3, #0
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	4b25      	ldr	r3, [pc, #148]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37e:	4a24      	ldr	r2, [pc, #144]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a380:	f043 0301 	orr.w	r3, r3, #1
 800a384:	6313      	str	r3, [r2, #48]	@ 0x30
 800a386:	4b22      	ldr	r3, [pc, #136]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	613b      	str	r3, [r7, #16]
 800a390:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a398:	2300      	movs	r3, #0
 800a39a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a3a0:	f107 0314 	add.w	r3, r7, #20
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	481b      	ldr	r0, [pc, #108]	@ (800a414 <HAL_HCD_MspInit+0xc0>)
 800a3a8:	f7f8 fc36 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a3ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a3b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3be:	230a      	movs	r3, #10
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3c2:	f107 0314 	add.w	r3, r7, #20
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4812      	ldr	r0, [pc, #72]	@ (800a414 <HAL_HCD_MspInit+0xc0>)
 800a3ca:	f7f8 fc25 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3ce:	4b10      	ldr	r3, [pc, #64]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d2:	4a0f      	ldr	r2, [pc, #60]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a3d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e2:	4a0b      	ldr	r2, [pc, #44]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a3e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3e8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a3ea:	4b09      	ldr	r3, [pc, #36]	@ (800a410 <HAL_HCD_MspInit+0xbc>)
 800a3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	2043      	movs	r0, #67	@ 0x43
 800a3fc:	f7f8 fb5b 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a400:	2043      	movs	r0, #67	@ 0x43
 800a402:	f7f8 fb74 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a406:	bf00      	nop
 800a408:	3728      	adds	r7, #40	@ 0x28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	40023800 	.word	0x40023800
 800a414:	40020000 	.word	0x40020000

0800a418 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe ff73 	bl	8009312 <USBH_LL_IncTimer>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe ffab 	bl	800939e <USBH_LL_Connect>
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe ffb4 	bl	80093cc <USBH_LL_Disconnect>
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
 800a478:	4613      	mov	r3, r2
 800a47a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe ff65 	bl	8009366 <USBH_LL_PortEnabled>
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe ff65 	bl	8009382 <USBH_LL_PortDisabled>
}
 800a4b8:	bf00      	nop
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d12a      	bne.n	800a528 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a4d2:	4a18      	ldr	r2, [pc, #96]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a15      	ldr	r2, [pc, #84]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4de:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4e2:	4b14      	ldr	r3, [pc, #80]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a4e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a4ea:	4b12      	ldr	r3, [pc, #72]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4f0:	4b10      	ldr	r3, [pc, #64]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <USBH_LL_Init+0x74>)
 800a4fe:	2202      	movs	r2, #2
 800a500:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a502:	4b0c      	ldr	r3, [pc, #48]	@ (800a534 <USBH_LL_Init+0x74>)
 800a504:	2200      	movs	r2, #0
 800a506:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a508:	480a      	ldr	r0, [pc, #40]	@ (800a534 <USBH_LL_Init+0x74>)
 800a50a:	f7f8 fd3a 	bl	8002f82 <HAL_HCD_Init>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a514:	f7f7 fa3e 	bl	8001994 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a518:	4806      	ldr	r0, [pc, #24]	@ (800a534 <USBH_LL_Init+0x74>)
 800a51a:	f7f9 f99b 	bl	8003854 <HAL_HCD_GetCurrentFrame>
 800a51e:	4603      	mov	r3, r0
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7fe fee6 	bl	80092f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000c34 	.word	0x20000c34

0800a538 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f9 f908 	bl	8003764 <HAL_HCD_Start>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f95e 	bl	800a81c <USBH_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a564:	7bbb      	ldrb	r3, [r7, #14]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a584:	4618      	mov	r0, r3
 800a586:	f7f9 f910 	bl	80037aa <HAL_HCD_Stop>
 800a58a:	4603      	mov	r3, r0
 800a58c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
 800a590:	4618      	mov	r0, r3
 800a592:	f000 f943 	bl	800a81c <USBH_Get_USB_Status>
 800a596:	4603      	mov	r3, r0
 800a598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7f9 f95a 	bl	8003870 <HAL_HCD_GetCurrentSpeed>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d00c      	beq.n	800a5dc <USBH_LL_GetSpeed+0x38>
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d80d      	bhi.n	800a5e2 <USBH_LL_GetSpeed+0x3e>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <USBH_LL_GetSpeed+0x2c>
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d003      	beq.n	800a5d6 <USBH_LL_GetSpeed+0x32>
 800a5ce:	e008      	b.n	800a5e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d4:	e008      	b.n	800a5e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5da:	e005      	b.n	800a5e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e0:	e002      	b.n	800a5e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e6:	bf00      	nop
  }
  return  speed;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f9 f8eb 	bl	80037e4 <HAL_HCD_ResetPort>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f901 	bl	800a81c <USBH_Get_USB_Status>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a63a:	78fa      	ldrb	r2, [r7, #3]
 800a63c:	4611      	mov	r1, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	f7f9 f8f3 	bl	800382a <HAL_HCD_HC_GetXferCount>
 800a644:	4603      	mov	r3, r0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a64e:	b590      	push	{r4, r7, lr}
 800a650:	b089      	sub	sp, #36	@ 0x24
 800a652:	af04      	add	r7, sp, #16
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	461a      	mov	r2, r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	70fb      	strb	r3, [r7, #3]
 800a660:	460b      	mov	r3, r1
 800a662:	70bb      	strb	r3, [r7, #2]
 800a664:	4613      	mov	r3, r2
 800a666:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a676:	787c      	ldrb	r4, [r7, #1]
 800a678:	78ba      	ldrb	r2, [r7, #2]
 800a67a:	78f9      	ldrb	r1, [r7, #3]
 800a67c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a67e:	9302      	str	r3, [sp, #8]
 800a680:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	4623      	mov	r3, r4
 800a68e:	f7f8 fcdf 	bl	8003050 <HAL_HCD_HC_Init>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f8bf 	bl	800a81c <USBH_Get_USB_Status>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd90      	pop	{r4, r7, pc}

0800a6ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6c6:	78fa      	ldrb	r2, [r7, #3]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f8 fd78 	bl	80031c0 <HAL_HCD_HC_Halt>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 f8a0 	bl	800a81c <USBH_Get_USB_Status>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a6ea:	b590      	push	{r4, r7, lr}
 800a6ec:	b089      	sub	sp, #36	@ 0x24
 800a6ee:	af04      	add	r7, sp, #16
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	70fb      	strb	r3, [r7, #3]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70bb      	strb	r3, [r7, #2]
 800a700:	4613      	mov	r3, r2
 800a702:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a712:	787c      	ldrb	r4, [r7, #1]
 800a714:	78ba      	ldrb	r2, [r7, #2]
 800a716:	78f9      	ldrb	r1, [r7, #3]
 800a718:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a720:	9302      	str	r3, [sp, #8]
 800a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	4623      	mov	r3, r4
 800a72e:	f7f8 fd6b 	bl	8003208 <HAL_HCD_HC_SubmitRequest>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f86f 	bl	800a81c <USBH_Get_USB_Status>
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a742:	7bbb      	ldrb	r3, [r7, #14]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd90      	pop	{r4, r7, pc}

0800a74c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a75e:	78fa      	ldrb	r2, [r7, #3]
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f7f9 f84c 	bl	8003800 <HAL_HCD_HC_GetURBState>
 800a768:	4603      	mov	r3, r0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a784:	2b01      	cmp	r3, #1
 800a786:	d103      	bne.n	800a790 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f872 	bl	800a874 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a790:	20c8      	movs	r0, #200	@ 0xc8
 800a792:	f7f7 fcc5 	bl	8002120 <HAL_Delay>
  return USBH_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	011b      	lsls	r3, r3, #4
 800a7c0:	1a9b      	subs	r3, r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	440b      	add	r3, r1
 800a7c6:	3317      	adds	r3, #23
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	68f9      	ldr	r1, [r7, #12]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	1a9b      	subs	r3, r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	440b      	add	r3, r1
 800a7dc:	333c      	adds	r3, #60	@ 0x3c
 800a7de:	78ba      	ldrb	r2, [r7, #2]
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	e009      	b.n	800a7f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a7e4:	78fa      	ldrb	r2, [r7, #3]
 800a7e6:	68f9      	ldr	r1, [r7, #12]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	011b      	lsls	r3, r3, #4
 800a7ec:	1a9b      	subs	r3, r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	333d      	adds	r3, #61	@ 0x3d
 800a7f4:	78ba      	ldrb	r2, [r7, #2]
 800a7f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7f7 fc86 	bl	8002120 <HAL_Delay>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d817      	bhi.n	800a860 <USBH_Get_USB_Status+0x44>
 800a830:	a201      	add	r2, pc, #4	@ (adr r2, 800a838 <USBH_Get_USB_Status+0x1c>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a849 	.word	0x0800a849
 800a83c:	0800a84f 	.word	0x0800a84f
 800a840:	0800a855 	.word	0x0800a855
 800a844:	0800a85b 	.word	0x0800a85b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
    break;
 800a84c:	e00b      	b.n	800a866 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a84e:	2302      	movs	r3, #2
 800a850:	73fb      	strb	r3, [r7, #15]
    break;
 800a852:	e008      	b.n	800a866 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
    break;
 800a858:	e005      	b.n	800a866 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a85a:	2302      	movs	r3, #2
 800a85c:	73fb      	strb	r3, [r7, #15]
    break;
 800a85e:	e002      	b.n	800a866 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a860:	2302      	movs	r3, #2
 800a862:	73fb      	strb	r3, [r7, #15]
    break;
 800a864:	bf00      	nop
  }
  return usb_status;
 800a866:	7bfb      	ldrb	r3, [r7, #15]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a888:	2301      	movs	r3, #1
 800a88a:	73fb      	strb	r3, [r7, #15]
 800a88c:	e001      	b.n	800a892 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	461a      	mov	r2, r3
 800a896:	2101      	movs	r1, #1
 800a898:	4803      	ldr	r0, [pc, #12]	@ (800a8a8 <MX_DriverVbusFS+0x34>)
 800a89a:	f7f8 fb59 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40020800 	.word	0x40020800

0800a8ac <malloc>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	@ (800a8b8 <malloc+0xc>)
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	f000 b82d 	b.w	800a910 <_malloc_r>
 800a8b6:	bf00      	nop
 800a8b8:	20000078 	.word	0x20000078

0800a8bc <free>:
 800a8bc:	4b02      	ldr	r3, [pc, #8]	@ (800a8c8 <free+0xc>)
 800a8be:	4601      	mov	r1, r0
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f001 bced 	b.w	800c2a0 <_free_r>
 800a8c6:	bf00      	nop
 800a8c8:	20000078 	.word	0x20000078

0800a8cc <sbrk_aligned>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	4e0f      	ldr	r6, [pc, #60]	@ (800a90c <sbrk_aligned+0x40>)
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	6831      	ldr	r1, [r6, #0]
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	b911      	cbnz	r1, 800a8de <sbrk_aligned+0x12>
 800a8d8:	f000 fe44 	bl	800b564 <_sbrk_r>
 800a8dc:	6030      	str	r0, [r6, #0]
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 fe3f 	bl	800b564 <_sbrk_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d103      	bne.n	800a8f2 <sbrk_aligned+0x26>
 800a8ea:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
 800a8f2:	1cc4      	adds	r4, r0, #3
 800a8f4:	f024 0403 	bic.w	r4, r4, #3
 800a8f8:	42a0      	cmp	r0, r4
 800a8fa:	d0f8      	beq.n	800a8ee <sbrk_aligned+0x22>
 800a8fc:	1a21      	subs	r1, r4, r0
 800a8fe:	4628      	mov	r0, r5
 800a900:	f000 fe30 	bl	800b564 <_sbrk_r>
 800a904:	3001      	adds	r0, #1
 800a906:	d1f2      	bne.n	800a8ee <sbrk_aligned+0x22>
 800a908:	e7ef      	b.n	800a8ea <sbrk_aligned+0x1e>
 800a90a:	bf00      	nop
 800a90c:	20001014 	.word	0x20001014

0800a910 <_malloc_r>:
 800a910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a914:	1ccd      	adds	r5, r1, #3
 800a916:	f025 0503 	bic.w	r5, r5, #3
 800a91a:	3508      	adds	r5, #8
 800a91c:	2d0c      	cmp	r5, #12
 800a91e:	bf38      	it	cc
 800a920:	250c      	movcc	r5, #12
 800a922:	2d00      	cmp	r5, #0
 800a924:	4606      	mov	r6, r0
 800a926:	db01      	blt.n	800a92c <_malloc_r+0x1c>
 800a928:	42a9      	cmp	r1, r5
 800a92a:	d904      	bls.n	800a936 <_malloc_r+0x26>
 800a92c:	230c      	movs	r3, #12
 800a92e:	6033      	str	r3, [r6, #0]
 800a930:	2000      	movs	r0, #0
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa0c <_malloc_r+0xfc>
 800a93a:	f000 f869 	bl	800aa10 <__malloc_lock>
 800a93e:	f8d8 3000 	ldr.w	r3, [r8]
 800a942:	461c      	mov	r4, r3
 800a944:	bb44      	cbnz	r4, 800a998 <_malloc_r+0x88>
 800a946:	4629      	mov	r1, r5
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff ffbf 	bl	800a8cc <sbrk_aligned>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	4604      	mov	r4, r0
 800a952:	d158      	bne.n	800aa06 <_malloc_r+0xf6>
 800a954:	f8d8 4000 	ldr.w	r4, [r8]
 800a958:	4627      	mov	r7, r4
 800a95a:	2f00      	cmp	r7, #0
 800a95c:	d143      	bne.n	800a9e6 <_malloc_r+0xd6>
 800a95e:	2c00      	cmp	r4, #0
 800a960:	d04b      	beq.n	800a9fa <_malloc_r+0xea>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	4639      	mov	r1, r7
 800a966:	4630      	mov	r0, r6
 800a968:	eb04 0903 	add.w	r9, r4, r3
 800a96c:	f000 fdfa 	bl	800b564 <_sbrk_r>
 800a970:	4581      	cmp	r9, r0
 800a972:	d142      	bne.n	800a9fa <_malloc_r+0xea>
 800a974:	6821      	ldr	r1, [r4, #0]
 800a976:	1a6d      	subs	r5, r5, r1
 800a978:	4629      	mov	r1, r5
 800a97a:	4630      	mov	r0, r6
 800a97c:	f7ff ffa6 	bl	800a8cc <sbrk_aligned>
 800a980:	3001      	adds	r0, #1
 800a982:	d03a      	beq.n	800a9fa <_malloc_r+0xea>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	442b      	add	r3, r5
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	f8d8 3000 	ldr.w	r3, [r8]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	bb62      	cbnz	r2, 800a9ec <_malloc_r+0xdc>
 800a992:	f8c8 7000 	str.w	r7, [r8]
 800a996:	e00f      	b.n	800a9b8 <_malloc_r+0xa8>
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	1b52      	subs	r2, r2, r5
 800a99c:	d420      	bmi.n	800a9e0 <_malloc_r+0xd0>
 800a99e:	2a0b      	cmp	r2, #11
 800a9a0:	d917      	bls.n	800a9d2 <_malloc_r+0xc2>
 800a9a2:	1961      	adds	r1, r4, r5
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	6025      	str	r5, [r4, #0]
 800a9a8:	bf18      	it	ne
 800a9aa:	6059      	strne	r1, [r3, #4]
 800a9ac:	6863      	ldr	r3, [r4, #4]
 800a9ae:	bf08      	it	eq
 800a9b0:	f8c8 1000 	streq.w	r1, [r8]
 800a9b4:	5162      	str	r2, [r4, r5]
 800a9b6:	604b      	str	r3, [r1, #4]
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f000 f82f 	bl	800aa1c <__malloc_unlock>
 800a9be:	f104 000b 	add.w	r0, r4, #11
 800a9c2:	1d23      	adds	r3, r4, #4
 800a9c4:	f020 0007 	bic.w	r0, r0, #7
 800a9c8:	1ac2      	subs	r2, r0, r3
 800a9ca:	bf1c      	itt	ne
 800a9cc:	1a1b      	subne	r3, r3, r0
 800a9ce:	50a3      	strne	r3, [r4, r2]
 800a9d0:	e7af      	b.n	800a932 <_malloc_r+0x22>
 800a9d2:	6862      	ldr	r2, [r4, #4]
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	bf0c      	ite	eq
 800a9d8:	f8c8 2000 	streq.w	r2, [r8]
 800a9dc:	605a      	strne	r2, [r3, #4]
 800a9de:	e7eb      	b.n	800a9b8 <_malloc_r+0xa8>
 800a9e0:	4623      	mov	r3, r4
 800a9e2:	6864      	ldr	r4, [r4, #4]
 800a9e4:	e7ae      	b.n	800a944 <_malloc_r+0x34>
 800a9e6:	463c      	mov	r4, r7
 800a9e8:	687f      	ldr	r7, [r7, #4]
 800a9ea:	e7b6      	b.n	800a95a <_malloc_r+0x4a>
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	42a3      	cmp	r3, r4
 800a9f2:	d1fb      	bne.n	800a9ec <_malloc_r+0xdc>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6053      	str	r3, [r2, #4]
 800a9f8:	e7de      	b.n	800a9b8 <_malloc_r+0xa8>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f000 f80c 	bl	800aa1c <__malloc_unlock>
 800aa04:	e794      	b.n	800a930 <_malloc_r+0x20>
 800aa06:	6005      	str	r5, [r0, #0]
 800aa08:	e7d6      	b.n	800a9b8 <_malloc_r+0xa8>
 800aa0a:	bf00      	nop
 800aa0c:	20001018 	.word	0x20001018

0800aa10 <__malloc_lock>:
 800aa10:	4801      	ldr	r0, [pc, #4]	@ (800aa18 <__malloc_lock+0x8>)
 800aa12:	f000 bdf4 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800aa16:	bf00      	nop
 800aa18:	2000115c 	.word	0x2000115c

0800aa1c <__malloc_unlock>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	@ (800aa24 <__malloc_unlock+0x8>)
 800aa1e:	f000 bdef 	b.w	800b600 <__retarget_lock_release_recursive>
 800aa22:	bf00      	nop
 800aa24:	2000115c 	.word	0x2000115c

0800aa28 <__cvt>:
 800aa28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	ec57 6b10 	vmov	r6, r7, d0
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	460c      	mov	r4, r1
 800aa34:	4619      	mov	r1, r3
 800aa36:	463b      	mov	r3, r7
 800aa38:	bfbb      	ittet	lt
 800aa3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aa3e:	461f      	movlt	r7, r3
 800aa40:	2300      	movge	r3, #0
 800aa42:	232d      	movlt	r3, #45	@ 0x2d
 800aa44:	700b      	strb	r3, [r1, #0]
 800aa46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa4c:	4691      	mov	r9, r2
 800aa4e:	f023 0820 	bic.w	r8, r3, #32
 800aa52:	bfbc      	itt	lt
 800aa54:	4632      	movlt	r2, r6
 800aa56:	4616      	movlt	r6, r2
 800aa58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa5c:	d005      	beq.n	800aa6a <__cvt+0x42>
 800aa5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa62:	d100      	bne.n	800aa66 <__cvt+0x3e>
 800aa64:	3401      	adds	r4, #1
 800aa66:	2102      	movs	r1, #2
 800aa68:	e000      	b.n	800aa6c <__cvt+0x44>
 800aa6a:	2103      	movs	r1, #3
 800aa6c:	ab03      	add	r3, sp, #12
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	ab02      	add	r3, sp, #8
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	ec47 6b10 	vmov	d0, r6, r7
 800aa78:	4653      	mov	r3, sl
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	f000 fe4c 	bl	800b718 <_dtoa_r>
 800aa80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa84:	4605      	mov	r5, r0
 800aa86:	d119      	bne.n	800aabc <__cvt+0x94>
 800aa88:	f019 0f01 	tst.w	r9, #1
 800aa8c:	d00e      	beq.n	800aaac <__cvt+0x84>
 800aa8e:	eb00 0904 	add.w	r9, r0, r4
 800aa92:	2200      	movs	r2, #0
 800aa94:	2300      	movs	r3, #0
 800aa96:	4630      	mov	r0, r6
 800aa98:	4639      	mov	r1, r7
 800aa9a:	f7f6 f815 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa9e:	b108      	cbz	r0, 800aaa4 <__cvt+0x7c>
 800aaa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aaa4:	2230      	movs	r2, #48	@ 0x30
 800aaa6:	9b03      	ldr	r3, [sp, #12]
 800aaa8:	454b      	cmp	r3, r9
 800aaaa:	d31e      	bcc.n	800aaea <__cvt+0xc2>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aab0:	1b5b      	subs	r3, r3, r5
 800aab2:	4628      	mov	r0, r5
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	b004      	add	sp, #16
 800aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aac0:	eb00 0904 	add.w	r9, r0, r4
 800aac4:	d1e5      	bne.n	800aa92 <__cvt+0x6a>
 800aac6:	7803      	ldrb	r3, [r0, #0]
 800aac8:	2b30      	cmp	r3, #48	@ 0x30
 800aaca:	d10a      	bne.n	800aae2 <__cvt+0xba>
 800aacc:	2200      	movs	r2, #0
 800aace:	2300      	movs	r3, #0
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f5 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad8:	b918      	cbnz	r0, 800aae2 <__cvt+0xba>
 800aada:	f1c4 0401 	rsb	r4, r4, #1
 800aade:	f8ca 4000 	str.w	r4, [sl]
 800aae2:	f8da 3000 	ldr.w	r3, [sl]
 800aae6:	4499      	add	r9, r3
 800aae8:	e7d3      	b.n	800aa92 <__cvt+0x6a>
 800aaea:	1c59      	adds	r1, r3, #1
 800aaec:	9103      	str	r1, [sp, #12]
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e7d9      	b.n	800aaa6 <__cvt+0x7e>

0800aaf2 <__exponent>:
 800aaf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	bfba      	itte	lt
 800aaf8:	4249      	neglt	r1, r1
 800aafa:	232d      	movlt	r3, #45	@ 0x2d
 800aafc:	232b      	movge	r3, #43	@ 0x2b
 800aafe:	2909      	cmp	r1, #9
 800ab00:	7002      	strb	r2, [r0, #0]
 800ab02:	7043      	strb	r3, [r0, #1]
 800ab04:	dd29      	ble.n	800ab5a <__exponent+0x68>
 800ab06:	f10d 0307 	add.w	r3, sp, #7
 800ab0a:	461d      	mov	r5, r3
 800ab0c:	270a      	movs	r7, #10
 800ab0e:	461a      	mov	r2, r3
 800ab10:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab14:	fb07 1416 	mls	r4, r7, r6, r1
 800ab18:	3430      	adds	r4, #48	@ 0x30
 800ab1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab1e:	460c      	mov	r4, r1
 800ab20:	2c63      	cmp	r4, #99	@ 0x63
 800ab22:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab26:	4631      	mov	r1, r6
 800ab28:	dcf1      	bgt.n	800ab0e <__exponent+0x1c>
 800ab2a:	3130      	adds	r1, #48	@ 0x30
 800ab2c:	1e94      	subs	r4, r2, #2
 800ab2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab32:	1c41      	adds	r1, r0, #1
 800ab34:	4623      	mov	r3, r4
 800ab36:	42ab      	cmp	r3, r5
 800ab38:	d30a      	bcc.n	800ab50 <__exponent+0x5e>
 800ab3a:	f10d 0309 	add.w	r3, sp, #9
 800ab3e:	1a9b      	subs	r3, r3, r2
 800ab40:	42ac      	cmp	r4, r5
 800ab42:	bf88      	it	hi
 800ab44:	2300      	movhi	r3, #0
 800ab46:	3302      	adds	r3, #2
 800ab48:	4403      	add	r3, r0
 800ab4a:	1a18      	subs	r0, r3, r0
 800ab4c:	b003      	add	sp, #12
 800ab4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab58:	e7ed      	b.n	800ab36 <__exponent+0x44>
 800ab5a:	2330      	movs	r3, #48	@ 0x30
 800ab5c:	3130      	adds	r1, #48	@ 0x30
 800ab5e:	7083      	strb	r3, [r0, #2]
 800ab60:	70c1      	strb	r1, [r0, #3]
 800ab62:	1d03      	adds	r3, r0, #4
 800ab64:	e7f1      	b.n	800ab4a <__exponent+0x58>
	...

0800ab68 <_printf_float>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	b08d      	sub	sp, #52	@ 0x34
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab74:	4616      	mov	r6, r2
 800ab76:	461f      	mov	r7, r3
 800ab78:	4605      	mov	r5, r0
 800ab7a:	f000 fcbb 	bl	800b4f4 <_localeconv_r>
 800ab7e:	6803      	ldr	r3, [r0, #0]
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7f5 fb74 	bl	8000270 <strlen>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab90:	9005      	str	r0, [sp, #20]
 800ab92:	3307      	adds	r3, #7
 800ab94:	f023 0307 	bic.w	r3, r3, #7
 800ab98:	f103 0208 	add.w	r2, r3, #8
 800ab9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aba0:	f8d4 b000 	ldr.w	fp, [r4]
 800aba4:	f8c8 2000 	str.w	r2, [r8]
 800aba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800abb0:	9307      	str	r3, [sp, #28]
 800abb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800abb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800abba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abbe:	4b9c      	ldr	r3, [pc, #624]	@ (800ae30 <_printf_float+0x2c8>)
 800abc0:	f04f 32ff 	mov.w	r2, #4294967295
 800abc4:	f7f5 ffb2 	bl	8000b2c <__aeabi_dcmpun>
 800abc8:	bb70      	cbnz	r0, 800ac28 <_printf_float+0xc0>
 800abca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abce:	4b98      	ldr	r3, [pc, #608]	@ (800ae30 <_printf_float+0x2c8>)
 800abd0:	f04f 32ff 	mov.w	r2, #4294967295
 800abd4:	f7f5 ff8c 	bl	8000af0 <__aeabi_dcmple>
 800abd8:	bb30      	cbnz	r0, 800ac28 <_printf_float+0xc0>
 800abda:	2200      	movs	r2, #0
 800abdc:	2300      	movs	r3, #0
 800abde:	4640      	mov	r0, r8
 800abe0:	4649      	mov	r1, r9
 800abe2:	f7f5 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800abe6:	b110      	cbz	r0, 800abee <_printf_float+0x86>
 800abe8:	232d      	movs	r3, #45	@ 0x2d
 800abea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abee:	4a91      	ldr	r2, [pc, #580]	@ (800ae34 <_printf_float+0x2cc>)
 800abf0:	4b91      	ldr	r3, [pc, #580]	@ (800ae38 <_printf_float+0x2d0>)
 800abf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abf6:	bf94      	ite	ls
 800abf8:	4690      	movls	r8, r2
 800abfa:	4698      	movhi	r8, r3
 800abfc:	2303      	movs	r3, #3
 800abfe:	6123      	str	r3, [r4, #16]
 800ac00:	f02b 0304 	bic.w	r3, fp, #4
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	f04f 0900 	mov.w	r9, #0
 800ac0a:	9700      	str	r7, [sp, #0]
 800ac0c:	4633      	mov	r3, r6
 800ac0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac10:	4621      	mov	r1, r4
 800ac12:	4628      	mov	r0, r5
 800ac14:	f000 f9d2 	bl	800afbc <_printf_common>
 800ac18:	3001      	adds	r0, #1
 800ac1a:	f040 808d 	bne.w	800ad38 <_printf_float+0x1d0>
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	b00d      	add	sp, #52	@ 0x34
 800ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac28:	4642      	mov	r2, r8
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	4649      	mov	r1, r9
 800ac30:	f7f5 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 800ac34:	b140      	cbz	r0, 800ac48 <_printf_float+0xe0>
 800ac36:	464b      	mov	r3, r9
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bfbc      	itt	lt
 800ac3c:	232d      	movlt	r3, #45	@ 0x2d
 800ac3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac42:	4a7e      	ldr	r2, [pc, #504]	@ (800ae3c <_printf_float+0x2d4>)
 800ac44:	4b7e      	ldr	r3, [pc, #504]	@ (800ae40 <_printf_float+0x2d8>)
 800ac46:	e7d4      	b.n	800abf2 <_printf_float+0x8a>
 800ac48:	6863      	ldr	r3, [r4, #4]
 800ac4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac4e:	9206      	str	r2, [sp, #24]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	d13b      	bne.n	800accc <_printf_float+0x164>
 800ac54:	2306      	movs	r3, #6
 800ac56:	6063      	str	r3, [r4, #4]
 800ac58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	6022      	str	r2, [r4, #0]
 800ac60:	9303      	str	r3, [sp, #12]
 800ac62:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac64:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac68:	ab09      	add	r3, sp, #36	@ 0x24
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	6861      	ldr	r1, [r4, #4]
 800ac6e:	ec49 8b10 	vmov	d0, r8, r9
 800ac72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7ff fed6 	bl	800aa28 <__cvt>
 800ac7c:	9b06      	ldr	r3, [sp, #24]
 800ac7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac80:	2b47      	cmp	r3, #71	@ 0x47
 800ac82:	4680      	mov	r8, r0
 800ac84:	d129      	bne.n	800acda <_printf_float+0x172>
 800ac86:	1cc8      	adds	r0, r1, #3
 800ac88:	db02      	blt.n	800ac90 <_printf_float+0x128>
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	dd41      	ble.n	800ad14 <_printf_float+0x1ac>
 800ac90:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac94:	fa5f fa8a 	uxtb.w	sl, sl
 800ac98:	3901      	subs	r1, #1
 800ac9a:	4652      	mov	r2, sl
 800ac9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aca0:	9109      	str	r1, [sp, #36]	@ 0x24
 800aca2:	f7ff ff26 	bl	800aaf2 <__exponent>
 800aca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aca8:	1813      	adds	r3, r2, r0
 800acaa:	2a01      	cmp	r2, #1
 800acac:	4681      	mov	r9, r0
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	dc02      	bgt.n	800acb8 <_printf_float+0x150>
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	07d2      	lsls	r2, r2, #31
 800acb6:	d501      	bpl.n	800acbc <_printf_float+0x154>
 800acb8:	3301      	adds	r3, #1
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0a2      	beq.n	800ac0a <_printf_float+0xa2>
 800acc4:	232d      	movs	r3, #45	@ 0x2d
 800acc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acca:	e79e      	b.n	800ac0a <_printf_float+0xa2>
 800accc:	9a06      	ldr	r2, [sp, #24]
 800acce:	2a47      	cmp	r2, #71	@ 0x47
 800acd0:	d1c2      	bne.n	800ac58 <_printf_float+0xf0>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1c0      	bne.n	800ac58 <_printf_float+0xf0>
 800acd6:	2301      	movs	r3, #1
 800acd8:	e7bd      	b.n	800ac56 <_printf_float+0xee>
 800acda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acde:	d9db      	bls.n	800ac98 <_printf_float+0x130>
 800ace0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ace4:	d118      	bne.n	800ad18 <_printf_float+0x1b0>
 800ace6:	2900      	cmp	r1, #0
 800ace8:	6863      	ldr	r3, [r4, #4]
 800acea:	dd0b      	ble.n	800ad04 <_printf_float+0x19c>
 800acec:	6121      	str	r1, [r4, #16]
 800acee:	b913      	cbnz	r3, 800acf6 <_printf_float+0x18e>
 800acf0:	6822      	ldr	r2, [r4, #0]
 800acf2:	07d0      	lsls	r0, r2, #31
 800acf4:	d502      	bpl.n	800acfc <_printf_float+0x194>
 800acf6:	3301      	adds	r3, #1
 800acf8:	440b      	add	r3, r1
 800acfa:	6123      	str	r3, [r4, #16]
 800acfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acfe:	f04f 0900 	mov.w	r9, #0
 800ad02:	e7db      	b.n	800acbc <_printf_float+0x154>
 800ad04:	b913      	cbnz	r3, 800ad0c <_printf_float+0x1a4>
 800ad06:	6822      	ldr	r2, [r4, #0]
 800ad08:	07d2      	lsls	r2, r2, #31
 800ad0a:	d501      	bpl.n	800ad10 <_printf_float+0x1a8>
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	e7f4      	b.n	800acfa <_printf_float+0x192>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e7f2      	b.n	800acfa <_printf_float+0x192>
 800ad14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad1a:	4299      	cmp	r1, r3
 800ad1c:	db05      	blt.n	800ad2a <_printf_float+0x1c2>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	6121      	str	r1, [r4, #16]
 800ad22:	07d8      	lsls	r0, r3, #31
 800ad24:	d5ea      	bpl.n	800acfc <_printf_float+0x194>
 800ad26:	1c4b      	adds	r3, r1, #1
 800ad28:	e7e7      	b.n	800acfa <_printf_float+0x192>
 800ad2a:	2900      	cmp	r1, #0
 800ad2c:	bfd4      	ite	le
 800ad2e:	f1c1 0202 	rsble	r2, r1, #2
 800ad32:	2201      	movgt	r2, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	e7e0      	b.n	800acfa <_printf_float+0x192>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	055a      	lsls	r2, r3, #21
 800ad3c:	d407      	bmi.n	800ad4e <_printf_float+0x1e6>
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	4642      	mov	r2, r8
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d12b      	bne.n	800ada4 <_printf_float+0x23c>
 800ad4c:	e767      	b.n	800ac1e <_printf_float+0xb6>
 800ad4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad52:	f240 80dd 	bls.w	800af10 <_printf_float+0x3a8>
 800ad56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f7f5 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d033      	beq.n	800adce <_printf_float+0x266>
 800ad66:	4a37      	ldr	r2, [pc, #220]	@ (800ae44 <_printf_float+0x2dc>)
 800ad68:	2301      	movs	r3, #1
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b8      	blx	r7
 800ad70:	3001      	adds	r0, #1
 800ad72:	f43f af54 	beq.w	800ac1e <_printf_float+0xb6>
 800ad76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad7a:	4543      	cmp	r3, r8
 800ad7c:	db02      	blt.n	800ad84 <_printf_float+0x21c>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	07d8      	lsls	r0, r3, #31
 800ad82:	d50f      	bpl.n	800ada4 <_printf_float+0x23c>
 800ad84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	47b8      	blx	r7
 800ad8e:	3001      	adds	r0, #1
 800ad90:	f43f af45 	beq.w	800ac1e <_printf_float+0xb6>
 800ad94:	f04f 0900 	mov.w	r9, #0
 800ad98:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad9c:	f104 0a1a 	add.w	sl, r4, #26
 800ada0:	45c8      	cmp	r8, r9
 800ada2:	dc09      	bgt.n	800adb8 <_printf_float+0x250>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	079b      	lsls	r3, r3, #30
 800ada8:	f100 8103 	bmi.w	800afb2 <_printf_float+0x44a>
 800adac:	68e0      	ldr	r0, [r4, #12]
 800adae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb0:	4298      	cmp	r0, r3
 800adb2:	bfb8      	it	lt
 800adb4:	4618      	movlt	r0, r3
 800adb6:	e734      	b.n	800ac22 <_printf_float+0xba>
 800adb8:	2301      	movs	r3, #1
 800adba:	4652      	mov	r2, sl
 800adbc:	4631      	mov	r1, r6
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b8      	blx	r7
 800adc2:	3001      	adds	r0, #1
 800adc4:	f43f af2b 	beq.w	800ac1e <_printf_float+0xb6>
 800adc8:	f109 0901 	add.w	r9, r9, #1
 800adcc:	e7e8      	b.n	800ada0 <_printf_float+0x238>
 800adce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	dc39      	bgt.n	800ae48 <_printf_float+0x2e0>
 800add4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae44 <_printf_float+0x2dc>)
 800add6:	2301      	movs	r3, #1
 800add8:	4631      	mov	r1, r6
 800adda:	4628      	mov	r0, r5
 800addc:	47b8      	blx	r7
 800adde:	3001      	adds	r0, #1
 800ade0:	f43f af1d 	beq.w	800ac1e <_printf_float+0xb6>
 800ade4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ade8:	ea59 0303 	orrs.w	r3, r9, r3
 800adec:	d102      	bne.n	800adf4 <_printf_float+0x28c>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	07d9      	lsls	r1, r3, #31
 800adf2:	d5d7      	bpl.n	800ada4 <_printf_float+0x23c>
 800adf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf8:	4631      	mov	r1, r6
 800adfa:	4628      	mov	r0, r5
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f af0d 	beq.w	800ac1e <_printf_float+0xb6>
 800ae04:	f04f 0a00 	mov.w	sl, #0
 800ae08:	f104 0b1a 	add.w	fp, r4, #26
 800ae0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0e:	425b      	negs	r3, r3
 800ae10:	4553      	cmp	r3, sl
 800ae12:	dc01      	bgt.n	800ae18 <_printf_float+0x2b0>
 800ae14:	464b      	mov	r3, r9
 800ae16:	e793      	b.n	800ad40 <_printf_float+0x1d8>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	465a      	mov	r2, fp
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4628      	mov	r0, r5
 800ae20:	47b8      	blx	r7
 800ae22:	3001      	adds	r0, #1
 800ae24:	f43f aefb 	beq.w	800ac1e <_printf_float+0xb6>
 800ae28:	f10a 0a01 	add.w	sl, sl, #1
 800ae2c:	e7ee      	b.n	800ae0c <_printf_float+0x2a4>
 800ae2e:	bf00      	nop
 800ae30:	7fefffff 	.word	0x7fefffff
 800ae34:	0800dd34 	.word	0x0800dd34
 800ae38:	0800dd38 	.word	0x0800dd38
 800ae3c:	0800dd3c 	.word	0x0800dd3c
 800ae40:	0800dd40 	.word	0x0800dd40
 800ae44:	0800dd44 	.word	0x0800dd44
 800ae48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae4e:	4553      	cmp	r3, sl
 800ae50:	bfa8      	it	ge
 800ae52:	4653      	movge	r3, sl
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	4699      	mov	r9, r3
 800ae58:	dc36      	bgt.n	800aec8 <_printf_float+0x360>
 800ae5a:	f04f 0b00 	mov.w	fp, #0
 800ae5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae62:	f104 021a 	add.w	r2, r4, #26
 800ae66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae68:	9306      	str	r3, [sp, #24]
 800ae6a:	eba3 0309 	sub.w	r3, r3, r9
 800ae6e:	455b      	cmp	r3, fp
 800ae70:	dc31      	bgt.n	800aed6 <_printf_float+0x36e>
 800ae72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae74:	459a      	cmp	sl, r3
 800ae76:	dc3a      	bgt.n	800aeee <_printf_float+0x386>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	07da      	lsls	r2, r3, #31
 800ae7c:	d437      	bmi.n	800aeee <_printf_float+0x386>
 800ae7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae80:	ebaa 0903 	sub.w	r9, sl, r3
 800ae84:	9b06      	ldr	r3, [sp, #24]
 800ae86:	ebaa 0303 	sub.w	r3, sl, r3
 800ae8a:	4599      	cmp	r9, r3
 800ae8c:	bfa8      	it	ge
 800ae8e:	4699      	movge	r9, r3
 800ae90:	f1b9 0f00 	cmp.w	r9, #0
 800ae94:	dc33      	bgt.n	800aefe <_printf_float+0x396>
 800ae96:	f04f 0800 	mov.w	r8, #0
 800ae9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae9e:	f104 0b1a 	add.w	fp, r4, #26
 800aea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea4:	ebaa 0303 	sub.w	r3, sl, r3
 800aea8:	eba3 0309 	sub.w	r3, r3, r9
 800aeac:	4543      	cmp	r3, r8
 800aeae:	f77f af79 	ble.w	800ada4 <_printf_float+0x23c>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	465a      	mov	r2, fp
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b8      	blx	r7
 800aebc:	3001      	adds	r0, #1
 800aebe:	f43f aeae 	beq.w	800ac1e <_printf_float+0xb6>
 800aec2:	f108 0801 	add.w	r8, r8, #1
 800aec6:	e7ec      	b.n	800aea2 <_printf_float+0x33a>
 800aec8:	4642      	mov	r2, r8
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	d1c2      	bne.n	800ae5a <_printf_float+0x2f2>
 800aed4:	e6a3      	b.n	800ac1e <_printf_float+0xb6>
 800aed6:	2301      	movs	r3, #1
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	9206      	str	r2, [sp, #24]
 800aede:	47b8      	blx	r7
 800aee0:	3001      	adds	r0, #1
 800aee2:	f43f ae9c 	beq.w	800ac1e <_printf_float+0xb6>
 800aee6:	9a06      	ldr	r2, [sp, #24]
 800aee8:	f10b 0b01 	add.w	fp, fp, #1
 800aeec:	e7bb      	b.n	800ae66 <_printf_float+0x2fe>
 800aeee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	d1c0      	bne.n	800ae7e <_printf_float+0x316>
 800aefc:	e68f      	b.n	800ac1e <_printf_float+0xb6>
 800aefe:	9a06      	ldr	r2, [sp, #24]
 800af00:	464b      	mov	r3, r9
 800af02:	4442      	add	r2, r8
 800af04:	4631      	mov	r1, r6
 800af06:	4628      	mov	r0, r5
 800af08:	47b8      	blx	r7
 800af0a:	3001      	adds	r0, #1
 800af0c:	d1c3      	bne.n	800ae96 <_printf_float+0x32e>
 800af0e:	e686      	b.n	800ac1e <_printf_float+0xb6>
 800af10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af14:	f1ba 0f01 	cmp.w	sl, #1
 800af18:	dc01      	bgt.n	800af1e <_printf_float+0x3b6>
 800af1a:	07db      	lsls	r3, r3, #31
 800af1c:	d536      	bpl.n	800af8c <_printf_float+0x424>
 800af1e:	2301      	movs	r3, #1
 800af20:	4642      	mov	r2, r8
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	f43f ae78 	beq.w	800ac1e <_printf_float+0xb6>
 800af2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	f43f ae70 	beq.w	800ac1e <_printf_float+0xb6>
 800af3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af4a:	f7f5 fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800af4e:	b9c0      	cbnz	r0, 800af82 <_printf_float+0x41a>
 800af50:	4653      	mov	r3, sl
 800af52:	f108 0201 	add.w	r2, r8, #1
 800af56:	4631      	mov	r1, r6
 800af58:	4628      	mov	r0, r5
 800af5a:	47b8      	blx	r7
 800af5c:	3001      	adds	r0, #1
 800af5e:	d10c      	bne.n	800af7a <_printf_float+0x412>
 800af60:	e65d      	b.n	800ac1e <_printf_float+0xb6>
 800af62:	2301      	movs	r3, #1
 800af64:	465a      	mov	r2, fp
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f ae56 	beq.w	800ac1e <_printf_float+0xb6>
 800af72:	f108 0801 	add.w	r8, r8, #1
 800af76:	45d0      	cmp	r8, sl
 800af78:	dbf3      	blt.n	800af62 <_printf_float+0x3fa>
 800af7a:	464b      	mov	r3, r9
 800af7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af80:	e6df      	b.n	800ad42 <_printf_float+0x1da>
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	f104 0b1a 	add.w	fp, r4, #26
 800af8a:	e7f4      	b.n	800af76 <_printf_float+0x40e>
 800af8c:	2301      	movs	r3, #1
 800af8e:	4642      	mov	r2, r8
 800af90:	e7e1      	b.n	800af56 <_printf_float+0x3ee>
 800af92:	2301      	movs	r3, #1
 800af94:	464a      	mov	r2, r9
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f ae3e 	beq.w	800ac1e <_printf_float+0xb6>
 800afa2:	f108 0801 	add.w	r8, r8, #1
 800afa6:	68e3      	ldr	r3, [r4, #12]
 800afa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afaa:	1a5b      	subs	r3, r3, r1
 800afac:	4543      	cmp	r3, r8
 800afae:	dcf0      	bgt.n	800af92 <_printf_float+0x42a>
 800afb0:	e6fc      	b.n	800adac <_printf_float+0x244>
 800afb2:	f04f 0800 	mov.w	r8, #0
 800afb6:	f104 0919 	add.w	r9, r4, #25
 800afba:	e7f4      	b.n	800afa6 <_printf_float+0x43e>

0800afbc <_printf_common>:
 800afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	4616      	mov	r6, r2
 800afc2:	4698      	mov	r8, r3
 800afc4:	688a      	ldr	r2, [r1, #8]
 800afc6:	690b      	ldr	r3, [r1, #16]
 800afc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afcc:	4293      	cmp	r3, r2
 800afce:	bfb8      	it	lt
 800afd0:	4613      	movlt	r3, r2
 800afd2:	6033      	str	r3, [r6, #0]
 800afd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afd8:	4607      	mov	r7, r0
 800afda:	460c      	mov	r4, r1
 800afdc:	b10a      	cbz	r2, 800afe2 <_printf_common+0x26>
 800afde:	3301      	adds	r3, #1
 800afe0:	6033      	str	r3, [r6, #0]
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	0699      	lsls	r1, r3, #26
 800afe6:	bf42      	ittt	mi
 800afe8:	6833      	ldrmi	r3, [r6, #0]
 800afea:	3302      	addmi	r3, #2
 800afec:	6033      	strmi	r3, [r6, #0]
 800afee:	6825      	ldr	r5, [r4, #0]
 800aff0:	f015 0506 	ands.w	r5, r5, #6
 800aff4:	d106      	bne.n	800b004 <_printf_common+0x48>
 800aff6:	f104 0a19 	add.w	sl, r4, #25
 800affa:	68e3      	ldr	r3, [r4, #12]
 800affc:	6832      	ldr	r2, [r6, #0]
 800affe:	1a9b      	subs	r3, r3, r2
 800b000:	42ab      	cmp	r3, r5
 800b002:	dc26      	bgt.n	800b052 <_printf_common+0x96>
 800b004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b008:	6822      	ldr	r2, [r4, #0]
 800b00a:	3b00      	subs	r3, #0
 800b00c:	bf18      	it	ne
 800b00e:	2301      	movne	r3, #1
 800b010:	0692      	lsls	r2, r2, #26
 800b012:	d42b      	bmi.n	800b06c <_printf_common+0xb0>
 800b014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b018:	4641      	mov	r1, r8
 800b01a:	4638      	mov	r0, r7
 800b01c:	47c8      	blx	r9
 800b01e:	3001      	adds	r0, #1
 800b020:	d01e      	beq.n	800b060 <_printf_common+0xa4>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	6922      	ldr	r2, [r4, #16]
 800b026:	f003 0306 	and.w	r3, r3, #6
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	bf02      	ittt	eq
 800b02e:	68e5      	ldreq	r5, [r4, #12]
 800b030:	6833      	ldreq	r3, [r6, #0]
 800b032:	1aed      	subeq	r5, r5, r3
 800b034:	68a3      	ldr	r3, [r4, #8]
 800b036:	bf0c      	ite	eq
 800b038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b03c:	2500      	movne	r5, #0
 800b03e:	4293      	cmp	r3, r2
 800b040:	bfc4      	itt	gt
 800b042:	1a9b      	subgt	r3, r3, r2
 800b044:	18ed      	addgt	r5, r5, r3
 800b046:	2600      	movs	r6, #0
 800b048:	341a      	adds	r4, #26
 800b04a:	42b5      	cmp	r5, r6
 800b04c:	d11a      	bne.n	800b084 <_printf_common+0xc8>
 800b04e:	2000      	movs	r0, #0
 800b050:	e008      	b.n	800b064 <_printf_common+0xa8>
 800b052:	2301      	movs	r3, #1
 800b054:	4652      	mov	r2, sl
 800b056:	4641      	mov	r1, r8
 800b058:	4638      	mov	r0, r7
 800b05a:	47c8      	blx	r9
 800b05c:	3001      	adds	r0, #1
 800b05e:	d103      	bne.n	800b068 <_printf_common+0xac>
 800b060:	f04f 30ff 	mov.w	r0, #4294967295
 800b064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b068:	3501      	adds	r5, #1
 800b06a:	e7c6      	b.n	800affa <_printf_common+0x3e>
 800b06c:	18e1      	adds	r1, r4, r3
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	2030      	movs	r0, #48	@ 0x30
 800b072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b076:	4422      	add	r2, r4
 800b078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b07c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b080:	3302      	adds	r3, #2
 800b082:	e7c7      	b.n	800b014 <_printf_common+0x58>
 800b084:	2301      	movs	r3, #1
 800b086:	4622      	mov	r2, r4
 800b088:	4641      	mov	r1, r8
 800b08a:	4638      	mov	r0, r7
 800b08c:	47c8      	blx	r9
 800b08e:	3001      	adds	r0, #1
 800b090:	d0e6      	beq.n	800b060 <_printf_common+0xa4>
 800b092:	3601      	adds	r6, #1
 800b094:	e7d9      	b.n	800b04a <_printf_common+0x8e>
	...

0800b098 <_printf_i>:
 800b098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b09c:	7e0f      	ldrb	r7, [r1, #24]
 800b09e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0a0:	2f78      	cmp	r7, #120	@ 0x78
 800b0a2:	4691      	mov	r9, r2
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	469a      	mov	sl, r3
 800b0aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0ae:	d807      	bhi.n	800b0c0 <_printf_i+0x28>
 800b0b0:	2f62      	cmp	r7, #98	@ 0x62
 800b0b2:	d80a      	bhi.n	800b0ca <_printf_i+0x32>
 800b0b4:	2f00      	cmp	r7, #0
 800b0b6:	f000 80d2 	beq.w	800b25e <_printf_i+0x1c6>
 800b0ba:	2f58      	cmp	r7, #88	@ 0x58
 800b0bc:	f000 80b9 	beq.w	800b232 <_printf_i+0x19a>
 800b0c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0c8:	e03a      	b.n	800b140 <_printf_i+0xa8>
 800b0ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0ce:	2b15      	cmp	r3, #21
 800b0d0:	d8f6      	bhi.n	800b0c0 <_printf_i+0x28>
 800b0d2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0d8 <_printf_i+0x40>)
 800b0d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0d8:	0800b131 	.word	0x0800b131
 800b0dc:	0800b145 	.word	0x0800b145
 800b0e0:	0800b0c1 	.word	0x0800b0c1
 800b0e4:	0800b0c1 	.word	0x0800b0c1
 800b0e8:	0800b0c1 	.word	0x0800b0c1
 800b0ec:	0800b0c1 	.word	0x0800b0c1
 800b0f0:	0800b145 	.word	0x0800b145
 800b0f4:	0800b0c1 	.word	0x0800b0c1
 800b0f8:	0800b0c1 	.word	0x0800b0c1
 800b0fc:	0800b0c1 	.word	0x0800b0c1
 800b100:	0800b0c1 	.word	0x0800b0c1
 800b104:	0800b245 	.word	0x0800b245
 800b108:	0800b16f 	.word	0x0800b16f
 800b10c:	0800b1ff 	.word	0x0800b1ff
 800b110:	0800b0c1 	.word	0x0800b0c1
 800b114:	0800b0c1 	.word	0x0800b0c1
 800b118:	0800b267 	.word	0x0800b267
 800b11c:	0800b0c1 	.word	0x0800b0c1
 800b120:	0800b16f 	.word	0x0800b16f
 800b124:	0800b0c1 	.word	0x0800b0c1
 800b128:	0800b0c1 	.word	0x0800b0c1
 800b12c:	0800b207 	.word	0x0800b207
 800b130:	6833      	ldr	r3, [r6, #0]
 800b132:	1d1a      	adds	r2, r3, #4
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6032      	str	r2, [r6, #0]
 800b138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b13c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b140:	2301      	movs	r3, #1
 800b142:	e09d      	b.n	800b280 <_printf_i+0x1e8>
 800b144:	6833      	ldr	r3, [r6, #0]
 800b146:	6820      	ldr	r0, [r4, #0]
 800b148:	1d19      	adds	r1, r3, #4
 800b14a:	6031      	str	r1, [r6, #0]
 800b14c:	0606      	lsls	r6, r0, #24
 800b14e:	d501      	bpl.n	800b154 <_printf_i+0xbc>
 800b150:	681d      	ldr	r5, [r3, #0]
 800b152:	e003      	b.n	800b15c <_printf_i+0xc4>
 800b154:	0645      	lsls	r5, r0, #25
 800b156:	d5fb      	bpl.n	800b150 <_printf_i+0xb8>
 800b158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b15c:	2d00      	cmp	r5, #0
 800b15e:	da03      	bge.n	800b168 <_printf_i+0xd0>
 800b160:	232d      	movs	r3, #45	@ 0x2d
 800b162:	426d      	negs	r5, r5
 800b164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b168:	4859      	ldr	r0, [pc, #356]	@ (800b2d0 <_printf_i+0x238>)
 800b16a:	230a      	movs	r3, #10
 800b16c:	e011      	b.n	800b192 <_printf_i+0xfa>
 800b16e:	6821      	ldr	r1, [r4, #0]
 800b170:	6833      	ldr	r3, [r6, #0]
 800b172:	0608      	lsls	r0, r1, #24
 800b174:	f853 5b04 	ldr.w	r5, [r3], #4
 800b178:	d402      	bmi.n	800b180 <_printf_i+0xe8>
 800b17a:	0649      	lsls	r1, r1, #25
 800b17c:	bf48      	it	mi
 800b17e:	b2ad      	uxthmi	r5, r5
 800b180:	2f6f      	cmp	r7, #111	@ 0x6f
 800b182:	4853      	ldr	r0, [pc, #332]	@ (800b2d0 <_printf_i+0x238>)
 800b184:	6033      	str	r3, [r6, #0]
 800b186:	bf14      	ite	ne
 800b188:	230a      	movne	r3, #10
 800b18a:	2308      	moveq	r3, #8
 800b18c:	2100      	movs	r1, #0
 800b18e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b192:	6866      	ldr	r6, [r4, #4]
 800b194:	60a6      	str	r6, [r4, #8]
 800b196:	2e00      	cmp	r6, #0
 800b198:	bfa2      	ittt	ge
 800b19a:	6821      	ldrge	r1, [r4, #0]
 800b19c:	f021 0104 	bicge.w	r1, r1, #4
 800b1a0:	6021      	strge	r1, [r4, #0]
 800b1a2:	b90d      	cbnz	r5, 800b1a8 <_printf_i+0x110>
 800b1a4:	2e00      	cmp	r6, #0
 800b1a6:	d04b      	beq.n	800b240 <_printf_i+0x1a8>
 800b1a8:	4616      	mov	r6, r2
 800b1aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1ae:	fb03 5711 	mls	r7, r3, r1, r5
 800b1b2:	5dc7      	ldrb	r7, [r0, r7]
 800b1b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1b8:	462f      	mov	r7, r5
 800b1ba:	42bb      	cmp	r3, r7
 800b1bc:	460d      	mov	r5, r1
 800b1be:	d9f4      	bls.n	800b1aa <_printf_i+0x112>
 800b1c0:	2b08      	cmp	r3, #8
 800b1c2:	d10b      	bne.n	800b1dc <_printf_i+0x144>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	07df      	lsls	r7, r3, #31
 800b1c8:	d508      	bpl.n	800b1dc <_printf_i+0x144>
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	6861      	ldr	r1, [r4, #4]
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	bfde      	ittt	le
 800b1d2:	2330      	movle	r3, #48	@ 0x30
 800b1d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1dc:	1b92      	subs	r2, r2, r6
 800b1de:	6122      	str	r2, [r4, #16]
 800b1e0:	f8cd a000 	str.w	sl, [sp]
 800b1e4:	464b      	mov	r3, r9
 800b1e6:	aa03      	add	r2, sp, #12
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	f7ff fee6 	bl	800afbc <_printf_common>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d14a      	bne.n	800b28a <_printf_i+0x1f2>
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	b004      	add	sp, #16
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f043 0320 	orr.w	r3, r3, #32
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	4833      	ldr	r0, [pc, #204]	@ (800b2d4 <_printf_i+0x23c>)
 800b208:	2778      	movs	r7, #120	@ 0x78
 800b20a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	6831      	ldr	r1, [r6, #0]
 800b212:	061f      	lsls	r7, r3, #24
 800b214:	f851 5b04 	ldr.w	r5, [r1], #4
 800b218:	d402      	bmi.n	800b220 <_printf_i+0x188>
 800b21a:	065f      	lsls	r7, r3, #25
 800b21c:	bf48      	it	mi
 800b21e:	b2ad      	uxthmi	r5, r5
 800b220:	6031      	str	r1, [r6, #0]
 800b222:	07d9      	lsls	r1, r3, #31
 800b224:	bf44      	itt	mi
 800b226:	f043 0320 	orrmi.w	r3, r3, #32
 800b22a:	6023      	strmi	r3, [r4, #0]
 800b22c:	b11d      	cbz	r5, 800b236 <_printf_i+0x19e>
 800b22e:	2310      	movs	r3, #16
 800b230:	e7ac      	b.n	800b18c <_printf_i+0xf4>
 800b232:	4827      	ldr	r0, [pc, #156]	@ (800b2d0 <_printf_i+0x238>)
 800b234:	e7e9      	b.n	800b20a <_printf_i+0x172>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f023 0320 	bic.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	e7f6      	b.n	800b22e <_printf_i+0x196>
 800b240:	4616      	mov	r6, r2
 800b242:	e7bd      	b.n	800b1c0 <_printf_i+0x128>
 800b244:	6833      	ldr	r3, [r6, #0]
 800b246:	6825      	ldr	r5, [r4, #0]
 800b248:	6961      	ldr	r1, [r4, #20]
 800b24a:	1d18      	adds	r0, r3, #4
 800b24c:	6030      	str	r0, [r6, #0]
 800b24e:	062e      	lsls	r6, r5, #24
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	d501      	bpl.n	800b258 <_printf_i+0x1c0>
 800b254:	6019      	str	r1, [r3, #0]
 800b256:	e002      	b.n	800b25e <_printf_i+0x1c6>
 800b258:	0668      	lsls	r0, r5, #25
 800b25a:	d5fb      	bpl.n	800b254 <_printf_i+0x1bc>
 800b25c:	8019      	strh	r1, [r3, #0]
 800b25e:	2300      	movs	r3, #0
 800b260:	6123      	str	r3, [r4, #16]
 800b262:	4616      	mov	r6, r2
 800b264:	e7bc      	b.n	800b1e0 <_printf_i+0x148>
 800b266:	6833      	ldr	r3, [r6, #0]
 800b268:	1d1a      	adds	r2, r3, #4
 800b26a:	6032      	str	r2, [r6, #0]
 800b26c:	681e      	ldr	r6, [r3, #0]
 800b26e:	6862      	ldr	r2, [r4, #4]
 800b270:	2100      	movs	r1, #0
 800b272:	4630      	mov	r0, r6
 800b274:	f7f4 ffac 	bl	80001d0 <memchr>
 800b278:	b108      	cbz	r0, 800b27e <_printf_i+0x1e6>
 800b27a:	1b80      	subs	r0, r0, r6
 800b27c:	6060      	str	r0, [r4, #4]
 800b27e:	6863      	ldr	r3, [r4, #4]
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	2300      	movs	r3, #0
 800b284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b288:	e7aa      	b.n	800b1e0 <_printf_i+0x148>
 800b28a:	6923      	ldr	r3, [r4, #16]
 800b28c:	4632      	mov	r2, r6
 800b28e:	4649      	mov	r1, r9
 800b290:	4640      	mov	r0, r8
 800b292:	47d0      	blx	sl
 800b294:	3001      	adds	r0, #1
 800b296:	d0ad      	beq.n	800b1f4 <_printf_i+0x15c>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	079b      	lsls	r3, r3, #30
 800b29c:	d413      	bmi.n	800b2c6 <_printf_i+0x22e>
 800b29e:	68e0      	ldr	r0, [r4, #12]
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	4298      	cmp	r0, r3
 800b2a4:	bfb8      	it	lt
 800b2a6:	4618      	movlt	r0, r3
 800b2a8:	e7a6      	b.n	800b1f8 <_printf_i+0x160>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	47d0      	blx	sl
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d09d      	beq.n	800b1f4 <_printf_i+0x15c>
 800b2b8:	3501      	adds	r5, #1
 800b2ba:	68e3      	ldr	r3, [r4, #12]
 800b2bc:	9903      	ldr	r1, [sp, #12]
 800b2be:	1a5b      	subs	r3, r3, r1
 800b2c0:	42ab      	cmp	r3, r5
 800b2c2:	dcf2      	bgt.n	800b2aa <_printf_i+0x212>
 800b2c4:	e7eb      	b.n	800b29e <_printf_i+0x206>
 800b2c6:	2500      	movs	r5, #0
 800b2c8:	f104 0619 	add.w	r6, r4, #25
 800b2cc:	e7f5      	b.n	800b2ba <_printf_i+0x222>
 800b2ce:	bf00      	nop
 800b2d0:	0800dd46 	.word	0x0800dd46
 800b2d4:	0800dd57 	.word	0x0800dd57

0800b2d8 <std>:
 800b2d8:	2300      	movs	r3, #0
 800b2da:	b510      	push	{r4, lr}
 800b2dc:	4604      	mov	r4, r0
 800b2de:	e9c0 3300 	strd	r3, r3, [r0]
 800b2e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2e6:	6083      	str	r3, [r0, #8]
 800b2e8:	8181      	strh	r1, [r0, #12]
 800b2ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2ec:	81c2      	strh	r2, [r0, #14]
 800b2ee:	6183      	str	r3, [r0, #24]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	2208      	movs	r2, #8
 800b2f4:	305c      	adds	r0, #92	@ 0x5c
 800b2f6:	f000 f8f4 	bl	800b4e2 <memset>
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b330 <std+0x58>)
 800b2fc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b334 <std+0x5c>)
 800b300:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b302:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <std+0x60>)
 800b304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b306:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <std+0x64>)
 800b308:	6323      	str	r3, [r4, #48]	@ 0x30
 800b30a:	4b0d      	ldr	r3, [pc, #52]	@ (800b340 <std+0x68>)
 800b30c:	6224      	str	r4, [r4, #32]
 800b30e:	429c      	cmp	r4, r3
 800b310:	d006      	beq.n	800b320 <std+0x48>
 800b312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b316:	4294      	cmp	r4, r2
 800b318:	d002      	beq.n	800b320 <std+0x48>
 800b31a:	33d0      	adds	r3, #208	@ 0xd0
 800b31c:	429c      	cmp	r4, r3
 800b31e:	d105      	bne.n	800b32c <std+0x54>
 800b320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b328:	f000 b968 	b.w	800b5fc <__retarget_lock_init_recursive>
 800b32c:	bd10      	pop	{r4, pc}
 800b32e:	bf00      	nop
 800b330:	0800b45d 	.word	0x0800b45d
 800b334:	0800b47f 	.word	0x0800b47f
 800b338:	0800b4b7 	.word	0x0800b4b7
 800b33c:	0800b4db 	.word	0x0800b4db
 800b340:	2000101c 	.word	0x2000101c

0800b344 <stdio_exit_handler>:
 800b344:	4a02      	ldr	r2, [pc, #8]	@ (800b350 <stdio_exit_handler+0xc>)
 800b346:	4903      	ldr	r1, [pc, #12]	@ (800b354 <stdio_exit_handler+0x10>)
 800b348:	4803      	ldr	r0, [pc, #12]	@ (800b358 <stdio_exit_handler+0x14>)
 800b34a:	f000 b869 	b.w	800b420 <_fwalk_sglue>
 800b34e:	bf00      	nop
 800b350:	2000006c 	.word	0x2000006c
 800b354:	0800cb41 	.word	0x0800cb41
 800b358:	2000007c 	.word	0x2000007c

0800b35c <cleanup_stdio>:
 800b35c:	6841      	ldr	r1, [r0, #4]
 800b35e:	4b0c      	ldr	r3, [pc, #48]	@ (800b390 <cleanup_stdio+0x34>)
 800b360:	4299      	cmp	r1, r3
 800b362:	b510      	push	{r4, lr}
 800b364:	4604      	mov	r4, r0
 800b366:	d001      	beq.n	800b36c <cleanup_stdio+0x10>
 800b368:	f001 fbea 	bl	800cb40 <_fflush_r>
 800b36c:	68a1      	ldr	r1, [r4, #8]
 800b36e:	4b09      	ldr	r3, [pc, #36]	@ (800b394 <cleanup_stdio+0x38>)
 800b370:	4299      	cmp	r1, r3
 800b372:	d002      	beq.n	800b37a <cleanup_stdio+0x1e>
 800b374:	4620      	mov	r0, r4
 800b376:	f001 fbe3 	bl	800cb40 <_fflush_r>
 800b37a:	68e1      	ldr	r1, [r4, #12]
 800b37c:	4b06      	ldr	r3, [pc, #24]	@ (800b398 <cleanup_stdio+0x3c>)
 800b37e:	4299      	cmp	r1, r3
 800b380:	d004      	beq.n	800b38c <cleanup_stdio+0x30>
 800b382:	4620      	mov	r0, r4
 800b384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b388:	f001 bbda 	b.w	800cb40 <_fflush_r>
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	bf00      	nop
 800b390:	2000101c 	.word	0x2000101c
 800b394:	20001084 	.word	0x20001084
 800b398:	200010ec 	.word	0x200010ec

0800b39c <global_stdio_init.part.0>:
 800b39c:	b510      	push	{r4, lr}
 800b39e:	4b0b      	ldr	r3, [pc, #44]	@ (800b3cc <global_stdio_init.part.0+0x30>)
 800b3a0:	4c0b      	ldr	r4, [pc, #44]	@ (800b3d0 <global_stdio_init.part.0+0x34>)
 800b3a2:	4a0c      	ldr	r2, [pc, #48]	@ (800b3d4 <global_stdio_init.part.0+0x38>)
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2104      	movs	r1, #4
 800b3ac:	f7ff ff94 	bl	800b2d8 <std>
 800b3b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	2109      	movs	r1, #9
 800b3b8:	f7ff ff8e 	bl	800b2d8 <std>
 800b3bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c6:	2112      	movs	r1, #18
 800b3c8:	f7ff bf86 	b.w	800b2d8 <std>
 800b3cc:	20001154 	.word	0x20001154
 800b3d0:	2000101c 	.word	0x2000101c
 800b3d4:	0800b345 	.word	0x0800b345

0800b3d8 <__sfp_lock_acquire>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	@ (800b3e0 <__sfp_lock_acquire+0x8>)
 800b3da:	f000 b910 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800b3de:	bf00      	nop
 800b3e0:	2000115d 	.word	0x2000115d

0800b3e4 <__sfp_lock_release>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	@ (800b3ec <__sfp_lock_release+0x8>)
 800b3e6:	f000 b90b 	b.w	800b600 <__retarget_lock_release_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	2000115d 	.word	0x2000115d

0800b3f0 <__sinit>:
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	f7ff fff0 	bl	800b3d8 <__sfp_lock_acquire>
 800b3f8:	6a23      	ldr	r3, [r4, #32]
 800b3fa:	b11b      	cbz	r3, 800b404 <__sinit+0x14>
 800b3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b400:	f7ff bff0 	b.w	800b3e4 <__sfp_lock_release>
 800b404:	4b04      	ldr	r3, [pc, #16]	@ (800b418 <__sinit+0x28>)
 800b406:	6223      	str	r3, [r4, #32]
 800b408:	4b04      	ldr	r3, [pc, #16]	@ (800b41c <__sinit+0x2c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1f5      	bne.n	800b3fc <__sinit+0xc>
 800b410:	f7ff ffc4 	bl	800b39c <global_stdio_init.part.0>
 800b414:	e7f2      	b.n	800b3fc <__sinit+0xc>
 800b416:	bf00      	nop
 800b418:	0800b35d 	.word	0x0800b35d
 800b41c:	20001154 	.word	0x20001154

0800b420 <_fwalk_sglue>:
 800b420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b424:	4607      	mov	r7, r0
 800b426:	4688      	mov	r8, r1
 800b428:	4614      	mov	r4, r2
 800b42a:	2600      	movs	r6, #0
 800b42c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b430:	f1b9 0901 	subs.w	r9, r9, #1
 800b434:	d505      	bpl.n	800b442 <_fwalk_sglue+0x22>
 800b436:	6824      	ldr	r4, [r4, #0]
 800b438:	2c00      	cmp	r4, #0
 800b43a:	d1f7      	bne.n	800b42c <_fwalk_sglue+0xc>
 800b43c:	4630      	mov	r0, r6
 800b43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b442:	89ab      	ldrh	r3, [r5, #12]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d907      	bls.n	800b458 <_fwalk_sglue+0x38>
 800b448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b44c:	3301      	adds	r3, #1
 800b44e:	d003      	beq.n	800b458 <_fwalk_sglue+0x38>
 800b450:	4629      	mov	r1, r5
 800b452:	4638      	mov	r0, r7
 800b454:	47c0      	blx	r8
 800b456:	4306      	orrs	r6, r0
 800b458:	3568      	adds	r5, #104	@ 0x68
 800b45a:	e7e9      	b.n	800b430 <_fwalk_sglue+0x10>

0800b45c <__sread>:
 800b45c:	b510      	push	{r4, lr}
 800b45e:	460c      	mov	r4, r1
 800b460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b464:	f000 f86c 	bl	800b540 <_read_r>
 800b468:	2800      	cmp	r0, #0
 800b46a:	bfab      	itete	ge
 800b46c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b46e:	89a3      	ldrhlt	r3, [r4, #12]
 800b470:	181b      	addge	r3, r3, r0
 800b472:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b476:	bfac      	ite	ge
 800b478:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b47a:	81a3      	strhlt	r3, [r4, #12]
 800b47c:	bd10      	pop	{r4, pc}

0800b47e <__swrite>:
 800b47e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b482:	461f      	mov	r7, r3
 800b484:	898b      	ldrh	r3, [r1, #12]
 800b486:	05db      	lsls	r3, r3, #23
 800b488:	4605      	mov	r5, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	4616      	mov	r6, r2
 800b48e:	d505      	bpl.n	800b49c <__swrite+0x1e>
 800b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b494:	2302      	movs	r3, #2
 800b496:	2200      	movs	r2, #0
 800b498:	f000 f840 	bl	800b51c <_lseek_r>
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4a6:	81a3      	strh	r3, [r4, #12]
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b2:	f000 b867 	b.w	800b584 <_write_r>

0800b4b6 <__sseek>:
 800b4b6:	b510      	push	{r4, lr}
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4be:	f000 f82d 	bl	800b51c <_lseek_r>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	bf15      	itete	ne
 800b4c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4d2:	81a3      	strheq	r3, [r4, #12]
 800b4d4:	bf18      	it	ne
 800b4d6:	81a3      	strhne	r3, [r4, #12]
 800b4d8:	bd10      	pop	{r4, pc}

0800b4da <__sclose>:
 800b4da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4de:	f000 b80d 	b.w	800b4fc <_close_r>

0800b4e2 <memset>:
 800b4e2:	4402      	add	r2, r0
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d100      	bne.n	800b4ec <memset+0xa>
 800b4ea:	4770      	bx	lr
 800b4ec:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f0:	e7f9      	b.n	800b4e6 <memset+0x4>
	...

0800b4f4 <_localeconv_r>:
 800b4f4:	4800      	ldr	r0, [pc, #0]	@ (800b4f8 <_localeconv_r+0x4>)
 800b4f6:	4770      	bx	lr
 800b4f8:	200001b8 	.word	0x200001b8

0800b4fc <_close_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d06      	ldr	r5, [pc, #24]	@ (800b518 <_close_r+0x1c>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f7f6 fcee 	bl	8001ee8 <_close>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_close_r+0x1a>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_close_r+0x1a>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	20001158 	.word	0x20001158

0800b51c <_lseek_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d07      	ldr	r5, [pc, #28]	@ (800b53c <_lseek_r+0x20>)
 800b520:	4604      	mov	r4, r0
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7f6 fd03 	bl	8001f36 <_lseek>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_lseek_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_lseek_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20001158 	.word	0x20001158

0800b540 <_read_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	@ (800b560 <_read_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f6 fc91 	bl	8001e76 <_read>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_read_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_read_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20001158 	.word	0x20001158

0800b564 <_sbrk_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d06      	ldr	r5, [pc, #24]	@ (800b580 <_sbrk_r+0x1c>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	f7f6 fcee 	bl	8001f50 <_sbrk>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_sbrk_r+0x1a>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_sbrk_r+0x1a>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	20001158 	.word	0x20001158

0800b584 <_write_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	@ (800b5a4 <_write_r+0x20>)
 800b588:	4604      	mov	r4, r0
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f6 fc8c 	bl	8001eb0 <_write>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_write_r+0x1e>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_write_r+0x1e>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	20001158 	.word	0x20001158

0800b5a8 <__errno>:
 800b5a8:	4b01      	ldr	r3, [pc, #4]	@ (800b5b0 <__errno+0x8>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	20000078 	.word	0x20000078

0800b5b4 <__libc_init_array>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4d0d      	ldr	r5, [pc, #52]	@ (800b5ec <__libc_init_array+0x38>)
 800b5b8:	4c0d      	ldr	r4, [pc, #52]	@ (800b5f0 <__libc_init_array+0x3c>)
 800b5ba:	1b64      	subs	r4, r4, r5
 800b5bc:	10a4      	asrs	r4, r4, #2
 800b5be:	2600      	movs	r6, #0
 800b5c0:	42a6      	cmp	r6, r4
 800b5c2:	d109      	bne.n	800b5d8 <__libc_init_array+0x24>
 800b5c4:	4d0b      	ldr	r5, [pc, #44]	@ (800b5f4 <__libc_init_array+0x40>)
 800b5c6:	4c0c      	ldr	r4, [pc, #48]	@ (800b5f8 <__libc_init_array+0x44>)
 800b5c8:	f002 fb98 	bl	800dcfc <_init>
 800b5cc:	1b64      	subs	r4, r4, r5
 800b5ce:	10a4      	asrs	r4, r4, #2
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	42a6      	cmp	r6, r4
 800b5d4:	d105      	bne.n	800b5e2 <__libc_init_array+0x2e>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5dc:	4798      	blx	r3
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7ee      	b.n	800b5c0 <__libc_init_array+0xc>
 800b5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e6:	4798      	blx	r3
 800b5e8:	3601      	adds	r6, #1
 800b5ea:	e7f2      	b.n	800b5d2 <__libc_init_array+0x1e>
 800b5ec:	0800e480 	.word	0x0800e480
 800b5f0:	0800e480 	.word	0x0800e480
 800b5f4:	0800e480 	.word	0x0800e480
 800b5f8:	0800e484 	.word	0x0800e484

0800b5fc <__retarget_lock_init_recursive>:
 800b5fc:	4770      	bx	lr

0800b5fe <__retarget_lock_acquire_recursive>:
 800b5fe:	4770      	bx	lr

0800b600 <__retarget_lock_release_recursive>:
 800b600:	4770      	bx	lr

0800b602 <quorem>:
 800b602:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b606:	6903      	ldr	r3, [r0, #16]
 800b608:	690c      	ldr	r4, [r1, #16]
 800b60a:	42a3      	cmp	r3, r4
 800b60c:	4607      	mov	r7, r0
 800b60e:	db7e      	blt.n	800b70e <quorem+0x10c>
 800b610:	3c01      	subs	r4, #1
 800b612:	f101 0814 	add.w	r8, r1, #20
 800b616:	00a3      	lsls	r3, r4, #2
 800b618:	f100 0514 	add.w	r5, r0, #20
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b62c:	3301      	adds	r3, #1
 800b62e:	429a      	cmp	r2, r3
 800b630:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b634:	fbb2 f6f3 	udiv	r6, r2, r3
 800b638:	d32e      	bcc.n	800b698 <quorem+0x96>
 800b63a:	f04f 0a00 	mov.w	sl, #0
 800b63e:	46c4      	mov	ip, r8
 800b640:	46ae      	mov	lr, r5
 800b642:	46d3      	mov	fp, sl
 800b644:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b648:	b298      	uxth	r0, r3
 800b64a:	fb06 a000 	mla	r0, r6, r0, sl
 800b64e:	0c02      	lsrs	r2, r0, #16
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	fb06 2303 	mla	r3, r6, r3, r2
 800b656:	f8de 2000 	ldr.w	r2, [lr]
 800b65a:	b280      	uxth	r0, r0
 800b65c:	b292      	uxth	r2, r2
 800b65e:	1a12      	subs	r2, r2, r0
 800b660:	445a      	add	r2, fp
 800b662:	f8de 0000 	ldr.w	r0, [lr]
 800b666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b670:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b674:	b292      	uxth	r2, r2
 800b676:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b67a:	45e1      	cmp	r9, ip
 800b67c:	f84e 2b04 	str.w	r2, [lr], #4
 800b680:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b684:	d2de      	bcs.n	800b644 <quorem+0x42>
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	58eb      	ldr	r3, [r5, r3]
 800b68a:	b92b      	cbnz	r3, 800b698 <quorem+0x96>
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	3b04      	subs	r3, #4
 800b690:	429d      	cmp	r5, r3
 800b692:	461a      	mov	r2, r3
 800b694:	d32f      	bcc.n	800b6f6 <quorem+0xf4>
 800b696:	613c      	str	r4, [r7, #16]
 800b698:	4638      	mov	r0, r7
 800b69a:	f001 f8c5 	bl	800c828 <__mcmp>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	db25      	blt.n	800b6ee <quorem+0xec>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6aa:	f8d1 c000 	ldr.w	ip, [r1]
 800b6ae:	fa1f fe82 	uxth.w	lr, r2
 800b6b2:	fa1f f38c 	uxth.w	r3, ip
 800b6b6:	eba3 030e 	sub.w	r3, r3, lr
 800b6ba:	4403      	add	r3, r0
 800b6bc:	0c12      	lsrs	r2, r2, #16
 800b6be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b6c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6cc:	45c1      	cmp	r9, r8
 800b6ce:	f841 3b04 	str.w	r3, [r1], #4
 800b6d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6d6:	d2e6      	bcs.n	800b6a6 <quorem+0xa4>
 800b6d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6e0:	b922      	cbnz	r2, 800b6ec <quorem+0xea>
 800b6e2:	3b04      	subs	r3, #4
 800b6e4:	429d      	cmp	r5, r3
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	d30b      	bcc.n	800b702 <quorem+0x100>
 800b6ea:	613c      	str	r4, [r7, #16]
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	b003      	add	sp, #12
 800b6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	3b04      	subs	r3, #4
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	d1cb      	bne.n	800b696 <quorem+0x94>
 800b6fe:	3c01      	subs	r4, #1
 800b700:	e7c6      	b.n	800b690 <quorem+0x8e>
 800b702:	6812      	ldr	r2, [r2, #0]
 800b704:	3b04      	subs	r3, #4
 800b706:	2a00      	cmp	r2, #0
 800b708:	d1ef      	bne.n	800b6ea <quorem+0xe8>
 800b70a:	3c01      	subs	r4, #1
 800b70c:	e7ea      	b.n	800b6e4 <quorem+0xe2>
 800b70e:	2000      	movs	r0, #0
 800b710:	e7ee      	b.n	800b6f0 <quorem+0xee>
 800b712:	0000      	movs	r0, r0
 800b714:	0000      	movs	r0, r0
	...

0800b718 <_dtoa_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	69c7      	ldr	r7, [r0, #28]
 800b71e:	b099      	sub	sp, #100	@ 0x64
 800b720:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b724:	ec55 4b10 	vmov	r4, r5, d0
 800b728:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b72a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b72c:	4683      	mov	fp, r0
 800b72e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b730:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b732:	b97f      	cbnz	r7, 800b754 <_dtoa_r+0x3c>
 800b734:	2010      	movs	r0, #16
 800b736:	f7ff f8b9 	bl	800a8ac <malloc>
 800b73a:	4602      	mov	r2, r0
 800b73c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b740:	b920      	cbnz	r0, 800b74c <_dtoa_r+0x34>
 800b742:	4ba7      	ldr	r3, [pc, #668]	@ (800b9e0 <_dtoa_r+0x2c8>)
 800b744:	21ef      	movs	r1, #239	@ 0xef
 800b746:	48a7      	ldr	r0, [pc, #668]	@ (800b9e4 <_dtoa_r+0x2cc>)
 800b748:	f001 fa30 	bl	800cbac <__assert_func>
 800b74c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b750:	6007      	str	r7, [r0, #0]
 800b752:	60c7      	str	r7, [r0, #12]
 800b754:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b758:	6819      	ldr	r1, [r3, #0]
 800b75a:	b159      	cbz	r1, 800b774 <_dtoa_r+0x5c>
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	604a      	str	r2, [r1, #4]
 800b760:	2301      	movs	r3, #1
 800b762:	4093      	lsls	r3, r2
 800b764:	608b      	str	r3, [r1, #8]
 800b766:	4658      	mov	r0, fp
 800b768:	f000 fe24 	bl	800c3b4 <_Bfree>
 800b76c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b770:	2200      	movs	r2, #0
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	1e2b      	subs	r3, r5, #0
 800b776:	bfb9      	ittee	lt
 800b778:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b77c:	9303      	strlt	r3, [sp, #12]
 800b77e:	2300      	movge	r3, #0
 800b780:	6033      	strge	r3, [r6, #0]
 800b782:	9f03      	ldr	r7, [sp, #12]
 800b784:	4b98      	ldr	r3, [pc, #608]	@ (800b9e8 <_dtoa_r+0x2d0>)
 800b786:	bfbc      	itt	lt
 800b788:	2201      	movlt	r2, #1
 800b78a:	6032      	strlt	r2, [r6, #0]
 800b78c:	43bb      	bics	r3, r7
 800b78e:	d112      	bne.n	800b7b6 <_dtoa_r+0x9e>
 800b790:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b792:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b79c:	4323      	orrs	r3, r4
 800b79e:	f000 854d 	beq.w	800c23c <_dtoa_r+0xb24>
 800b7a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b9fc <_dtoa_r+0x2e4>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 854f 	beq.w	800c24c <_dtoa_r+0xb34>
 800b7ae:	f10a 0303 	add.w	r3, sl, #3
 800b7b2:	f000 bd49 	b.w	800c248 <_dtoa_r+0xb30>
 800b7b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	ec51 0b17 	vmov	r0, r1, d7
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b7c6:	f7f5 f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	b158      	cbz	r0, 800b7e6 <_dtoa_r+0xce>
 800b7ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7d6:	b113      	cbz	r3, 800b7de <_dtoa_r+0xc6>
 800b7d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7da:	4b84      	ldr	r3, [pc, #528]	@ (800b9ec <_dtoa_r+0x2d4>)
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba00 <_dtoa_r+0x2e8>
 800b7e2:	f000 bd33 	b.w	800c24c <_dtoa_r+0xb34>
 800b7e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7ea:	aa16      	add	r2, sp, #88	@ 0x58
 800b7ec:	a917      	add	r1, sp, #92	@ 0x5c
 800b7ee:	4658      	mov	r0, fp
 800b7f0:	f001 f8ca 	bl	800c988 <__d2b>
 800b7f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b7f8:	4681      	mov	r9, r0
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	d077      	beq.n	800b8ee <_dtoa_r+0x1d6>
 800b7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b800:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b80c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b810:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b814:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b818:	4619      	mov	r1, r3
 800b81a:	2200      	movs	r2, #0
 800b81c:	4b74      	ldr	r3, [pc, #464]	@ (800b9f0 <_dtoa_r+0x2d8>)
 800b81e:	f7f4 fd33 	bl	8000288 <__aeabi_dsub>
 800b822:	a369      	add	r3, pc, #420	@ (adr r3, 800b9c8 <_dtoa_r+0x2b0>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fee6 	bl	80005f8 <__aeabi_dmul>
 800b82c:	a368      	add	r3, pc, #416	@ (adr r3, 800b9d0 <_dtoa_r+0x2b8>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fd2b 	bl	800028c <__adddf3>
 800b836:	4604      	mov	r4, r0
 800b838:	4630      	mov	r0, r6
 800b83a:	460d      	mov	r5, r1
 800b83c:	f7f4 fe72 	bl	8000524 <__aeabi_i2d>
 800b840:	a365      	add	r3, pc, #404	@ (adr r3, 800b9d8 <_dtoa_r+0x2c0>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fed7 	bl	80005f8 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4620      	mov	r0, r4
 800b850:	4629      	mov	r1, r5
 800b852:	f7f4 fd1b 	bl	800028c <__adddf3>
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	f7f5 f97d 	bl	8000b58 <__aeabi_d2iz>
 800b85e:	2200      	movs	r2, #0
 800b860:	4607      	mov	r7, r0
 800b862:	2300      	movs	r3, #0
 800b864:	4620      	mov	r0, r4
 800b866:	4629      	mov	r1, r5
 800b868:	f7f5 f938 	bl	8000adc <__aeabi_dcmplt>
 800b86c:	b140      	cbz	r0, 800b880 <_dtoa_r+0x168>
 800b86e:	4638      	mov	r0, r7
 800b870:	f7f4 fe58 	bl	8000524 <__aeabi_i2d>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f5 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800b87c:	b900      	cbnz	r0, 800b880 <_dtoa_r+0x168>
 800b87e:	3f01      	subs	r7, #1
 800b880:	2f16      	cmp	r7, #22
 800b882:	d851      	bhi.n	800b928 <_dtoa_r+0x210>
 800b884:	4b5b      	ldr	r3, [pc, #364]	@ (800b9f4 <_dtoa_r+0x2dc>)
 800b886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b892:	f7f5 f923 	bl	8000adc <__aeabi_dcmplt>
 800b896:	2800      	cmp	r0, #0
 800b898:	d048      	beq.n	800b92c <_dtoa_r+0x214>
 800b89a:	3f01      	subs	r7, #1
 800b89c:	2300      	movs	r3, #0
 800b89e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8a2:	1b9b      	subs	r3, r3, r6
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	bf44      	itt	mi
 800b8a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b8ac:	2300      	movmi	r3, #0
 800b8ae:	9208      	str	r2, [sp, #32]
 800b8b0:	bf54      	ite	pl
 800b8b2:	f04f 0800 	movpl.w	r8, #0
 800b8b6:	9308      	strmi	r3, [sp, #32]
 800b8b8:	2f00      	cmp	r7, #0
 800b8ba:	db39      	blt.n	800b930 <_dtoa_r+0x218>
 800b8bc:	9b08      	ldr	r3, [sp, #32]
 800b8be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b8c0:	443b      	add	r3, r7
 800b8c2:	9308      	str	r3, [sp, #32]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	d864      	bhi.n	800b998 <_dtoa_r+0x280>
 800b8ce:	2b05      	cmp	r3, #5
 800b8d0:	bfc4      	itt	gt
 800b8d2:	3b04      	subgt	r3, #4
 800b8d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d8:	f1a3 0302 	sub.w	r3, r3, #2
 800b8dc:	bfcc      	ite	gt
 800b8de:	2400      	movgt	r4, #0
 800b8e0:	2401      	movle	r4, #1
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d863      	bhi.n	800b9ae <_dtoa_r+0x296>
 800b8e6:	e8df f003 	tbb	[pc, r3]
 800b8ea:	372a      	.short	0x372a
 800b8ec:	5535      	.short	0x5535
 800b8ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b8f2:	441e      	add	r6, r3
 800b8f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8f8:	2b20      	cmp	r3, #32
 800b8fa:	bfc1      	itttt	gt
 800b8fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b900:	409f      	lslgt	r7, r3
 800b902:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b906:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b90a:	bfd6      	itet	le
 800b90c:	f1c3 0320 	rsble	r3, r3, #32
 800b910:	ea47 0003 	orrgt.w	r0, r7, r3
 800b914:	fa04 f003 	lslle.w	r0, r4, r3
 800b918:	f7f4 fdf4 	bl	8000504 <__aeabi_ui2d>
 800b91c:	2201      	movs	r2, #1
 800b91e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b922:	3e01      	subs	r6, #1
 800b924:	9214      	str	r2, [sp, #80]	@ 0x50
 800b926:	e777      	b.n	800b818 <_dtoa_r+0x100>
 800b928:	2301      	movs	r3, #1
 800b92a:	e7b8      	b.n	800b89e <_dtoa_r+0x186>
 800b92c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b92e:	e7b7      	b.n	800b8a0 <_dtoa_r+0x188>
 800b930:	427b      	negs	r3, r7
 800b932:	930a      	str	r3, [sp, #40]	@ 0x28
 800b934:	2300      	movs	r3, #0
 800b936:	eba8 0807 	sub.w	r8, r8, r7
 800b93a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b93c:	e7c4      	b.n	800b8c8 <_dtoa_r+0x1b0>
 800b93e:	2300      	movs	r3, #0
 800b940:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc35      	bgt.n	800b9b4 <_dtoa_r+0x29c>
 800b948:	2301      	movs	r3, #1
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	9307      	str	r3, [sp, #28]
 800b94e:	461a      	mov	r2, r3
 800b950:	920e      	str	r2, [sp, #56]	@ 0x38
 800b952:	e00b      	b.n	800b96c <_dtoa_r+0x254>
 800b954:	2301      	movs	r3, #1
 800b956:	e7f3      	b.n	800b940 <_dtoa_r+0x228>
 800b958:	2300      	movs	r3, #0
 800b95a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b95e:	18fb      	adds	r3, r7, r3
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	2b01      	cmp	r3, #1
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	bfb8      	it	lt
 800b96a:	2301      	movlt	r3, #1
 800b96c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b970:	2100      	movs	r1, #0
 800b972:	2204      	movs	r2, #4
 800b974:	f102 0514 	add.w	r5, r2, #20
 800b978:	429d      	cmp	r5, r3
 800b97a:	d91f      	bls.n	800b9bc <_dtoa_r+0x2a4>
 800b97c:	6041      	str	r1, [r0, #4]
 800b97e:	4658      	mov	r0, fp
 800b980:	f000 fcd8 	bl	800c334 <_Balloc>
 800b984:	4682      	mov	sl, r0
 800b986:	2800      	cmp	r0, #0
 800b988:	d13c      	bne.n	800ba04 <_dtoa_r+0x2ec>
 800b98a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f8 <_dtoa_r+0x2e0>)
 800b98c:	4602      	mov	r2, r0
 800b98e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b992:	e6d8      	b.n	800b746 <_dtoa_r+0x2e>
 800b994:	2301      	movs	r3, #1
 800b996:	e7e0      	b.n	800b95a <_dtoa_r+0x242>
 800b998:	2401      	movs	r4, #1
 800b99a:	2300      	movs	r3, #0
 800b99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b99e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2312      	movs	r3, #18
 800b9ac:	e7d0      	b.n	800b950 <_dtoa_r+0x238>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b2:	e7f5      	b.n	800b9a0 <_dtoa_r+0x288>
 800b9b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	9307      	str	r3, [sp, #28]
 800b9ba:	e7d7      	b.n	800b96c <_dtoa_r+0x254>
 800b9bc:	3101      	adds	r1, #1
 800b9be:	0052      	lsls	r2, r2, #1
 800b9c0:	e7d8      	b.n	800b974 <_dtoa_r+0x25c>
 800b9c2:	bf00      	nop
 800b9c4:	f3af 8000 	nop.w
 800b9c8:	636f4361 	.word	0x636f4361
 800b9cc:	3fd287a7 	.word	0x3fd287a7
 800b9d0:	8b60c8b3 	.word	0x8b60c8b3
 800b9d4:	3fc68a28 	.word	0x3fc68a28
 800b9d8:	509f79fb 	.word	0x509f79fb
 800b9dc:	3fd34413 	.word	0x3fd34413
 800b9e0:	0800dd75 	.word	0x0800dd75
 800b9e4:	0800dd8c 	.word	0x0800dd8c
 800b9e8:	7ff00000 	.word	0x7ff00000
 800b9ec:	0800dd45 	.word	0x0800dd45
 800b9f0:	3ff80000 	.word	0x3ff80000
 800b9f4:	0800de88 	.word	0x0800de88
 800b9f8:	0800dde4 	.word	0x0800dde4
 800b9fc:	0800dd71 	.word	0x0800dd71
 800ba00:	0800dd44 	.word	0x0800dd44
 800ba04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba08:	6018      	str	r0, [r3, #0]
 800ba0a:	9b07      	ldr	r3, [sp, #28]
 800ba0c:	2b0e      	cmp	r3, #14
 800ba0e:	f200 80a4 	bhi.w	800bb5a <_dtoa_r+0x442>
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	f000 80a1 	beq.w	800bb5a <_dtoa_r+0x442>
 800ba18:	2f00      	cmp	r7, #0
 800ba1a:	dd33      	ble.n	800ba84 <_dtoa_r+0x36c>
 800ba1c:	4bad      	ldr	r3, [pc, #692]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800ba1e:	f007 020f 	and.w	r2, r7, #15
 800ba22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba26:	ed93 7b00 	vldr	d7, [r3]
 800ba2a:	05f8      	lsls	r0, r7, #23
 800ba2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba34:	d516      	bpl.n	800ba64 <_dtoa_r+0x34c>
 800ba36:	4ba8      	ldr	r3, [pc, #672]	@ (800bcd8 <_dtoa_r+0x5c0>)
 800ba38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba40:	f7f4 ff04 	bl	800084c <__aeabi_ddiv>
 800ba44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba48:	f004 040f 	and.w	r4, r4, #15
 800ba4c:	2603      	movs	r6, #3
 800ba4e:	4da2      	ldr	r5, [pc, #648]	@ (800bcd8 <_dtoa_r+0x5c0>)
 800ba50:	b954      	cbnz	r4, 800ba68 <_dtoa_r+0x350>
 800ba52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5a:	f7f4 fef7 	bl	800084c <__aeabi_ddiv>
 800ba5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba62:	e028      	b.n	800bab6 <_dtoa_r+0x39e>
 800ba64:	2602      	movs	r6, #2
 800ba66:	e7f2      	b.n	800ba4e <_dtoa_r+0x336>
 800ba68:	07e1      	lsls	r1, r4, #31
 800ba6a:	d508      	bpl.n	800ba7e <_dtoa_r+0x366>
 800ba6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba74:	f7f4 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ba78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba7c:	3601      	adds	r6, #1
 800ba7e:	1064      	asrs	r4, r4, #1
 800ba80:	3508      	adds	r5, #8
 800ba82:	e7e5      	b.n	800ba50 <_dtoa_r+0x338>
 800ba84:	f000 80d2 	beq.w	800bc2c <_dtoa_r+0x514>
 800ba88:	427c      	negs	r4, r7
 800ba8a:	4b92      	ldr	r3, [pc, #584]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800ba8c:	4d92      	ldr	r5, [pc, #584]	@ (800bcd8 <_dtoa_r+0x5c0>)
 800ba8e:	f004 020f 	and.w	r2, r4, #15
 800ba92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba9e:	f7f4 fdab 	bl	80005f8 <__aeabi_dmul>
 800baa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa6:	1124      	asrs	r4, r4, #4
 800baa8:	2300      	movs	r3, #0
 800baaa:	2602      	movs	r6, #2
 800baac:	2c00      	cmp	r4, #0
 800baae:	f040 80b2 	bne.w	800bc16 <_dtoa_r+0x4fe>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1d3      	bne.n	800ba5e <_dtoa_r+0x346>
 800bab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bab8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 80b7 	beq.w	800bc30 <_dtoa_r+0x518>
 800bac2:	4b86      	ldr	r3, [pc, #536]	@ (800bcdc <_dtoa_r+0x5c4>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f5 f807 	bl	8000adc <__aeabi_dcmplt>
 800bace:	2800      	cmp	r0, #0
 800bad0:	f000 80ae 	beq.w	800bc30 <_dtoa_r+0x518>
 800bad4:	9b07      	ldr	r3, [sp, #28]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 80aa 	beq.w	800bc30 <_dtoa_r+0x518>
 800badc:	9b00      	ldr	r3, [sp, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	dd37      	ble.n	800bb52 <_dtoa_r+0x43a>
 800bae2:	1e7b      	subs	r3, r7, #1
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	4620      	mov	r0, r4
 800bae8:	4b7d      	ldr	r3, [pc, #500]	@ (800bce0 <_dtoa_r+0x5c8>)
 800baea:	2200      	movs	r2, #0
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fd83 	bl	80005f8 <__aeabi_dmul>
 800baf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf6:	9c00      	ldr	r4, [sp, #0]
 800baf8:	3601      	adds	r6, #1
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7f4 fd12 	bl	8000524 <__aeabi_i2d>
 800bb00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb04:	f7f4 fd78 	bl	80005f8 <__aeabi_dmul>
 800bb08:	4b76      	ldr	r3, [pc, #472]	@ (800bce4 <_dtoa_r+0x5cc>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f7f4 fbbe 	bl	800028c <__adddf3>
 800bb10:	4605      	mov	r5, r0
 800bb12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	f040 808d 	bne.w	800bc36 <_dtoa_r+0x51e>
 800bb1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb20:	4b71      	ldr	r3, [pc, #452]	@ (800bce8 <_dtoa_r+0x5d0>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	f7f4 fbb0 	bl	8000288 <__aeabi_dsub>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb30:	462a      	mov	r2, r5
 800bb32:	4633      	mov	r3, r6
 800bb34:	f7f4 fff0 	bl	8000b18 <__aeabi_dcmpgt>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f040 828b 	bne.w	800c054 <_dtoa_r+0x93c>
 800bb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb42:	462a      	mov	r2, r5
 800bb44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb48:	f7f4 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f040 8128 	bne.w	800bda2 <_dtoa_r+0x68a>
 800bb52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f2c0 815a 	blt.w	800be16 <_dtoa_r+0x6fe>
 800bb62:	2f0e      	cmp	r7, #14
 800bb64:	f300 8157 	bgt.w	800be16 <_dtoa_r+0x6fe>
 800bb68:	4b5a      	ldr	r3, [pc, #360]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800bb6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb6e:	ed93 7b00 	vldr	d7, [r3]
 800bb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	ed8d 7b00 	vstr	d7, [sp]
 800bb7a:	da03      	bge.n	800bb84 <_dtoa_r+0x46c>
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f340 8101 	ble.w	800bd86 <_dtoa_r+0x66e>
 800bb84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb88:	4656      	mov	r6, sl
 800bb8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 fe5b 	bl	800084c <__aeabi_ddiv>
 800bb96:	f7f4 ffdf 	bl	8000b58 <__aeabi_d2iz>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	f7f4 fcc2 	bl	8000524 <__aeabi_i2d>
 800bba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bba4:	f7f4 fd28 	bl	80005f8 <__aeabi_dmul>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bbb4:	f7f4 fb68 	bl	8000288 <__aeabi_dsub>
 800bbb8:	f806 4b01 	strb.w	r4, [r6], #1
 800bbbc:	9d07      	ldr	r5, [sp, #28]
 800bbbe:	eba6 040a 	sub.w	r4, r6, sl
 800bbc2:	42a5      	cmp	r5, r4
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	f040 8117 	bne.w	800bdfa <_dtoa_r+0x6e2>
 800bbcc:	f7f4 fb5e 	bl	800028c <__adddf3>
 800bbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	460d      	mov	r5, r1
 800bbd8:	f7f4 ff9e 	bl	8000b18 <__aeabi_dcmpgt>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	f040 80f9 	bne.w	800bdd4 <_dtoa_r+0x6bc>
 800bbe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f4 ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbee:	b118      	cbz	r0, 800bbf8 <_dtoa_r+0x4e0>
 800bbf0:	f018 0f01 	tst.w	r8, #1
 800bbf4:	f040 80ee 	bne.w	800bdd4 <_dtoa_r+0x6bc>
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	4658      	mov	r0, fp
 800bbfc:	f000 fbda 	bl	800c3b4 <_Bfree>
 800bc00:	2300      	movs	r3, #0
 800bc02:	7033      	strb	r3, [r6, #0]
 800bc04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc06:	3701      	adds	r7, #1
 800bc08:	601f      	str	r7, [r3, #0]
 800bc0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 831d 	beq.w	800c24c <_dtoa_r+0xb34>
 800bc12:	601e      	str	r6, [r3, #0]
 800bc14:	e31a      	b.n	800c24c <_dtoa_r+0xb34>
 800bc16:	07e2      	lsls	r2, r4, #31
 800bc18:	d505      	bpl.n	800bc26 <_dtoa_r+0x50e>
 800bc1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	3601      	adds	r6, #1
 800bc24:	2301      	movs	r3, #1
 800bc26:	1064      	asrs	r4, r4, #1
 800bc28:	3508      	adds	r5, #8
 800bc2a:	e73f      	b.n	800baac <_dtoa_r+0x394>
 800bc2c:	2602      	movs	r6, #2
 800bc2e:	e742      	b.n	800bab6 <_dtoa_r+0x39e>
 800bc30:	9c07      	ldr	r4, [sp, #28]
 800bc32:	9704      	str	r7, [sp, #16]
 800bc34:	e761      	b.n	800bafa <_dtoa_r+0x3e2>
 800bc36:	4b27      	ldr	r3, [pc, #156]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800bc38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc42:	4454      	add	r4, sl
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d053      	beq.n	800bcf0 <_dtoa_r+0x5d8>
 800bc48:	4928      	ldr	r1, [pc, #160]	@ (800bcec <_dtoa_r+0x5d4>)
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	f7f4 fdfe 	bl	800084c <__aeabi_ddiv>
 800bc50:	4633      	mov	r3, r6
 800bc52:	462a      	mov	r2, r5
 800bc54:	f7f4 fb18 	bl	8000288 <__aeabi_dsub>
 800bc58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc5c:	4656      	mov	r6, sl
 800bc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc62:	f7f4 ff79 	bl	8000b58 <__aeabi_d2iz>
 800bc66:	4605      	mov	r5, r0
 800bc68:	f7f4 fc5c 	bl	8000524 <__aeabi_i2d>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc74:	f7f4 fb08 	bl	8000288 <__aeabi_dsub>
 800bc78:	3530      	adds	r5, #48	@ 0x30
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc82:	f806 5b01 	strb.w	r5, [r6], #1
 800bc86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc8a:	f7f4 ff27 	bl	8000adc <__aeabi_dcmplt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d171      	bne.n	800bd76 <_dtoa_r+0x65e>
 800bc92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc96:	4911      	ldr	r1, [pc, #68]	@ (800bcdc <_dtoa_r+0x5c4>)
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f7f4 faf5 	bl	8000288 <__aeabi_dsub>
 800bc9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bca2:	f7f4 ff1b 	bl	8000adc <__aeabi_dcmplt>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f040 8095 	bne.w	800bdd6 <_dtoa_r+0x6be>
 800bcac:	42a6      	cmp	r6, r4
 800bcae:	f43f af50 	beq.w	800bb52 <_dtoa_r+0x43a>
 800bcb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <_dtoa_r+0x5c8>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f7f4 fc9d 	bl	80005f8 <__aeabi_dmul>
 800bcbe:	4b08      	ldr	r3, [pc, #32]	@ (800bce0 <_dtoa_r+0x5c8>)
 800bcc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcca:	f7f4 fc95 	bl	80005f8 <__aeabi_dmul>
 800bcce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd2:	e7c4      	b.n	800bc5e <_dtoa_r+0x546>
 800bcd4:	0800de88 	.word	0x0800de88
 800bcd8:	0800de60 	.word	0x0800de60
 800bcdc:	3ff00000 	.word	0x3ff00000
 800bce0:	40240000 	.word	0x40240000
 800bce4:	401c0000 	.word	0x401c0000
 800bce8:	40140000 	.word	0x40140000
 800bcec:	3fe00000 	.word	0x3fe00000
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f7f4 fc80 	bl	80005f8 <__aeabi_dmul>
 800bcf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcfc:	9415      	str	r4, [sp, #84]	@ 0x54
 800bcfe:	4656      	mov	r6, sl
 800bd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd04:	f7f4 ff28 	bl	8000b58 <__aeabi_d2iz>
 800bd08:	4605      	mov	r5, r0
 800bd0a:	f7f4 fc0b 	bl	8000524 <__aeabi_i2d>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd16:	f7f4 fab7 	bl	8000288 <__aeabi_dsub>
 800bd1a:	3530      	adds	r5, #48	@ 0x30
 800bd1c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	42a6      	cmp	r6, r4
 800bd26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd2a:	f04f 0200 	mov.w	r2, #0
 800bd2e:	d124      	bne.n	800bd7a <_dtoa_r+0x662>
 800bd30:	4bac      	ldr	r3, [pc, #688]	@ (800bfe4 <_dtoa_r+0x8cc>)
 800bd32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd36:	f7f4 faa9 	bl	800028c <__adddf3>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd42:	f7f4 fee9 	bl	8000b18 <__aeabi_dcmpgt>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d145      	bne.n	800bdd6 <_dtoa_r+0x6be>
 800bd4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd4e:	49a5      	ldr	r1, [pc, #660]	@ (800bfe4 <_dtoa_r+0x8cc>)
 800bd50:	2000      	movs	r0, #0
 800bd52:	f7f4 fa99 	bl	8000288 <__aeabi_dsub>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd5e:	f7f4 febd 	bl	8000adc <__aeabi_dcmplt>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f43f aef5 	beq.w	800bb52 <_dtoa_r+0x43a>
 800bd68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bd6a:	1e73      	subs	r3, r6, #1
 800bd6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd72:	2b30      	cmp	r3, #48	@ 0x30
 800bd74:	d0f8      	beq.n	800bd68 <_dtoa_r+0x650>
 800bd76:	9f04      	ldr	r7, [sp, #16]
 800bd78:	e73e      	b.n	800bbf8 <_dtoa_r+0x4e0>
 800bd7a:	4b9b      	ldr	r3, [pc, #620]	@ (800bfe8 <_dtoa_r+0x8d0>)
 800bd7c:	f7f4 fc3c 	bl	80005f8 <__aeabi_dmul>
 800bd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd84:	e7bc      	b.n	800bd00 <_dtoa_r+0x5e8>
 800bd86:	d10c      	bne.n	800bda2 <_dtoa_r+0x68a>
 800bd88:	4b98      	ldr	r3, [pc, #608]	@ (800bfec <_dtoa_r+0x8d4>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd90:	f7f4 fc32 	bl	80005f8 <__aeabi_dmul>
 800bd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd98:	f7f4 feb4 	bl	8000b04 <__aeabi_dcmpge>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f000 8157 	beq.w	800c050 <_dtoa_r+0x938>
 800bda2:	2400      	movs	r4, #0
 800bda4:	4625      	mov	r5, r4
 800bda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	4656      	mov	r6, sl
 800bdae:	2700      	movs	r7, #0
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	4658      	mov	r0, fp
 800bdb4:	f000 fafe 	bl	800c3b4 <_Bfree>
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	d0dc      	beq.n	800bd76 <_dtoa_r+0x65e>
 800bdbc:	b12f      	cbz	r7, 800bdca <_dtoa_r+0x6b2>
 800bdbe:	42af      	cmp	r7, r5
 800bdc0:	d003      	beq.n	800bdca <_dtoa_r+0x6b2>
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	4658      	mov	r0, fp
 800bdc6:	f000 faf5 	bl	800c3b4 <_Bfree>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4658      	mov	r0, fp
 800bdce:	f000 faf1 	bl	800c3b4 <_Bfree>
 800bdd2:	e7d0      	b.n	800bd76 <_dtoa_r+0x65e>
 800bdd4:	9704      	str	r7, [sp, #16]
 800bdd6:	4633      	mov	r3, r6
 800bdd8:	461e      	mov	r6, r3
 800bdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdde:	2a39      	cmp	r2, #57	@ 0x39
 800bde0:	d107      	bne.n	800bdf2 <_dtoa_r+0x6da>
 800bde2:	459a      	cmp	sl, r3
 800bde4:	d1f8      	bne.n	800bdd8 <_dtoa_r+0x6c0>
 800bde6:	9a04      	ldr	r2, [sp, #16]
 800bde8:	3201      	adds	r2, #1
 800bdea:	9204      	str	r2, [sp, #16]
 800bdec:	2230      	movs	r2, #48	@ 0x30
 800bdee:	f88a 2000 	strb.w	r2, [sl]
 800bdf2:	781a      	ldrb	r2, [r3, #0]
 800bdf4:	3201      	adds	r2, #1
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	e7bd      	b.n	800bd76 <_dtoa_r+0x65e>
 800bdfa:	4b7b      	ldr	r3, [pc, #492]	@ (800bfe8 <_dtoa_r+0x8d0>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	2200      	movs	r2, #0
 800be04:	2300      	movs	r3, #0
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	f7f4 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f43f aebb 	beq.w	800bb8a <_dtoa_r+0x472>
 800be14:	e6f0      	b.n	800bbf8 <_dtoa_r+0x4e0>
 800be16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be18:	2a00      	cmp	r2, #0
 800be1a:	f000 80db 	beq.w	800bfd4 <_dtoa_r+0x8bc>
 800be1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be20:	2a01      	cmp	r2, #1
 800be22:	f300 80bf 	bgt.w	800bfa4 <_dtoa_r+0x88c>
 800be26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be28:	2a00      	cmp	r2, #0
 800be2a:	f000 80b7 	beq.w	800bf9c <_dtoa_r+0x884>
 800be2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be34:	4646      	mov	r6, r8
 800be36:	9a08      	ldr	r2, [sp, #32]
 800be38:	2101      	movs	r1, #1
 800be3a:	441a      	add	r2, r3
 800be3c:	4658      	mov	r0, fp
 800be3e:	4498      	add	r8, r3
 800be40:	9208      	str	r2, [sp, #32]
 800be42:	f000 fb6b 	bl	800c51c <__i2b>
 800be46:	4605      	mov	r5, r0
 800be48:	b15e      	cbz	r6, 800be62 <_dtoa_r+0x74a>
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dd08      	ble.n	800be62 <_dtoa_r+0x74a>
 800be50:	42b3      	cmp	r3, r6
 800be52:	9a08      	ldr	r2, [sp, #32]
 800be54:	bfa8      	it	ge
 800be56:	4633      	movge	r3, r6
 800be58:	eba8 0803 	sub.w	r8, r8, r3
 800be5c:	1af6      	subs	r6, r6, r3
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	9308      	str	r3, [sp, #32]
 800be62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be64:	b1f3      	cbz	r3, 800bea4 <_dtoa_r+0x78c>
 800be66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80b7 	beq.w	800bfdc <_dtoa_r+0x8c4>
 800be6e:	b18c      	cbz	r4, 800be94 <_dtoa_r+0x77c>
 800be70:	4629      	mov	r1, r5
 800be72:	4622      	mov	r2, r4
 800be74:	4658      	mov	r0, fp
 800be76:	f000 fc11 	bl	800c69c <__pow5mult>
 800be7a:	464a      	mov	r2, r9
 800be7c:	4601      	mov	r1, r0
 800be7e:	4605      	mov	r5, r0
 800be80:	4658      	mov	r0, fp
 800be82:	f000 fb61 	bl	800c548 <__multiply>
 800be86:	4649      	mov	r1, r9
 800be88:	9004      	str	r0, [sp, #16]
 800be8a:	4658      	mov	r0, fp
 800be8c:	f000 fa92 	bl	800c3b4 <_Bfree>
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	4699      	mov	r9, r3
 800be94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be96:	1b1a      	subs	r2, r3, r4
 800be98:	d004      	beq.n	800bea4 <_dtoa_r+0x78c>
 800be9a:	4649      	mov	r1, r9
 800be9c:	4658      	mov	r0, fp
 800be9e:	f000 fbfd 	bl	800c69c <__pow5mult>
 800bea2:	4681      	mov	r9, r0
 800bea4:	2101      	movs	r1, #1
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 fb38 	bl	800c51c <__i2b>
 800beac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beae:	4604      	mov	r4, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 81cf 	beq.w	800c254 <_dtoa_r+0xb3c>
 800beb6:	461a      	mov	r2, r3
 800beb8:	4601      	mov	r1, r0
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 fbee 	bl	800c69c <__pow5mult>
 800bec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	4604      	mov	r4, r0
 800bec6:	f300 8095 	bgt.w	800bff4 <_dtoa_r+0x8dc>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 8087 	bne.w	800bfe0 <_dtoa_r+0x8c8>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f040 8089 	bne.w	800bff0 <_dtoa_r+0x8d8>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bee4:	0d1b      	lsrs	r3, r3, #20
 800bee6:	051b      	lsls	r3, r3, #20
 800bee8:	b12b      	cbz	r3, 800bef6 <_dtoa_r+0x7de>
 800beea:	9b08      	ldr	r3, [sp, #32]
 800beec:	3301      	adds	r3, #1
 800beee:	9308      	str	r3, [sp, #32]
 800bef0:	f108 0801 	add.w	r8, r8, #1
 800bef4:	2301      	movs	r3, #1
 800bef6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 81b0 	beq.w	800c260 <_dtoa_r+0xb48>
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf06:	6918      	ldr	r0, [r3, #16]
 800bf08:	f000 fabc 	bl	800c484 <__hi0bits>
 800bf0c:	f1c0 0020 	rsb	r0, r0, #32
 800bf10:	9b08      	ldr	r3, [sp, #32]
 800bf12:	4418      	add	r0, r3
 800bf14:	f010 001f 	ands.w	r0, r0, #31
 800bf18:	d077      	beq.n	800c00a <_dtoa_r+0x8f2>
 800bf1a:	f1c0 0320 	rsb	r3, r0, #32
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	dd6b      	ble.n	800bffa <_dtoa_r+0x8e2>
 800bf22:	9b08      	ldr	r3, [sp, #32]
 800bf24:	f1c0 001c 	rsb	r0, r0, #28
 800bf28:	4403      	add	r3, r0
 800bf2a:	4480      	add	r8, r0
 800bf2c:	4406      	add	r6, r0
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	f1b8 0f00 	cmp.w	r8, #0
 800bf34:	dd05      	ble.n	800bf42 <_dtoa_r+0x82a>
 800bf36:	4649      	mov	r1, r9
 800bf38:	4642      	mov	r2, r8
 800bf3a:	4658      	mov	r0, fp
 800bf3c:	f000 fc08 	bl	800c750 <__lshift>
 800bf40:	4681      	mov	r9, r0
 800bf42:	9b08      	ldr	r3, [sp, #32]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd05      	ble.n	800bf54 <_dtoa_r+0x83c>
 800bf48:	4621      	mov	r1, r4
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	f000 fbff 	bl	800c750 <__lshift>
 800bf52:	4604      	mov	r4, r0
 800bf54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d059      	beq.n	800c00e <_dtoa_r+0x8f6>
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f000 fc63 	bl	800c828 <__mcmp>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	da53      	bge.n	800c00e <_dtoa_r+0x8f6>
 800bf66:	1e7b      	subs	r3, r7, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	220a      	movs	r2, #10
 800bf70:	4658      	mov	r0, fp
 800bf72:	f000 fa41 	bl	800c3f8 <__multadd>
 800bf76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf78:	4681      	mov	r9, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 8172 	beq.w	800c264 <_dtoa_r+0xb4c>
 800bf80:	2300      	movs	r3, #0
 800bf82:	4629      	mov	r1, r5
 800bf84:	220a      	movs	r2, #10
 800bf86:	4658      	mov	r0, fp
 800bf88:	f000 fa36 	bl	800c3f8 <__multadd>
 800bf8c:	9b00      	ldr	r3, [sp, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	4605      	mov	r5, r0
 800bf92:	dc67      	bgt.n	800c064 <_dtoa_r+0x94c>
 800bf94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	dc41      	bgt.n	800c01e <_dtoa_r+0x906>
 800bf9a:	e063      	b.n	800c064 <_dtoa_r+0x94c>
 800bf9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bfa2:	e746      	b.n	800be32 <_dtoa_r+0x71a>
 800bfa4:	9b07      	ldr	r3, [sp, #28]
 800bfa6:	1e5c      	subs	r4, r3, #1
 800bfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfaa:	42a3      	cmp	r3, r4
 800bfac:	bfbf      	itttt	lt
 800bfae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bfb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bfb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bfb4:	1ae3      	sublt	r3, r4, r3
 800bfb6:	bfb4      	ite	lt
 800bfb8:	18d2      	addlt	r2, r2, r3
 800bfba:	1b1c      	subge	r4, r3, r4
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	bfbc      	itt	lt
 800bfc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bfc2:	2400      	movlt	r4, #0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfb5      	itete	lt
 800bfc8:	eba8 0603 	sublt.w	r6, r8, r3
 800bfcc:	9b07      	ldrge	r3, [sp, #28]
 800bfce:	2300      	movlt	r3, #0
 800bfd0:	4646      	movge	r6, r8
 800bfd2:	e730      	b.n	800be36 <_dtoa_r+0x71e>
 800bfd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bfd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bfd8:	4646      	mov	r6, r8
 800bfda:	e735      	b.n	800be48 <_dtoa_r+0x730>
 800bfdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfde:	e75c      	b.n	800be9a <_dtoa_r+0x782>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e788      	b.n	800bef6 <_dtoa_r+0x7de>
 800bfe4:	3fe00000 	.word	0x3fe00000
 800bfe8:	40240000 	.word	0x40240000
 800bfec:	40140000 	.word	0x40140000
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	e780      	b.n	800bef6 <_dtoa_r+0x7de>
 800bff4:	2300      	movs	r3, #0
 800bff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff8:	e782      	b.n	800bf00 <_dtoa_r+0x7e8>
 800bffa:	d099      	beq.n	800bf30 <_dtoa_r+0x818>
 800bffc:	9a08      	ldr	r2, [sp, #32]
 800bffe:	331c      	adds	r3, #28
 800c000:	441a      	add	r2, r3
 800c002:	4498      	add	r8, r3
 800c004:	441e      	add	r6, r3
 800c006:	9208      	str	r2, [sp, #32]
 800c008:	e792      	b.n	800bf30 <_dtoa_r+0x818>
 800c00a:	4603      	mov	r3, r0
 800c00c:	e7f6      	b.n	800bffc <_dtoa_r+0x8e4>
 800c00e:	9b07      	ldr	r3, [sp, #28]
 800c010:	9704      	str	r7, [sp, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	dc20      	bgt.n	800c058 <_dtoa_r+0x940>
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	dd1e      	ble.n	800c05c <_dtoa_r+0x944>
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f47f aec0 	bne.w	800bda6 <_dtoa_r+0x68e>
 800c026:	4621      	mov	r1, r4
 800c028:	2205      	movs	r2, #5
 800c02a:	4658      	mov	r0, fp
 800c02c:	f000 f9e4 	bl	800c3f8 <__multadd>
 800c030:	4601      	mov	r1, r0
 800c032:	4604      	mov	r4, r0
 800c034:	4648      	mov	r0, r9
 800c036:	f000 fbf7 	bl	800c828 <__mcmp>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f77f aeb3 	ble.w	800bda6 <_dtoa_r+0x68e>
 800c040:	4656      	mov	r6, sl
 800c042:	2331      	movs	r3, #49	@ 0x31
 800c044:	f806 3b01 	strb.w	r3, [r6], #1
 800c048:	9b04      	ldr	r3, [sp, #16]
 800c04a:	3301      	adds	r3, #1
 800c04c:	9304      	str	r3, [sp, #16]
 800c04e:	e6ae      	b.n	800bdae <_dtoa_r+0x696>
 800c050:	9c07      	ldr	r4, [sp, #28]
 800c052:	9704      	str	r7, [sp, #16]
 800c054:	4625      	mov	r5, r4
 800c056:	e7f3      	b.n	800c040 <_dtoa_r+0x928>
 800c058:	9b07      	ldr	r3, [sp, #28]
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 8104 	beq.w	800c26c <_dtoa_r+0xb54>
 800c064:	2e00      	cmp	r6, #0
 800c066:	dd05      	ble.n	800c074 <_dtoa_r+0x95c>
 800c068:	4629      	mov	r1, r5
 800c06a:	4632      	mov	r2, r6
 800c06c:	4658      	mov	r0, fp
 800c06e:	f000 fb6f 	bl	800c750 <__lshift>
 800c072:	4605      	mov	r5, r0
 800c074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c076:	2b00      	cmp	r3, #0
 800c078:	d05a      	beq.n	800c130 <_dtoa_r+0xa18>
 800c07a:	6869      	ldr	r1, [r5, #4]
 800c07c:	4658      	mov	r0, fp
 800c07e:	f000 f959 	bl	800c334 <_Balloc>
 800c082:	4606      	mov	r6, r0
 800c084:	b928      	cbnz	r0, 800c092 <_dtoa_r+0x97a>
 800c086:	4b84      	ldr	r3, [pc, #528]	@ (800c298 <_dtoa_r+0xb80>)
 800c088:	4602      	mov	r2, r0
 800c08a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c08e:	f7ff bb5a 	b.w	800b746 <_dtoa_r+0x2e>
 800c092:	692a      	ldr	r2, [r5, #16]
 800c094:	3202      	adds	r2, #2
 800c096:	0092      	lsls	r2, r2, #2
 800c098:	f105 010c 	add.w	r1, r5, #12
 800c09c:	300c      	adds	r0, #12
 800c09e:	f000 fd77 	bl	800cb90 <memcpy>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	4658      	mov	r0, fp
 800c0a8:	f000 fb52 	bl	800c750 <__lshift>
 800c0ac:	f10a 0301 	add.w	r3, sl, #1
 800c0b0:	9307      	str	r3, [sp, #28]
 800c0b2:	9b00      	ldr	r3, [sp, #0]
 800c0b4:	4453      	add	r3, sl
 800c0b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0b8:	9b02      	ldr	r3, [sp, #8]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	462f      	mov	r7, r5
 800c0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	4648      	mov	r0, r9
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	f7ff fa98 	bl	800b602 <quorem>
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c0da:	4648      	mov	r0, r9
 800c0dc:	f000 fba4 	bl	800c828 <__mcmp>
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	9008      	str	r0, [sp, #32]
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 fbba 	bl	800c860 <__mdiff>
 800c0ec:	68c2      	ldr	r2, [r0, #12]
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	bb02      	cbnz	r2, 800c134 <_dtoa_r+0xa1c>
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f000 fb97 	bl	800c828 <__mcmp>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4658      	mov	r0, fp
 800c100:	920e      	str	r2, [sp, #56]	@ 0x38
 800c102:	f000 f957 	bl	800c3b4 <_Bfree>
 800c106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c10a:	9e07      	ldr	r6, [sp, #28]
 800c10c:	ea43 0102 	orr.w	r1, r3, r2
 800c110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c112:	4319      	orrs	r1, r3
 800c114:	d110      	bne.n	800c138 <_dtoa_r+0xa20>
 800c116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c11a:	d029      	beq.n	800c170 <_dtoa_r+0xa58>
 800c11c:	9b08      	ldr	r3, [sp, #32]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dd02      	ble.n	800c128 <_dtoa_r+0xa10>
 800c122:	9b02      	ldr	r3, [sp, #8]
 800c124:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	f883 8000 	strb.w	r8, [r3]
 800c12e:	e63f      	b.n	800bdb0 <_dtoa_r+0x698>
 800c130:	4628      	mov	r0, r5
 800c132:	e7bb      	b.n	800c0ac <_dtoa_r+0x994>
 800c134:	2201      	movs	r2, #1
 800c136:	e7e1      	b.n	800c0fc <_dtoa_r+0x9e4>
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	db04      	blt.n	800c148 <_dtoa_r+0xa30>
 800c13e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c140:	430b      	orrs	r3, r1
 800c142:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c144:	430b      	orrs	r3, r1
 800c146:	d120      	bne.n	800c18a <_dtoa_r+0xa72>
 800c148:	2a00      	cmp	r2, #0
 800c14a:	dded      	ble.n	800c128 <_dtoa_r+0xa10>
 800c14c:	4649      	mov	r1, r9
 800c14e:	2201      	movs	r2, #1
 800c150:	4658      	mov	r0, fp
 800c152:	f000 fafd 	bl	800c750 <__lshift>
 800c156:	4621      	mov	r1, r4
 800c158:	4681      	mov	r9, r0
 800c15a:	f000 fb65 	bl	800c828 <__mcmp>
 800c15e:	2800      	cmp	r0, #0
 800c160:	dc03      	bgt.n	800c16a <_dtoa_r+0xa52>
 800c162:	d1e1      	bne.n	800c128 <_dtoa_r+0xa10>
 800c164:	f018 0f01 	tst.w	r8, #1
 800c168:	d0de      	beq.n	800c128 <_dtoa_r+0xa10>
 800c16a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c16e:	d1d8      	bne.n	800c122 <_dtoa_r+0xa0a>
 800c170:	9a00      	ldr	r2, [sp, #0]
 800c172:	2339      	movs	r3, #57	@ 0x39
 800c174:	7013      	strb	r3, [r2, #0]
 800c176:	4633      	mov	r3, r6
 800c178:	461e      	mov	r6, r3
 800c17a:	3b01      	subs	r3, #1
 800c17c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c180:	2a39      	cmp	r2, #57	@ 0x39
 800c182:	d052      	beq.n	800c22a <_dtoa_r+0xb12>
 800c184:	3201      	adds	r2, #1
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e612      	b.n	800bdb0 <_dtoa_r+0x698>
 800c18a:	2a00      	cmp	r2, #0
 800c18c:	dd07      	ble.n	800c19e <_dtoa_r+0xa86>
 800c18e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c192:	d0ed      	beq.n	800c170 <_dtoa_r+0xa58>
 800c194:	9a00      	ldr	r2, [sp, #0]
 800c196:	f108 0301 	add.w	r3, r8, #1
 800c19a:	7013      	strb	r3, [r2, #0]
 800c19c:	e608      	b.n	800bdb0 <_dtoa_r+0x698>
 800c19e:	9b07      	ldr	r3, [sp, #28]
 800c1a0:	9a07      	ldr	r2, [sp, #28]
 800c1a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c1a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d028      	beq.n	800c1fe <_dtoa_r+0xae6>
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	4658      	mov	r0, fp
 800c1b4:	f000 f920 	bl	800c3f8 <__multadd>
 800c1b8:	42af      	cmp	r7, r5
 800c1ba:	4681      	mov	r9, r0
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	f04f 020a 	mov.w	r2, #10
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4658      	mov	r0, fp
 800c1c8:	d107      	bne.n	800c1da <_dtoa_r+0xac2>
 800c1ca:	f000 f915 	bl	800c3f8 <__multadd>
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	9b07      	ldr	r3, [sp, #28]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	9307      	str	r3, [sp, #28]
 800c1d8:	e774      	b.n	800c0c4 <_dtoa_r+0x9ac>
 800c1da:	f000 f90d 	bl	800c3f8 <__multadd>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	4658      	mov	r0, fp
 800c1e8:	f000 f906 	bl	800c3f8 <__multadd>
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	e7f0      	b.n	800c1d2 <_dtoa_r+0xaba>
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bfcc      	ite	gt
 800c1f6:	461e      	movgt	r6, r3
 800c1f8:	2601      	movle	r6, #1
 800c1fa:	4456      	add	r6, sl
 800c1fc:	2700      	movs	r7, #0
 800c1fe:	4649      	mov	r1, r9
 800c200:	2201      	movs	r2, #1
 800c202:	4658      	mov	r0, fp
 800c204:	f000 faa4 	bl	800c750 <__lshift>
 800c208:	4621      	mov	r1, r4
 800c20a:	4681      	mov	r9, r0
 800c20c:	f000 fb0c 	bl	800c828 <__mcmp>
 800c210:	2800      	cmp	r0, #0
 800c212:	dcb0      	bgt.n	800c176 <_dtoa_r+0xa5e>
 800c214:	d102      	bne.n	800c21c <_dtoa_r+0xb04>
 800c216:	f018 0f01 	tst.w	r8, #1
 800c21a:	d1ac      	bne.n	800c176 <_dtoa_r+0xa5e>
 800c21c:	4633      	mov	r3, r6
 800c21e:	461e      	mov	r6, r3
 800c220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c224:	2a30      	cmp	r2, #48	@ 0x30
 800c226:	d0fa      	beq.n	800c21e <_dtoa_r+0xb06>
 800c228:	e5c2      	b.n	800bdb0 <_dtoa_r+0x698>
 800c22a:	459a      	cmp	sl, r3
 800c22c:	d1a4      	bne.n	800c178 <_dtoa_r+0xa60>
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	3301      	adds	r3, #1
 800c232:	9304      	str	r3, [sp, #16]
 800c234:	2331      	movs	r3, #49	@ 0x31
 800c236:	f88a 3000 	strb.w	r3, [sl]
 800c23a:	e5b9      	b.n	800bdb0 <_dtoa_r+0x698>
 800c23c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c23e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c29c <_dtoa_r+0xb84>
 800c242:	b11b      	cbz	r3, 800c24c <_dtoa_r+0xb34>
 800c244:	f10a 0308 	add.w	r3, sl, #8
 800c248:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	4650      	mov	r0, sl
 800c24e:	b019      	add	sp, #100	@ 0x64
 800c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c256:	2b01      	cmp	r3, #1
 800c258:	f77f ae37 	ble.w	800beca <_dtoa_r+0x7b2>
 800c25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c260:	2001      	movs	r0, #1
 800c262:	e655      	b.n	800bf10 <_dtoa_r+0x7f8>
 800c264:	9b00      	ldr	r3, [sp, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f77f aed6 	ble.w	800c018 <_dtoa_r+0x900>
 800c26c:	4656      	mov	r6, sl
 800c26e:	4621      	mov	r1, r4
 800c270:	4648      	mov	r0, r9
 800c272:	f7ff f9c6 	bl	800b602 <quorem>
 800c276:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c27a:	f806 8b01 	strb.w	r8, [r6], #1
 800c27e:	9b00      	ldr	r3, [sp, #0]
 800c280:	eba6 020a 	sub.w	r2, r6, sl
 800c284:	4293      	cmp	r3, r2
 800c286:	ddb3      	ble.n	800c1f0 <_dtoa_r+0xad8>
 800c288:	4649      	mov	r1, r9
 800c28a:	2300      	movs	r3, #0
 800c28c:	220a      	movs	r2, #10
 800c28e:	4658      	mov	r0, fp
 800c290:	f000 f8b2 	bl	800c3f8 <__multadd>
 800c294:	4681      	mov	r9, r0
 800c296:	e7ea      	b.n	800c26e <_dtoa_r+0xb56>
 800c298:	0800dde4 	.word	0x0800dde4
 800c29c:	0800dd68 	.word	0x0800dd68

0800c2a0 <_free_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	d041      	beq.n	800c32c <_free_r+0x8c>
 800c2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ac:	1f0c      	subs	r4, r1, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfb8      	it	lt
 800c2b2:	18e4      	addlt	r4, r4, r3
 800c2b4:	f7fe fbac 	bl	800aa10 <__malloc_lock>
 800c2b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c330 <_free_r+0x90>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	b933      	cbnz	r3, 800c2cc <_free_r+0x2c>
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	6014      	str	r4, [r2, #0]
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c8:	f7fe bba8 	b.w	800aa1c <__malloc_unlock>
 800c2cc:	42a3      	cmp	r3, r4
 800c2ce:	d908      	bls.n	800c2e2 <_free_r+0x42>
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	1821      	adds	r1, r4, r0
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf01      	itttt	eq
 800c2d8:	6819      	ldreq	r1, [r3, #0]
 800c2da:	685b      	ldreq	r3, [r3, #4]
 800c2dc:	1809      	addeq	r1, r1, r0
 800c2de:	6021      	streq	r1, [r4, #0]
 800c2e0:	e7ed      	b.n	800c2be <_free_r+0x1e>
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	b10b      	cbz	r3, 800c2ec <_free_r+0x4c>
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d9fa      	bls.n	800c2e2 <_free_r+0x42>
 800c2ec:	6811      	ldr	r1, [r2, #0]
 800c2ee:	1850      	adds	r0, r2, r1
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d10b      	bne.n	800c30c <_free_r+0x6c>
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	4401      	add	r1, r0
 800c2f8:	1850      	adds	r0, r2, r1
 800c2fa:	4283      	cmp	r3, r0
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	d1e0      	bne.n	800c2c2 <_free_r+0x22>
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	6053      	str	r3, [r2, #4]
 800c306:	4408      	add	r0, r1
 800c308:	6010      	str	r0, [r2, #0]
 800c30a:	e7da      	b.n	800c2c2 <_free_r+0x22>
 800c30c:	d902      	bls.n	800c314 <_free_r+0x74>
 800c30e:	230c      	movs	r3, #12
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	e7d6      	b.n	800c2c2 <_free_r+0x22>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	1821      	adds	r1, r4, r0
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf04      	itt	eq
 800c31c:	6819      	ldreq	r1, [r3, #0]
 800c31e:	685b      	ldreq	r3, [r3, #4]
 800c320:	6063      	str	r3, [r4, #4]
 800c322:	bf04      	itt	eq
 800c324:	1809      	addeq	r1, r1, r0
 800c326:	6021      	streq	r1, [r4, #0]
 800c328:	6054      	str	r4, [r2, #4]
 800c32a:	e7ca      	b.n	800c2c2 <_free_r+0x22>
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	bf00      	nop
 800c330:	20001018 	.word	0x20001018

0800c334 <_Balloc>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	69c6      	ldr	r6, [r0, #28]
 800c338:	4604      	mov	r4, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	b976      	cbnz	r6, 800c35c <_Balloc+0x28>
 800c33e:	2010      	movs	r0, #16
 800c340:	f7fe fab4 	bl	800a8ac <malloc>
 800c344:	4602      	mov	r2, r0
 800c346:	61e0      	str	r0, [r4, #28]
 800c348:	b920      	cbnz	r0, 800c354 <_Balloc+0x20>
 800c34a:	4b18      	ldr	r3, [pc, #96]	@ (800c3ac <_Balloc+0x78>)
 800c34c:	4818      	ldr	r0, [pc, #96]	@ (800c3b0 <_Balloc+0x7c>)
 800c34e:	216b      	movs	r1, #107	@ 0x6b
 800c350:	f000 fc2c 	bl	800cbac <__assert_func>
 800c354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c358:	6006      	str	r6, [r0, #0]
 800c35a:	60c6      	str	r6, [r0, #12]
 800c35c:	69e6      	ldr	r6, [r4, #28]
 800c35e:	68f3      	ldr	r3, [r6, #12]
 800c360:	b183      	cbz	r3, 800c384 <_Balloc+0x50>
 800c362:	69e3      	ldr	r3, [r4, #28]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c36a:	b9b8      	cbnz	r0, 800c39c <_Balloc+0x68>
 800c36c:	2101      	movs	r1, #1
 800c36e:	fa01 f605 	lsl.w	r6, r1, r5
 800c372:	1d72      	adds	r2, r6, #5
 800c374:	0092      	lsls	r2, r2, #2
 800c376:	4620      	mov	r0, r4
 800c378:	f000 fc36 	bl	800cbe8 <_calloc_r>
 800c37c:	b160      	cbz	r0, 800c398 <_Balloc+0x64>
 800c37e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c382:	e00e      	b.n	800c3a2 <_Balloc+0x6e>
 800c384:	2221      	movs	r2, #33	@ 0x21
 800c386:	2104      	movs	r1, #4
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 fc2d 	bl	800cbe8 <_calloc_r>
 800c38e:	69e3      	ldr	r3, [r4, #28]
 800c390:	60f0      	str	r0, [r6, #12]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e4      	bne.n	800c362 <_Balloc+0x2e>
 800c398:	2000      	movs	r0, #0
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	6802      	ldr	r2, [r0, #0]
 800c39e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3a8:	e7f7      	b.n	800c39a <_Balloc+0x66>
 800c3aa:	bf00      	nop
 800c3ac:	0800dd75 	.word	0x0800dd75
 800c3b0:	0800ddf5 	.word	0x0800ddf5

0800c3b4 <_Bfree>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	69c6      	ldr	r6, [r0, #28]
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	b976      	cbnz	r6, 800c3dc <_Bfree+0x28>
 800c3be:	2010      	movs	r0, #16
 800c3c0:	f7fe fa74 	bl	800a8ac <malloc>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	61e8      	str	r0, [r5, #28]
 800c3c8:	b920      	cbnz	r0, 800c3d4 <_Bfree+0x20>
 800c3ca:	4b09      	ldr	r3, [pc, #36]	@ (800c3f0 <_Bfree+0x3c>)
 800c3cc:	4809      	ldr	r0, [pc, #36]	@ (800c3f4 <_Bfree+0x40>)
 800c3ce:	218f      	movs	r1, #143	@ 0x8f
 800c3d0:	f000 fbec 	bl	800cbac <__assert_func>
 800c3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3d8:	6006      	str	r6, [r0, #0]
 800c3da:	60c6      	str	r6, [r0, #12]
 800c3dc:	b13c      	cbz	r4, 800c3ee <_Bfree+0x3a>
 800c3de:	69eb      	ldr	r3, [r5, #28]
 800c3e0:	6862      	ldr	r2, [r4, #4]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3e8:	6021      	str	r1, [r4, #0]
 800c3ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3ee:	bd70      	pop	{r4, r5, r6, pc}
 800c3f0:	0800dd75 	.word	0x0800dd75
 800c3f4:	0800ddf5 	.word	0x0800ddf5

0800c3f8 <__multadd>:
 800c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fc:	690d      	ldr	r5, [r1, #16]
 800c3fe:	4607      	mov	r7, r0
 800c400:	460c      	mov	r4, r1
 800c402:	461e      	mov	r6, r3
 800c404:	f101 0c14 	add.w	ip, r1, #20
 800c408:	2000      	movs	r0, #0
 800c40a:	f8dc 3000 	ldr.w	r3, [ip]
 800c40e:	b299      	uxth	r1, r3
 800c410:	fb02 6101 	mla	r1, r2, r1, r6
 800c414:	0c1e      	lsrs	r6, r3, #16
 800c416:	0c0b      	lsrs	r3, r1, #16
 800c418:	fb02 3306 	mla	r3, r2, r6, r3
 800c41c:	b289      	uxth	r1, r1
 800c41e:	3001      	adds	r0, #1
 800c420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c424:	4285      	cmp	r5, r0
 800c426:	f84c 1b04 	str.w	r1, [ip], #4
 800c42a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c42e:	dcec      	bgt.n	800c40a <__multadd+0x12>
 800c430:	b30e      	cbz	r6, 800c476 <__multadd+0x7e>
 800c432:	68a3      	ldr	r3, [r4, #8]
 800c434:	42ab      	cmp	r3, r5
 800c436:	dc19      	bgt.n	800c46c <__multadd+0x74>
 800c438:	6861      	ldr	r1, [r4, #4]
 800c43a:	4638      	mov	r0, r7
 800c43c:	3101      	adds	r1, #1
 800c43e:	f7ff ff79 	bl	800c334 <_Balloc>
 800c442:	4680      	mov	r8, r0
 800c444:	b928      	cbnz	r0, 800c452 <__multadd+0x5a>
 800c446:	4602      	mov	r2, r0
 800c448:	4b0c      	ldr	r3, [pc, #48]	@ (800c47c <__multadd+0x84>)
 800c44a:	480d      	ldr	r0, [pc, #52]	@ (800c480 <__multadd+0x88>)
 800c44c:	21ba      	movs	r1, #186	@ 0xba
 800c44e:	f000 fbad 	bl	800cbac <__assert_func>
 800c452:	6922      	ldr	r2, [r4, #16]
 800c454:	3202      	adds	r2, #2
 800c456:	f104 010c 	add.w	r1, r4, #12
 800c45a:	0092      	lsls	r2, r2, #2
 800c45c:	300c      	adds	r0, #12
 800c45e:	f000 fb97 	bl	800cb90 <memcpy>
 800c462:	4621      	mov	r1, r4
 800c464:	4638      	mov	r0, r7
 800c466:	f7ff ffa5 	bl	800c3b4 <_Bfree>
 800c46a:	4644      	mov	r4, r8
 800c46c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c470:	3501      	adds	r5, #1
 800c472:	615e      	str	r6, [r3, #20]
 800c474:	6125      	str	r5, [r4, #16]
 800c476:	4620      	mov	r0, r4
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c47c:	0800dde4 	.word	0x0800dde4
 800c480:	0800ddf5 	.word	0x0800ddf5

0800c484 <__hi0bits>:
 800c484:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c488:	4603      	mov	r3, r0
 800c48a:	bf36      	itet	cc
 800c48c:	0403      	lslcc	r3, r0, #16
 800c48e:	2000      	movcs	r0, #0
 800c490:	2010      	movcc	r0, #16
 800c492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c496:	bf3c      	itt	cc
 800c498:	021b      	lslcc	r3, r3, #8
 800c49a:	3008      	addcc	r0, #8
 800c49c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4a0:	bf3c      	itt	cc
 800c4a2:	011b      	lslcc	r3, r3, #4
 800c4a4:	3004      	addcc	r0, #4
 800c4a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4aa:	bf3c      	itt	cc
 800c4ac:	009b      	lslcc	r3, r3, #2
 800c4ae:	3002      	addcc	r0, #2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	db05      	blt.n	800c4c0 <__hi0bits+0x3c>
 800c4b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c4b8:	f100 0001 	add.w	r0, r0, #1
 800c4bc:	bf08      	it	eq
 800c4be:	2020      	moveq	r0, #32
 800c4c0:	4770      	bx	lr

0800c4c2 <__lo0bits>:
 800c4c2:	6803      	ldr	r3, [r0, #0]
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	f013 0007 	ands.w	r0, r3, #7
 800c4ca:	d00b      	beq.n	800c4e4 <__lo0bits+0x22>
 800c4cc:	07d9      	lsls	r1, r3, #31
 800c4ce:	d421      	bmi.n	800c514 <__lo0bits+0x52>
 800c4d0:	0798      	lsls	r0, r3, #30
 800c4d2:	bf49      	itett	mi
 800c4d4:	085b      	lsrmi	r3, r3, #1
 800c4d6:	089b      	lsrpl	r3, r3, #2
 800c4d8:	2001      	movmi	r0, #1
 800c4da:	6013      	strmi	r3, [r2, #0]
 800c4dc:	bf5c      	itt	pl
 800c4de:	6013      	strpl	r3, [r2, #0]
 800c4e0:	2002      	movpl	r0, #2
 800c4e2:	4770      	bx	lr
 800c4e4:	b299      	uxth	r1, r3
 800c4e6:	b909      	cbnz	r1, 800c4ec <__lo0bits+0x2a>
 800c4e8:	0c1b      	lsrs	r3, r3, #16
 800c4ea:	2010      	movs	r0, #16
 800c4ec:	b2d9      	uxtb	r1, r3
 800c4ee:	b909      	cbnz	r1, 800c4f4 <__lo0bits+0x32>
 800c4f0:	3008      	adds	r0, #8
 800c4f2:	0a1b      	lsrs	r3, r3, #8
 800c4f4:	0719      	lsls	r1, r3, #28
 800c4f6:	bf04      	itt	eq
 800c4f8:	091b      	lsreq	r3, r3, #4
 800c4fa:	3004      	addeq	r0, #4
 800c4fc:	0799      	lsls	r1, r3, #30
 800c4fe:	bf04      	itt	eq
 800c500:	089b      	lsreq	r3, r3, #2
 800c502:	3002      	addeq	r0, #2
 800c504:	07d9      	lsls	r1, r3, #31
 800c506:	d403      	bmi.n	800c510 <__lo0bits+0x4e>
 800c508:	085b      	lsrs	r3, r3, #1
 800c50a:	f100 0001 	add.w	r0, r0, #1
 800c50e:	d003      	beq.n	800c518 <__lo0bits+0x56>
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	4770      	bx	lr
 800c514:	2000      	movs	r0, #0
 800c516:	4770      	bx	lr
 800c518:	2020      	movs	r0, #32
 800c51a:	4770      	bx	lr

0800c51c <__i2b>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	460c      	mov	r4, r1
 800c520:	2101      	movs	r1, #1
 800c522:	f7ff ff07 	bl	800c334 <_Balloc>
 800c526:	4602      	mov	r2, r0
 800c528:	b928      	cbnz	r0, 800c536 <__i2b+0x1a>
 800c52a:	4b05      	ldr	r3, [pc, #20]	@ (800c540 <__i2b+0x24>)
 800c52c:	4805      	ldr	r0, [pc, #20]	@ (800c544 <__i2b+0x28>)
 800c52e:	f240 1145 	movw	r1, #325	@ 0x145
 800c532:	f000 fb3b 	bl	800cbac <__assert_func>
 800c536:	2301      	movs	r3, #1
 800c538:	6144      	str	r4, [r0, #20]
 800c53a:	6103      	str	r3, [r0, #16]
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	bf00      	nop
 800c540:	0800dde4 	.word	0x0800dde4
 800c544:	0800ddf5 	.word	0x0800ddf5

0800c548 <__multiply>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	4614      	mov	r4, r2
 800c54e:	690a      	ldr	r2, [r1, #16]
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	429a      	cmp	r2, r3
 800c554:	bfa8      	it	ge
 800c556:	4623      	movge	r3, r4
 800c558:	460f      	mov	r7, r1
 800c55a:	bfa4      	itt	ge
 800c55c:	460c      	movge	r4, r1
 800c55e:	461f      	movge	r7, r3
 800c560:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c564:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c568:	68a3      	ldr	r3, [r4, #8]
 800c56a:	6861      	ldr	r1, [r4, #4]
 800c56c:	eb0a 0609 	add.w	r6, sl, r9
 800c570:	42b3      	cmp	r3, r6
 800c572:	b085      	sub	sp, #20
 800c574:	bfb8      	it	lt
 800c576:	3101      	addlt	r1, #1
 800c578:	f7ff fedc 	bl	800c334 <_Balloc>
 800c57c:	b930      	cbnz	r0, 800c58c <__multiply+0x44>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b44      	ldr	r3, [pc, #272]	@ (800c694 <__multiply+0x14c>)
 800c582:	4845      	ldr	r0, [pc, #276]	@ (800c698 <__multiply+0x150>)
 800c584:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c588:	f000 fb10 	bl	800cbac <__assert_func>
 800c58c:	f100 0514 	add.w	r5, r0, #20
 800c590:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c594:	462b      	mov	r3, r5
 800c596:	2200      	movs	r2, #0
 800c598:	4543      	cmp	r3, r8
 800c59a:	d321      	bcc.n	800c5e0 <__multiply+0x98>
 800c59c:	f107 0114 	add.w	r1, r7, #20
 800c5a0:	f104 0214 	add.w	r2, r4, #20
 800c5a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c5a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c5ac:	9302      	str	r3, [sp, #8]
 800c5ae:	1b13      	subs	r3, r2, r4
 800c5b0:	3b15      	subs	r3, #21
 800c5b2:	f023 0303 	bic.w	r3, r3, #3
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	f104 0715 	add.w	r7, r4, #21
 800c5bc:	42ba      	cmp	r2, r7
 800c5be:	bf38      	it	cc
 800c5c0:	2304      	movcc	r3, #4
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	9103      	str	r1, [sp, #12]
 800c5c8:	428b      	cmp	r3, r1
 800c5ca:	d80c      	bhi.n	800c5e6 <__multiply+0x9e>
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	dd03      	ble.n	800c5d8 <__multiply+0x90>
 800c5d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d05b      	beq.n	800c690 <__multiply+0x148>
 800c5d8:	6106      	str	r6, [r0, #16]
 800c5da:	b005      	add	sp, #20
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	f843 2b04 	str.w	r2, [r3], #4
 800c5e4:	e7d8      	b.n	800c598 <__multiply+0x50>
 800c5e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c5ea:	f1ba 0f00 	cmp.w	sl, #0
 800c5ee:	d024      	beq.n	800c63a <__multiply+0xf2>
 800c5f0:	f104 0e14 	add.w	lr, r4, #20
 800c5f4:	46a9      	mov	r9, r5
 800c5f6:	f04f 0c00 	mov.w	ip, #0
 800c5fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5fe:	f8d9 3000 	ldr.w	r3, [r9]
 800c602:	fa1f fb87 	uxth.w	fp, r7
 800c606:	b29b      	uxth	r3, r3
 800c608:	fb0a 330b 	mla	r3, sl, fp, r3
 800c60c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c610:	f8d9 7000 	ldr.w	r7, [r9]
 800c614:	4463      	add	r3, ip
 800c616:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c61a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c61e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c622:	b29b      	uxth	r3, r3
 800c624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c628:	4572      	cmp	r2, lr
 800c62a:	f849 3b04 	str.w	r3, [r9], #4
 800c62e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c632:	d8e2      	bhi.n	800c5fa <__multiply+0xb2>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	f845 c003 	str.w	ip, [r5, r3]
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c640:	3104      	adds	r1, #4
 800c642:	f1b9 0f00 	cmp.w	r9, #0
 800c646:	d021      	beq.n	800c68c <__multiply+0x144>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	f104 0c14 	add.w	ip, r4, #20
 800c64e:	46ae      	mov	lr, r5
 800c650:	f04f 0a00 	mov.w	sl, #0
 800c654:	f8bc b000 	ldrh.w	fp, [ip]
 800c658:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c65c:	fb09 770b 	mla	r7, r9, fp, r7
 800c660:	4457      	add	r7, sl
 800c662:	b29b      	uxth	r3, r3
 800c664:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c668:	f84e 3b04 	str.w	r3, [lr], #4
 800c66c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c674:	f8be 3000 	ldrh.w	r3, [lr]
 800c678:	fb09 330a 	mla	r3, r9, sl, r3
 800c67c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c680:	4562      	cmp	r2, ip
 800c682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c686:	d8e5      	bhi.n	800c654 <__multiply+0x10c>
 800c688:	9f01      	ldr	r7, [sp, #4]
 800c68a:	51eb      	str	r3, [r5, r7]
 800c68c:	3504      	adds	r5, #4
 800c68e:	e799      	b.n	800c5c4 <__multiply+0x7c>
 800c690:	3e01      	subs	r6, #1
 800c692:	e79b      	b.n	800c5cc <__multiply+0x84>
 800c694:	0800dde4 	.word	0x0800dde4
 800c698:	0800ddf5 	.word	0x0800ddf5

0800c69c <__pow5mult>:
 800c69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a0:	4615      	mov	r5, r2
 800c6a2:	f012 0203 	ands.w	r2, r2, #3
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	460e      	mov	r6, r1
 800c6aa:	d007      	beq.n	800c6bc <__pow5mult+0x20>
 800c6ac:	4c25      	ldr	r4, [pc, #148]	@ (800c744 <__pow5mult+0xa8>)
 800c6ae:	3a01      	subs	r2, #1
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6b6:	f7ff fe9f 	bl	800c3f8 <__multadd>
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	10ad      	asrs	r5, r5, #2
 800c6be:	d03d      	beq.n	800c73c <__pow5mult+0xa0>
 800c6c0:	69fc      	ldr	r4, [r7, #28]
 800c6c2:	b97c      	cbnz	r4, 800c6e4 <__pow5mult+0x48>
 800c6c4:	2010      	movs	r0, #16
 800c6c6:	f7fe f8f1 	bl	800a8ac <malloc>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	61f8      	str	r0, [r7, #28]
 800c6ce:	b928      	cbnz	r0, 800c6dc <__pow5mult+0x40>
 800c6d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c748 <__pow5mult+0xac>)
 800c6d2:	481e      	ldr	r0, [pc, #120]	@ (800c74c <__pow5mult+0xb0>)
 800c6d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c6d8:	f000 fa68 	bl	800cbac <__assert_func>
 800c6dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6e0:	6004      	str	r4, [r0, #0]
 800c6e2:	60c4      	str	r4, [r0, #12]
 800c6e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c6e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6ec:	b94c      	cbnz	r4, 800c702 <__pow5mult+0x66>
 800c6ee:	f240 2171 	movw	r1, #625	@ 0x271
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	f7ff ff12 	bl	800c51c <__i2b>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6fe:	4604      	mov	r4, r0
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	f04f 0900 	mov.w	r9, #0
 800c706:	07eb      	lsls	r3, r5, #31
 800c708:	d50a      	bpl.n	800c720 <__pow5mult+0x84>
 800c70a:	4631      	mov	r1, r6
 800c70c:	4622      	mov	r2, r4
 800c70e:	4638      	mov	r0, r7
 800c710:	f7ff ff1a 	bl	800c548 <__multiply>
 800c714:	4631      	mov	r1, r6
 800c716:	4680      	mov	r8, r0
 800c718:	4638      	mov	r0, r7
 800c71a:	f7ff fe4b 	bl	800c3b4 <_Bfree>
 800c71e:	4646      	mov	r6, r8
 800c720:	106d      	asrs	r5, r5, #1
 800c722:	d00b      	beq.n	800c73c <__pow5mult+0xa0>
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	b938      	cbnz	r0, 800c738 <__pow5mult+0x9c>
 800c728:	4622      	mov	r2, r4
 800c72a:	4621      	mov	r1, r4
 800c72c:	4638      	mov	r0, r7
 800c72e:	f7ff ff0b 	bl	800c548 <__multiply>
 800c732:	6020      	str	r0, [r4, #0]
 800c734:	f8c0 9000 	str.w	r9, [r0]
 800c738:	4604      	mov	r4, r0
 800c73a:	e7e4      	b.n	800c706 <__pow5mult+0x6a>
 800c73c:	4630      	mov	r0, r6
 800c73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c742:	bf00      	nop
 800c744:	0800de50 	.word	0x0800de50
 800c748:	0800dd75 	.word	0x0800dd75
 800c74c:	0800ddf5 	.word	0x0800ddf5

0800c750 <__lshift>:
 800c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	460c      	mov	r4, r1
 800c756:	6849      	ldr	r1, [r1, #4]
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c75e:	68a3      	ldr	r3, [r4, #8]
 800c760:	4607      	mov	r7, r0
 800c762:	4691      	mov	r9, r2
 800c764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c768:	f108 0601 	add.w	r6, r8, #1
 800c76c:	42b3      	cmp	r3, r6
 800c76e:	db0b      	blt.n	800c788 <__lshift+0x38>
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff fddf 	bl	800c334 <_Balloc>
 800c776:	4605      	mov	r5, r0
 800c778:	b948      	cbnz	r0, 800c78e <__lshift+0x3e>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b28      	ldr	r3, [pc, #160]	@ (800c820 <__lshift+0xd0>)
 800c77e:	4829      	ldr	r0, [pc, #164]	@ (800c824 <__lshift+0xd4>)
 800c780:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c784:	f000 fa12 	bl	800cbac <__assert_func>
 800c788:	3101      	adds	r1, #1
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	e7ee      	b.n	800c76c <__lshift+0x1c>
 800c78e:	2300      	movs	r3, #0
 800c790:	f100 0114 	add.w	r1, r0, #20
 800c794:	f100 0210 	add.w	r2, r0, #16
 800c798:	4618      	mov	r0, r3
 800c79a:	4553      	cmp	r3, sl
 800c79c:	db33      	blt.n	800c806 <__lshift+0xb6>
 800c79e:	6920      	ldr	r0, [r4, #16]
 800c7a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7a4:	f104 0314 	add.w	r3, r4, #20
 800c7a8:	f019 091f 	ands.w	r9, r9, #31
 800c7ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7b4:	d02b      	beq.n	800c80e <__lshift+0xbe>
 800c7b6:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ba:	468a      	mov	sl, r1
 800c7bc:	2200      	movs	r2, #0
 800c7be:	6818      	ldr	r0, [r3, #0]
 800c7c0:	fa00 f009 	lsl.w	r0, r0, r9
 800c7c4:	4310      	orrs	r0, r2
 800c7c6:	f84a 0b04 	str.w	r0, [sl], #4
 800c7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ce:	459c      	cmp	ip, r3
 800c7d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7d4:	d8f3      	bhi.n	800c7be <__lshift+0x6e>
 800c7d6:	ebac 0304 	sub.w	r3, ip, r4
 800c7da:	3b15      	subs	r3, #21
 800c7dc:	f023 0303 	bic.w	r3, r3, #3
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	f104 0015 	add.w	r0, r4, #21
 800c7e6:	4584      	cmp	ip, r0
 800c7e8:	bf38      	it	cc
 800c7ea:	2304      	movcc	r3, #4
 800c7ec:	50ca      	str	r2, [r1, r3]
 800c7ee:	b10a      	cbz	r2, 800c7f4 <__lshift+0xa4>
 800c7f0:	f108 0602 	add.w	r6, r8, #2
 800c7f4:	3e01      	subs	r6, #1
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	612e      	str	r6, [r5, #16]
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	f7ff fdda 	bl	800c3b4 <_Bfree>
 800c800:	4628      	mov	r0, r5
 800c802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c806:	f842 0f04 	str.w	r0, [r2, #4]!
 800c80a:	3301      	adds	r3, #1
 800c80c:	e7c5      	b.n	800c79a <__lshift+0x4a>
 800c80e:	3904      	subs	r1, #4
 800c810:	f853 2b04 	ldr.w	r2, [r3], #4
 800c814:	f841 2f04 	str.w	r2, [r1, #4]!
 800c818:	459c      	cmp	ip, r3
 800c81a:	d8f9      	bhi.n	800c810 <__lshift+0xc0>
 800c81c:	e7ea      	b.n	800c7f4 <__lshift+0xa4>
 800c81e:	bf00      	nop
 800c820:	0800dde4 	.word	0x0800dde4
 800c824:	0800ddf5 	.word	0x0800ddf5

0800c828 <__mcmp>:
 800c828:	690a      	ldr	r2, [r1, #16]
 800c82a:	4603      	mov	r3, r0
 800c82c:	6900      	ldr	r0, [r0, #16]
 800c82e:	1a80      	subs	r0, r0, r2
 800c830:	b530      	push	{r4, r5, lr}
 800c832:	d10e      	bne.n	800c852 <__mcmp+0x2a>
 800c834:	3314      	adds	r3, #20
 800c836:	3114      	adds	r1, #20
 800c838:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c83c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c848:	4295      	cmp	r5, r2
 800c84a:	d003      	beq.n	800c854 <__mcmp+0x2c>
 800c84c:	d205      	bcs.n	800c85a <__mcmp+0x32>
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295
 800c852:	bd30      	pop	{r4, r5, pc}
 800c854:	42a3      	cmp	r3, r4
 800c856:	d3f3      	bcc.n	800c840 <__mcmp+0x18>
 800c858:	e7fb      	b.n	800c852 <__mcmp+0x2a>
 800c85a:	2001      	movs	r0, #1
 800c85c:	e7f9      	b.n	800c852 <__mcmp+0x2a>
	...

0800c860 <__mdiff>:
 800c860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	4689      	mov	r9, r1
 800c866:	4606      	mov	r6, r0
 800c868:	4611      	mov	r1, r2
 800c86a:	4648      	mov	r0, r9
 800c86c:	4614      	mov	r4, r2
 800c86e:	f7ff ffdb 	bl	800c828 <__mcmp>
 800c872:	1e05      	subs	r5, r0, #0
 800c874:	d112      	bne.n	800c89c <__mdiff+0x3c>
 800c876:	4629      	mov	r1, r5
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff fd5b 	bl	800c334 <_Balloc>
 800c87e:	4602      	mov	r2, r0
 800c880:	b928      	cbnz	r0, 800c88e <__mdiff+0x2e>
 800c882:	4b3f      	ldr	r3, [pc, #252]	@ (800c980 <__mdiff+0x120>)
 800c884:	f240 2137 	movw	r1, #567	@ 0x237
 800c888:	483e      	ldr	r0, [pc, #248]	@ (800c984 <__mdiff+0x124>)
 800c88a:	f000 f98f 	bl	800cbac <__assert_func>
 800c88e:	2301      	movs	r3, #1
 800c890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c894:	4610      	mov	r0, r2
 800c896:	b003      	add	sp, #12
 800c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89c:	bfbc      	itt	lt
 800c89e:	464b      	movlt	r3, r9
 800c8a0:	46a1      	movlt	r9, r4
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c8a8:	bfba      	itte	lt
 800c8aa:	461c      	movlt	r4, r3
 800c8ac:	2501      	movlt	r5, #1
 800c8ae:	2500      	movge	r5, #0
 800c8b0:	f7ff fd40 	bl	800c334 <_Balloc>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	b918      	cbnz	r0, 800c8c0 <__mdiff+0x60>
 800c8b8:	4b31      	ldr	r3, [pc, #196]	@ (800c980 <__mdiff+0x120>)
 800c8ba:	f240 2145 	movw	r1, #581	@ 0x245
 800c8be:	e7e3      	b.n	800c888 <__mdiff+0x28>
 800c8c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c8c4:	6926      	ldr	r6, [r4, #16]
 800c8c6:	60c5      	str	r5, [r0, #12]
 800c8c8:	f109 0310 	add.w	r3, r9, #16
 800c8cc:	f109 0514 	add.w	r5, r9, #20
 800c8d0:	f104 0e14 	add.w	lr, r4, #20
 800c8d4:	f100 0b14 	add.w	fp, r0, #20
 800c8d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c8dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	46d9      	mov	r9, fp
 800c8e4:	f04f 0c00 	mov.w	ip, #0
 800c8e8:	9b01      	ldr	r3, [sp, #4]
 800c8ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c8ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	fa1f f38a 	uxth.w	r3, sl
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	b283      	uxth	r3, r0
 800c8fc:	1acb      	subs	r3, r1, r3
 800c8fe:	0c00      	lsrs	r0, r0, #16
 800c900:	4463      	add	r3, ip
 800c902:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c906:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c910:	4576      	cmp	r6, lr
 800c912:	f849 3b04 	str.w	r3, [r9], #4
 800c916:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c91a:	d8e5      	bhi.n	800c8e8 <__mdiff+0x88>
 800c91c:	1b33      	subs	r3, r6, r4
 800c91e:	3b15      	subs	r3, #21
 800c920:	f023 0303 	bic.w	r3, r3, #3
 800c924:	3415      	adds	r4, #21
 800c926:	3304      	adds	r3, #4
 800c928:	42a6      	cmp	r6, r4
 800c92a:	bf38      	it	cc
 800c92c:	2304      	movcc	r3, #4
 800c92e:	441d      	add	r5, r3
 800c930:	445b      	add	r3, fp
 800c932:	461e      	mov	r6, r3
 800c934:	462c      	mov	r4, r5
 800c936:	4544      	cmp	r4, r8
 800c938:	d30e      	bcc.n	800c958 <__mdiff+0xf8>
 800c93a:	f108 0103 	add.w	r1, r8, #3
 800c93e:	1b49      	subs	r1, r1, r5
 800c940:	f021 0103 	bic.w	r1, r1, #3
 800c944:	3d03      	subs	r5, #3
 800c946:	45a8      	cmp	r8, r5
 800c948:	bf38      	it	cc
 800c94a:	2100      	movcc	r1, #0
 800c94c:	440b      	add	r3, r1
 800c94e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c952:	b191      	cbz	r1, 800c97a <__mdiff+0x11a>
 800c954:	6117      	str	r7, [r2, #16]
 800c956:	e79d      	b.n	800c894 <__mdiff+0x34>
 800c958:	f854 1b04 	ldr.w	r1, [r4], #4
 800c95c:	46e6      	mov	lr, ip
 800c95e:	0c08      	lsrs	r0, r1, #16
 800c960:	fa1c fc81 	uxtah	ip, ip, r1
 800c964:	4471      	add	r1, lr
 800c966:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c96a:	b289      	uxth	r1, r1
 800c96c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c970:	f846 1b04 	str.w	r1, [r6], #4
 800c974:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c978:	e7dd      	b.n	800c936 <__mdiff+0xd6>
 800c97a:	3f01      	subs	r7, #1
 800c97c:	e7e7      	b.n	800c94e <__mdiff+0xee>
 800c97e:	bf00      	nop
 800c980:	0800dde4 	.word	0x0800dde4
 800c984:	0800ddf5 	.word	0x0800ddf5

0800c988 <__d2b>:
 800c988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c98c:	460f      	mov	r7, r1
 800c98e:	2101      	movs	r1, #1
 800c990:	ec59 8b10 	vmov	r8, r9, d0
 800c994:	4616      	mov	r6, r2
 800c996:	f7ff fccd 	bl	800c334 <_Balloc>
 800c99a:	4604      	mov	r4, r0
 800c99c:	b930      	cbnz	r0, 800c9ac <__d2b+0x24>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	4b23      	ldr	r3, [pc, #140]	@ (800ca30 <__d2b+0xa8>)
 800c9a2:	4824      	ldr	r0, [pc, #144]	@ (800ca34 <__d2b+0xac>)
 800c9a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c9a8:	f000 f900 	bl	800cbac <__assert_func>
 800c9ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9b4:	b10d      	cbz	r5, 800c9ba <__d2b+0x32>
 800c9b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	f1b8 0300 	subs.w	r3, r8, #0
 800c9c0:	d023      	beq.n	800ca0a <__d2b+0x82>
 800c9c2:	4668      	mov	r0, sp
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	f7ff fd7c 	bl	800c4c2 <__lo0bits>
 800c9ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9ce:	b1d0      	cbz	r0, 800ca06 <__d2b+0x7e>
 800c9d0:	f1c0 0320 	rsb	r3, r0, #32
 800c9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d8:	430b      	orrs	r3, r1
 800c9da:	40c2      	lsrs	r2, r0
 800c9dc:	6163      	str	r3, [r4, #20]
 800c9de:	9201      	str	r2, [sp, #4]
 800c9e0:	9b01      	ldr	r3, [sp, #4]
 800c9e2:	61a3      	str	r3, [r4, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	bf0c      	ite	eq
 800c9e8:	2201      	moveq	r2, #1
 800c9ea:	2202      	movne	r2, #2
 800c9ec:	6122      	str	r2, [r4, #16]
 800c9ee:	b1a5      	cbz	r5, 800ca1a <__d2b+0x92>
 800c9f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c9f4:	4405      	add	r5, r0
 800c9f6:	603d      	str	r5, [r7, #0]
 800c9f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c9fc:	6030      	str	r0, [r6, #0]
 800c9fe:	4620      	mov	r0, r4
 800ca00:	b003      	add	sp, #12
 800ca02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca06:	6161      	str	r1, [r4, #20]
 800ca08:	e7ea      	b.n	800c9e0 <__d2b+0x58>
 800ca0a:	a801      	add	r0, sp, #4
 800ca0c:	f7ff fd59 	bl	800c4c2 <__lo0bits>
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	6163      	str	r3, [r4, #20]
 800ca14:	3020      	adds	r0, #32
 800ca16:	2201      	movs	r2, #1
 800ca18:	e7e8      	b.n	800c9ec <__d2b+0x64>
 800ca1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca22:	6038      	str	r0, [r7, #0]
 800ca24:	6918      	ldr	r0, [r3, #16]
 800ca26:	f7ff fd2d 	bl	800c484 <__hi0bits>
 800ca2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca2e:	e7e5      	b.n	800c9fc <__d2b+0x74>
 800ca30:	0800dde4 	.word	0x0800dde4
 800ca34:	0800ddf5 	.word	0x0800ddf5

0800ca38 <__sflush_r>:
 800ca38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	0716      	lsls	r6, r2, #28
 800ca42:	4605      	mov	r5, r0
 800ca44:	460c      	mov	r4, r1
 800ca46:	d454      	bmi.n	800caf2 <__sflush_r+0xba>
 800ca48:	684b      	ldr	r3, [r1, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dc02      	bgt.n	800ca54 <__sflush_r+0x1c>
 800ca4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	dd48      	ble.n	800cae6 <__sflush_r+0xae>
 800ca54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca56:	2e00      	cmp	r6, #0
 800ca58:	d045      	beq.n	800cae6 <__sflush_r+0xae>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca60:	682f      	ldr	r7, [r5, #0]
 800ca62:	6a21      	ldr	r1, [r4, #32]
 800ca64:	602b      	str	r3, [r5, #0]
 800ca66:	d030      	beq.n	800caca <__sflush_r+0x92>
 800ca68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	0759      	lsls	r1, r3, #29
 800ca6e:	d505      	bpl.n	800ca7c <__sflush_r+0x44>
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	1ad2      	subs	r2, r2, r3
 800ca74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca76:	b10b      	cbz	r3, 800ca7c <__sflush_r+0x44>
 800ca78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca80:	6a21      	ldr	r1, [r4, #32]
 800ca82:	4628      	mov	r0, r5
 800ca84:	47b0      	blx	r6
 800ca86:	1c43      	adds	r3, r0, #1
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	d106      	bne.n	800ca9a <__sflush_r+0x62>
 800ca8c:	6829      	ldr	r1, [r5, #0]
 800ca8e:	291d      	cmp	r1, #29
 800ca90:	d82b      	bhi.n	800caea <__sflush_r+0xb2>
 800ca92:	4a2a      	ldr	r2, [pc, #168]	@ (800cb3c <__sflush_r+0x104>)
 800ca94:	410a      	asrs	r2, r1
 800ca96:	07d6      	lsls	r6, r2, #31
 800ca98:	d427      	bmi.n	800caea <__sflush_r+0xb2>
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	6062      	str	r2, [r4, #4]
 800ca9e:	04d9      	lsls	r1, r3, #19
 800caa0:	6922      	ldr	r2, [r4, #16]
 800caa2:	6022      	str	r2, [r4, #0]
 800caa4:	d504      	bpl.n	800cab0 <__sflush_r+0x78>
 800caa6:	1c42      	adds	r2, r0, #1
 800caa8:	d101      	bne.n	800caae <__sflush_r+0x76>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	b903      	cbnz	r3, 800cab0 <__sflush_r+0x78>
 800caae:	6560      	str	r0, [r4, #84]	@ 0x54
 800cab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cab2:	602f      	str	r7, [r5, #0]
 800cab4:	b1b9      	cbz	r1, 800cae6 <__sflush_r+0xae>
 800cab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caba:	4299      	cmp	r1, r3
 800cabc:	d002      	beq.n	800cac4 <__sflush_r+0x8c>
 800cabe:	4628      	mov	r0, r5
 800cac0:	f7ff fbee 	bl	800c2a0 <_free_r>
 800cac4:	2300      	movs	r3, #0
 800cac6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cac8:	e00d      	b.n	800cae6 <__sflush_r+0xae>
 800caca:	2301      	movs	r3, #1
 800cacc:	4628      	mov	r0, r5
 800cace:	47b0      	blx	r6
 800cad0:	4602      	mov	r2, r0
 800cad2:	1c50      	adds	r0, r2, #1
 800cad4:	d1c9      	bne.n	800ca6a <__sflush_r+0x32>
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0c6      	beq.n	800ca6a <__sflush_r+0x32>
 800cadc:	2b1d      	cmp	r3, #29
 800cade:	d001      	beq.n	800cae4 <__sflush_r+0xac>
 800cae0:	2b16      	cmp	r3, #22
 800cae2:	d11e      	bne.n	800cb22 <__sflush_r+0xea>
 800cae4:	602f      	str	r7, [r5, #0]
 800cae6:	2000      	movs	r0, #0
 800cae8:	e022      	b.n	800cb30 <__sflush_r+0xf8>
 800caea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caee:	b21b      	sxth	r3, r3
 800caf0:	e01b      	b.n	800cb2a <__sflush_r+0xf2>
 800caf2:	690f      	ldr	r7, [r1, #16]
 800caf4:	2f00      	cmp	r7, #0
 800caf6:	d0f6      	beq.n	800cae6 <__sflush_r+0xae>
 800caf8:	0793      	lsls	r3, r2, #30
 800cafa:	680e      	ldr	r6, [r1, #0]
 800cafc:	bf08      	it	eq
 800cafe:	694b      	ldreq	r3, [r1, #20]
 800cb00:	600f      	str	r7, [r1, #0]
 800cb02:	bf18      	it	ne
 800cb04:	2300      	movne	r3, #0
 800cb06:	eba6 0807 	sub.w	r8, r6, r7
 800cb0a:	608b      	str	r3, [r1, #8]
 800cb0c:	f1b8 0f00 	cmp.w	r8, #0
 800cb10:	dde9      	ble.n	800cae6 <__sflush_r+0xae>
 800cb12:	6a21      	ldr	r1, [r4, #32]
 800cb14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb16:	4643      	mov	r3, r8
 800cb18:	463a      	mov	r2, r7
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	47b0      	blx	r6
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	dc08      	bgt.n	800cb34 <__sflush_r+0xfc>
 800cb22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	4407      	add	r7, r0
 800cb36:	eba8 0800 	sub.w	r8, r8, r0
 800cb3a:	e7e7      	b.n	800cb0c <__sflush_r+0xd4>
 800cb3c:	dfbffffe 	.word	0xdfbffffe

0800cb40 <_fflush_r>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	690b      	ldr	r3, [r1, #16]
 800cb44:	4605      	mov	r5, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	b913      	cbnz	r3, 800cb50 <_fflush_r+0x10>
 800cb4a:	2500      	movs	r5, #0
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	b118      	cbz	r0, 800cb5a <_fflush_r+0x1a>
 800cb52:	6a03      	ldr	r3, [r0, #32]
 800cb54:	b90b      	cbnz	r3, 800cb5a <_fflush_r+0x1a>
 800cb56:	f7fe fc4b 	bl	800b3f0 <__sinit>
 800cb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0f3      	beq.n	800cb4a <_fflush_r+0xa>
 800cb62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb64:	07d0      	lsls	r0, r2, #31
 800cb66:	d404      	bmi.n	800cb72 <_fflush_r+0x32>
 800cb68:	0599      	lsls	r1, r3, #22
 800cb6a:	d402      	bmi.n	800cb72 <_fflush_r+0x32>
 800cb6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb6e:	f7fe fd46 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800cb72:	4628      	mov	r0, r5
 800cb74:	4621      	mov	r1, r4
 800cb76:	f7ff ff5f 	bl	800ca38 <__sflush_r>
 800cb7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb7c:	07da      	lsls	r2, r3, #31
 800cb7e:	4605      	mov	r5, r0
 800cb80:	d4e4      	bmi.n	800cb4c <_fflush_r+0xc>
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	059b      	lsls	r3, r3, #22
 800cb86:	d4e1      	bmi.n	800cb4c <_fflush_r+0xc>
 800cb88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb8a:	f7fe fd39 	bl	800b600 <__retarget_lock_release_recursive>
 800cb8e:	e7dd      	b.n	800cb4c <_fflush_r+0xc>

0800cb90 <memcpy>:
 800cb90:	440a      	add	r2, r1
 800cb92:	4291      	cmp	r1, r2
 800cb94:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb98:	d100      	bne.n	800cb9c <memcpy+0xc>
 800cb9a:	4770      	bx	lr
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cba6:	4291      	cmp	r1, r2
 800cba8:	d1f9      	bne.n	800cb9e <memcpy+0xe>
 800cbaa:	bd10      	pop	{r4, pc}

0800cbac <__assert_func>:
 800cbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbae:	4614      	mov	r4, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	4b09      	ldr	r3, [pc, #36]	@ (800cbd8 <__assert_func+0x2c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	68d8      	ldr	r0, [r3, #12]
 800cbba:	b954      	cbnz	r4, 800cbd2 <__assert_func+0x26>
 800cbbc:	4b07      	ldr	r3, [pc, #28]	@ (800cbdc <__assert_func+0x30>)
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbc4:	9100      	str	r1, [sp, #0]
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	4905      	ldr	r1, [pc, #20]	@ (800cbe0 <__assert_func+0x34>)
 800cbca:	f000 f841 	bl	800cc50 <fiprintf>
 800cbce:	f000 f851 	bl	800cc74 <abort>
 800cbd2:	4b04      	ldr	r3, [pc, #16]	@ (800cbe4 <__assert_func+0x38>)
 800cbd4:	e7f4      	b.n	800cbc0 <__assert_func+0x14>
 800cbd6:	bf00      	nop
 800cbd8:	20000078 	.word	0x20000078
 800cbdc:	0800df95 	.word	0x0800df95
 800cbe0:	0800df67 	.word	0x0800df67
 800cbe4:	0800df5a 	.word	0x0800df5a

0800cbe8 <_calloc_r>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	fba1 5402 	umull	r5, r4, r1, r2
 800cbee:	b93c      	cbnz	r4, 800cc00 <_calloc_r+0x18>
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7fd fe8d 	bl	800a910 <_malloc_r>
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	b928      	cbnz	r0, 800cc06 <_calloc_r+0x1e>
 800cbfa:	2600      	movs	r6, #0
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	220c      	movs	r2, #12
 800cc02:	6002      	str	r2, [r0, #0]
 800cc04:	e7f9      	b.n	800cbfa <_calloc_r+0x12>
 800cc06:	462a      	mov	r2, r5
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f7fe fc6a 	bl	800b4e2 <memset>
 800cc0e:	e7f5      	b.n	800cbfc <_calloc_r+0x14>

0800cc10 <__ascii_mbtowc>:
 800cc10:	b082      	sub	sp, #8
 800cc12:	b901      	cbnz	r1, 800cc16 <__ascii_mbtowc+0x6>
 800cc14:	a901      	add	r1, sp, #4
 800cc16:	b142      	cbz	r2, 800cc2a <__ascii_mbtowc+0x1a>
 800cc18:	b14b      	cbz	r3, 800cc2e <__ascii_mbtowc+0x1e>
 800cc1a:	7813      	ldrb	r3, [r2, #0]
 800cc1c:	600b      	str	r3, [r1, #0]
 800cc1e:	7812      	ldrb	r2, [r2, #0]
 800cc20:	1e10      	subs	r0, r2, #0
 800cc22:	bf18      	it	ne
 800cc24:	2001      	movne	r0, #1
 800cc26:	b002      	add	sp, #8
 800cc28:	4770      	bx	lr
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	e7fb      	b.n	800cc26 <__ascii_mbtowc+0x16>
 800cc2e:	f06f 0001 	mvn.w	r0, #1
 800cc32:	e7f8      	b.n	800cc26 <__ascii_mbtowc+0x16>

0800cc34 <__ascii_wctomb>:
 800cc34:	4603      	mov	r3, r0
 800cc36:	4608      	mov	r0, r1
 800cc38:	b141      	cbz	r1, 800cc4c <__ascii_wctomb+0x18>
 800cc3a:	2aff      	cmp	r2, #255	@ 0xff
 800cc3c:	d904      	bls.n	800cc48 <__ascii_wctomb+0x14>
 800cc3e:	228a      	movs	r2, #138	@ 0x8a
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	f04f 30ff 	mov.w	r0, #4294967295
 800cc46:	4770      	bx	lr
 800cc48:	700a      	strb	r2, [r1, #0]
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	4770      	bx	lr
	...

0800cc50 <fiprintf>:
 800cc50:	b40e      	push	{r1, r2, r3}
 800cc52:	b503      	push	{r0, r1, lr}
 800cc54:	4601      	mov	r1, r0
 800cc56:	ab03      	add	r3, sp, #12
 800cc58:	4805      	ldr	r0, [pc, #20]	@ (800cc70 <fiprintf+0x20>)
 800cc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5e:	6800      	ldr	r0, [r0, #0]
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	f000 f837 	bl	800ccd4 <_vfiprintf_r>
 800cc66:	b002      	add	sp, #8
 800cc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc6c:	b003      	add	sp, #12
 800cc6e:	4770      	bx	lr
 800cc70:	20000078 	.word	0x20000078

0800cc74 <abort>:
 800cc74:	b508      	push	{r3, lr}
 800cc76:	2006      	movs	r0, #6
 800cc78:	f000 fa00 	bl	800d07c <raise>
 800cc7c:	2001      	movs	r0, #1
 800cc7e:	f7f5 f8ef 	bl	8001e60 <_exit>

0800cc82 <__sfputc_r>:
 800cc82:	6893      	ldr	r3, [r2, #8]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	b410      	push	{r4}
 800cc8a:	6093      	str	r3, [r2, #8]
 800cc8c:	da08      	bge.n	800cca0 <__sfputc_r+0x1e>
 800cc8e:	6994      	ldr	r4, [r2, #24]
 800cc90:	42a3      	cmp	r3, r4
 800cc92:	db01      	blt.n	800cc98 <__sfputc_r+0x16>
 800cc94:	290a      	cmp	r1, #10
 800cc96:	d103      	bne.n	800cca0 <__sfputc_r+0x1e>
 800cc98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc9c:	f000 b932 	b.w	800cf04 <__swbuf_r>
 800cca0:	6813      	ldr	r3, [r2, #0]
 800cca2:	1c58      	adds	r0, r3, #1
 800cca4:	6010      	str	r0, [r2, #0]
 800cca6:	7019      	strb	r1, [r3, #0]
 800cca8:	4608      	mov	r0, r1
 800ccaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <__sfputs_r>:
 800ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	4614      	mov	r4, r2
 800ccb8:	18d5      	adds	r5, r2, r3
 800ccba:	42ac      	cmp	r4, r5
 800ccbc:	d101      	bne.n	800ccc2 <__sfputs_r+0x12>
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	e007      	b.n	800ccd2 <__sfputs_r+0x22>
 800ccc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7ff ffda 	bl	800cc82 <__sfputc_r>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	d1f3      	bne.n	800ccba <__sfputs_r+0xa>
 800ccd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccd4 <_vfiprintf_r>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	460d      	mov	r5, r1
 800ccda:	b09d      	sub	sp, #116	@ 0x74
 800ccdc:	4614      	mov	r4, r2
 800ccde:	4698      	mov	r8, r3
 800cce0:	4606      	mov	r6, r0
 800cce2:	b118      	cbz	r0, 800ccec <_vfiprintf_r+0x18>
 800cce4:	6a03      	ldr	r3, [r0, #32]
 800cce6:	b90b      	cbnz	r3, 800ccec <_vfiprintf_r+0x18>
 800cce8:	f7fe fb82 	bl	800b3f0 <__sinit>
 800ccec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccee:	07d9      	lsls	r1, r3, #31
 800ccf0:	d405      	bmi.n	800ccfe <_vfiprintf_r+0x2a>
 800ccf2:	89ab      	ldrh	r3, [r5, #12]
 800ccf4:	059a      	lsls	r2, r3, #22
 800ccf6:	d402      	bmi.n	800ccfe <_vfiprintf_r+0x2a>
 800ccf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccfa:	f7fe fc80 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800ccfe:	89ab      	ldrh	r3, [r5, #12]
 800cd00:	071b      	lsls	r3, r3, #28
 800cd02:	d501      	bpl.n	800cd08 <_vfiprintf_r+0x34>
 800cd04:	692b      	ldr	r3, [r5, #16]
 800cd06:	b99b      	cbnz	r3, 800cd30 <_vfiprintf_r+0x5c>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f000 f938 	bl	800cf80 <__swsetup_r>
 800cd10:	b170      	cbz	r0, 800cd30 <_vfiprintf_r+0x5c>
 800cd12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd14:	07dc      	lsls	r4, r3, #31
 800cd16:	d504      	bpl.n	800cd22 <_vfiprintf_r+0x4e>
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1c:	b01d      	add	sp, #116	@ 0x74
 800cd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd22:	89ab      	ldrh	r3, [r5, #12]
 800cd24:	0598      	lsls	r0, r3, #22
 800cd26:	d4f7      	bmi.n	800cd18 <_vfiprintf_r+0x44>
 800cd28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd2a:	f7fe fc69 	bl	800b600 <__retarget_lock_release_recursive>
 800cd2e:	e7f3      	b.n	800cd18 <_vfiprintf_r+0x44>
 800cd30:	2300      	movs	r3, #0
 800cd32:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd34:	2320      	movs	r3, #32
 800cd36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd3e:	2330      	movs	r3, #48	@ 0x30
 800cd40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cef0 <_vfiprintf_r+0x21c>
 800cd44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd48:	f04f 0901 	mov.w	r9, #1
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	469a      	mov	sl, r3
 800cd50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd54:	b10a      	cbz	r2, 800cd5a <_vfiprintf_r+0x86>
 800cd56:	2a25      	cmp	r2, #37	@ 0x25
 800cd58:	d1f9      	bne.n	800cd4e <_vfiprintf_r+0x7a>
 800cd5a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd5e:	d00b      	beq.n	800cd78 <_vfiprintf_r+0xa4>
 800cd60:	465b      	mov	r3, fp
 800cd62:	4622      	mov	r2, r4
 800cd64:	4629      	mov	r1, r5
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7ff ffa2 	bl	800ccb0 <__sfputs_r>
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	f000 80a7 	beq.w	800cec0 <_vfiprintf_r+0x1ec>
 800cd72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd74:	445a      	add	r2, fp
 800cd76:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd78:	f89a 3000 	ldrb.w	r3, [sl]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 809f 	beq.w	800cec0 <_vfiprintf_r+0x1ec>
 800cd82:	2300      	movs	r3, #0
 800cd84:	f04f 32ff 	mov.w	r2, #4294967295
 800cd88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd8c:	f10a 0a01 	add.w	sl, sl, #1
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	9307      	str	r3, [sp, #28]
 800cd94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd98:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd9a:	4654      	mov	r4, sl
 800cd9c:	2205      	movs	r2, #5
 800cd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda2:	4853      	ldr	r0, [pc, #332]	@ (800cef0 <_vfiprintf_r+0x21c>)
 800cda4:	f7f3 fa14 	bl	80001d0 <memchr>
 800cda8:	9a04      	ldr	r2, [sp, #16]
 800cdaa:	b9d8      	cbnz	r0, 800cde4 <_vfiprintf_r+0x110>
 800cdac:	06d1      	lsls	r1, r2, #27
 800cdae:	bf44      	itt	mi
 800cdb0:	2320      	movmi	r3, #32
 800cdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdb6:	0713      	lsls	r3, r2, #28
 800cdb8:	bf44      	itt	mi
 800cdba:	232b      	movmi	r3, #43	@ 0x2b
 800cdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdc0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdc6:	d015      	beq.n	800cdf4 <_vfiprintf_r+0x120>
 800cdc8:	9a07      	ldr	r2, [sp, #28]
 800cdca:	4654      	mov	r4, sl
 800cdcc:	2000      	movs	r0, #0
 800cdce:	f04f 0c0a 	mov.w	ip, #10
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd8:	3b30      	subs	r3, #48	@ 0x30
 800cdda:	2b09      	cmp	r3, #9
 800cddc:	d94b      	bls.n	800ce76 <_vfiprintf_r+0x1a2>
 800cdde:	b1b0      	cbz	r0, 800ce0e <_vfiprintf_r+0x13a>
 800cde0:	9207      	str	r2, [sp, #28]
 800cde2:	e014      	b.n	800ce0e <_vfiprintf_r+0x13a>
 800cde4:	eba0 0308 	sub.w	r3, r0, r8
 800cde8:	fa09 f303 	lsl.w	r3, r9, r3
 800cdec:	4313      	orrs	r3, r2
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	46a2      	mov	sl, r4
 800cdf2:	e7d2      	b.n	800cd9a <_vfiprintf_r+0xc6>
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	1d19      	adds	r1, r3, #4
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	9103      	str	r1, [sp, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	bfbb      	ittet	lt
 800ce00:	425b      	neglt	r3, r3
 800ce02:	f042 0202 	orrlt.w	r2, r2, #2
 800ce06:	9307      	strge	r3, [sp, #28]
 800ce08:	9307      	strlt	r3, [sp, #28]
 800ce0a:	bfb8      	it	lt
 800ce0c:	9204      	strlt	r2, [sp, #16]
 800ce0e:	7823      	ldrb	r3, [r4, #0]
 800ce10:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce12:	d10a      	bne.n	800ce2a <_vfiprintf_r+0x156>
 800ce14:	7863      	ldrb	r3, [r4, #1]
 800ce16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce18:	d132      	bne.n	800ce80 <_vfiprintf_r+0x1ac>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	1d1a      	adds	r2, r3, #4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	9203      	str	r2, [sp, #12]
 800ce22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce26:	3402      	adds	r4, #2
 800ce28:	9305      	str	r3, [sp, #20]
 800ce2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf00 <_vfiprintf_r+0x22c>
 800ce2e:	7821      	ldrb	r1, [r4, #0]
 800ce30:	2203      	movs	r2, #3
 800ce32:	4650      	mov	r0, sl
 800ce34:	f7f3 f9cc 	bl	80001d0 <memchr>
 800ce38:	b138      	cbz	r0, 800ce4a <_vfiprintf_r+0x176>
 800ce3a:	9b04      	ldr	r3, [sp, #16]
 800ce3c:	eba0 000a 	sub.w	r0, r0, sl
 800ce40:	2240      	movs	r2, #64	@ 0x40
 800ce42:	4082      	lsls	r2, r0
 800ce44:	4313      	orrs	r3, r2
 800ce46:	3401      	adds	r4, #1
 800ce48:	9304      	str	r3, [sp, #16]
 800ce4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4e:	4829      	ldr	r0, [pc, #164]	@ (800cef4 <_vfiprintf_r+0x220>)
 800ce50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce54:	2206      	movs	r2, #6
 800ce56:	f7f3 f9bb 	bl	80001d0 <memchr>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d03f      	beq.n	800cede <_vfiprintf_r+0x20a>
 800ce5e:	4b26      	ldr	r3, [pc, #152]	@ (800cef8 <_vfiprintf_r+0x224>)
 800ce60:	bb1b      	cbnz	r3, 800ceaa <_vfiprintf_r+0x1d6>
 800ce62:	9b03      	ldr	r3, [sp, #12]
 800ce64:	3307      	adds	r3, #7
 800ce66:	f023 0307 	bic.w	r3, r3, #7
 800ce6a:	3308      	adds	r3, #8
 800ce6c:	9303      	str	r3, [sp, #12]
 800ce6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce70:	443b      	add	r3, r7
 800ce72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce74:	e76a      	b.n	800cd4c <_vfiprintf_r+0x78>
 800ce76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	2001      	movs	r0, #1
 800ce7e:	e7a8      	b.n	800cdd2 <_vfiprintf_r+0xfe>
 800ce80:	2300      	movs	r3, #0
 800ce82:	3401      	adds	r4, #1
 800ce84:	9305      	str	r3, [sp, #20]
 800ce86:	4619      	mov	r1, r3
 800ce88:	f04f 0c0a 	mov.w	ip, #10
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce92:	3a30      	subs	r2, #48	@ 0x30
 800ce94:	2a09      	cmp	r2, #9
 800ce96:	d903      	bls.n	800cea0 <_vfiprintf_r+0x1cc>
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0c6      	beq.n	800ce2a <_vfiprintf_r+0x156>
 800ce9c:	9105      	str	r1, [sp, #20]
 800ce9e:	e7c4      	b.n	800ce2a <_vfiprintf_r+0x156>
 800cea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea4:	4604      	mov	r4, r0
 800cea6:	2301      	movs	r3, #1
 800cea8:	e7f0      	b.n	800ce8c <_vfiprintf_r+0x1b8>
 800ceaa:	ab03      	add	r3, sp, #12
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	462a      	mov	r2, r5
 800ceb0:	4b12      	ldr	r3, [pc, #72]	@ (800cefc <_vfiprintf_r+0x228>)
 800ceb2:	a904      	add	r1, sp, #16
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f7fd fe57 	bl	800ab68 <_printf_float>
 800ceba:	4607      	mov	r7, r0
 800cebc:	1c78      	adds	r0, r7, #1
 800cebe:	d1d6      	bne.n	800ce6e <_vfiprintf_r+0x19a>
 800cec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cec2:	07d9      	lsls	r1, r3, #31
 800cec4:	d405      	bmi.n	800ced2 <_vfiprintf_r+0x1fe>
 800cec6:	89ab      	ldrh	r3, [r5, #12]
 800cec8:	059a      	lsls	r2, r3, #22
 800ceca:	d402      	bmi.n	800ced2 <_vfiprintf_r+0x1fe>
 800cecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cece:	f7fe fb97 	bl	800b600 <__retarget_lock_release_recursive>
 800ced2:	89ab      	ldrh	r3, [r5, #12]
 800ced4:	065b      	lsls	r3, r3, #25
 800ced6:	f53f af1f 	bmi.w	800cd18 <_vfiprintf_r+0x44>
 800ceda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cedc:	e71e      	b.n	800cd1c <_vfiprintf_r+0x48>
 800cede:	ab03      	add	r3, sp, #12
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	462a      	mov	r2, r5
 800cee4:	4b05      	ldr	r3, [pc, #20]	@ (800cefc <_vfiprintf_r+0x228>)
 800cee6:	a904      	add	r1, sp, #16
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7fe f8d5 	bl	800b098 <_printf_i>
 800ceee:	e7e4      	b.n	800ceba <_vfiprintf_r+0x1e6>
 800cef0:	0800e097 	.word	0x0800e097
 800cef4:	0800e0a1 	.word	0x0800e0a1
 800cef8:	0800ab69 	.word	0x0800ab69
 800cefc:	0800ccb1 	.word	0x0800ccb1
 800cf00:	0800e09d 	.word	0x0800e09d

0800cf04 <__swbuf_r>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	460e      	mov	r6, r1
 800cf08:	4614      	mov	r4, r2
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	b118      	cbz	r0, 800cf16 <__swbuf_r+0x12>
 800cf0e:	6a03      	ldr	r3, [r0, #32]
 800cf10:	b90b      	cbnz	r3, 800cf16 <__swbuf_r+0x12>
 800cf12:	f7fe fa6d 	bl	800b3f0 <__sinit>
 800cf16:	69a3      	ldr	r3, [r4, #24]
 800cf18:	60a3      	str	r3, [r4, #8]
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	071a      	lsls	r2, r3, #28
 800cf1e:	d501      	bpl.n	800cf24 <__swbuf_r+0x20>
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	b943      	cbnz	r3, 800cf36 <__swbuf_r+0x32>
 800cf24:	4621      	mov	r1, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 f82a 	bl	800cf80 <__swsetup_r>
 800cf2c:	b118      	cbz	r0, 800cf36 <__swbuf_r+0x32>
 800cf2e:	f04f 37ff 	mov.w	r7, #4294967295
 800cf32:	4638      	mov	r0, r7
 800cf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	6922      	ldr	r2, [r4, #16]
 800cf3a:	1a98      	subs	r0, r3, r2
 800cf3c:	6963      	ldr	r3, [r4, #20]
 800cf3e:	b2f6      	uxtb	r6, r6
 800cf40:	4283      	cmp	r3, r0
 800cf42:	4637      	mov	r7, r6
 800cf44:	dc05      	bgt.n	800cf52 <__swbuf_r+0x4e>
 800cf46:	4621      	mov	r1, r4
 800cf48:	4628      	mov	r0, r5
 800cf4a:	f7ff fdf9 	bl	800cb40 <_fflush_r>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d1ed      	bne.n	800cf2e <__swbuf_r+0x2a>
 800cf52:	68a3      	ldr	r3, [r4, #8]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	60a3      	str	r3, [r4, #8]
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	6022      	str	r2, [r4, #0]
 800cf5e:	701e      	strb	r6, [r3, #0]
 800cf60:	6962      	ldr	r2, [r4, #20]
 800cf62:	1c43      	adds	r3, r0, #1
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d004      	beq.n	800cf72 <__swbuf_r+0x6e>
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	07db      	lsls	r3, r3, #31
 800cf6c:	d5e1      	bpl.n	800cf32 <__swbuf_r+0x2e>
 800cf6e:	2e0a      	cmp	r6, #10
 800cf70:	d1df      	bne.n	800cf32 <__swbuf_r+0x2e>
 800cf72:	4621      	mov	r1, r4
 800cf74:	4628      	mov	r0, r5
 800cf76:	f7ff fde3 	bl	800cb40 <_fflush_r>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d0d9      	beq.n	800cf32 <__swbuf_r+0x2e>
 800cf7e:	e7d6      	b.n	800cf2e <__swbuf_r+0x2a>

0800cf80 <__swsetup_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4b29      	ldr	r3, [pc, #164]	@ (800d028 <__swsetup_r+0xa8>)
 800cf84:	4605      	mov	r5, r0
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	460c      	mov	r4, r1
 800cf8a:	b118      	cbz	r0, 800cf94 <__swsetup_r+0x14>
 800cf8c:	6a03      	ldr	r3, [r0, #32]
 800cf8e:	b90b      	cbnz	r3, 800cf94 <__swsetup_r+0x14>
 800cf90:	f7fe fa2e 	bl	800b3f0 <__sinit>
 800cf94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf98:	0719      	lsls	r1, r3, #28
 800cf9a:	d422      	bmi.n	800cfe2 <__swsetup_r+0x62>
 800cf9c:	06da      	lsls	r2, r3, #27
 800cf9e:	d407      	bmi.n	800cfb0 <__swsetup_r+0x30>
 800cfa0:	2209      	movs	r2, #9
 800cfa2:	602a      	str	r2, [r5, #0]
 800cfa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfa8:	81a3      	strh	r3, [r4, #12]
 800cfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cfae:	e033      	b.n	800d018 <__swsetup_r+0x98>
 800cfb0:	0758      	lsls	r0, r3, #29
 800cfb2:	d512      	bpl.n	800cfda <__swsetup_r+0x5a>
 800cfb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfb6:	b141      	cbz	r1, 800cfca <__swsetup_r+0x4a>
 800cfb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	d002      	beq.n	800cfc6 <__swsetup_r+0x46>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f7ff f96d 	bl	800c2a0 <_free_r>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	6063      	str	r3, [r4, #4]
 800cfd6:	6923      	ldr	r3, [r4, #16]
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	89a3      	ldrh	r3, [r4, #12]
 800cfdc:	f043 0308 	orr.w	r3, r3, #8
 800cfe0:	81a3      	strh	r3, [r4, #12]
 800cfe2:	6923      	ldr	r3, [r4, #16]
 800cfe4:	b94b      	cbnz	r3, 800cffa <__swsetup_r+0x7a>
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cff0:	d003      	beq.n	800cffa <__swsetup_r+0x7a>
 800cff2:	4621      	mov	r1, r4
 800cff4:	4628      	mov	r0, r5
 800cff6:	f000 f883 	bl	800d100 <__smakebuf_r>
 800cffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cffe:	f013 0201 	ands.w	r2, r3, #1
 800d002:	d00a      	beq.n	800d01a <__swsetup_r+0x9a>
 800d004:	2200      	movs	r2, #0
 800d006:	60a2      	str	r2, [r4, #8]
 800d008:	6962      	ldr	r2, [r4, #20]
 800d00a:	4252      	negs	r2, r2
 800d00c:	61a2      	str	r2, [r4, #24]
 800d00e:	6922      	ldr	r2, [r4, #16]
 800d010:	b942      	cbnz	r2, 800d024 <__swsetup_r+0xa4>
 800d012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d016:	d1c5      	bne.n	800cfa4 <__swsetup_r+0x24>
 800d018:	bd38      	pop	{r3, r4, r5, pc}
 800d01a:	0799      	lsls	r1, r3, #30
 800d01c:	bf58      	it	pl
 800d01e:	6962      	ldrpl	r2, [r4, #20]
 800d020:	60a2      	str	r2, [r4, #8]
 800d022:	e7f4      	b.n	800d00e <__swsetup_r+0x8e>
 800d024:	2000      	movs	r0, #0
 800d026:	e7f7      	b.n	800d018 <__swsetup_r+0x98>
 800d028:	20000078 	.word	0x20000078

0800d02c <_raise_r>:
 800d02c:	291f      	cmp	r1, #31
 800d02e:	b538      	push	{r3, r4, r5, lr}
 800d030:	4605      	mov	r5, r0
 800d032:	460c      	mov	r4, r1
 800d034:	d904      	bls.n	800d040 <_raise_r+0x14>
 800d036:	2316      	movs	r3, #22
 800d038:	6003      	str	r3, [r0, #0]
 800d03a:	f04f 30ff 	mov.w	r0, #4294967295
 800d03e:	bd38      	pop	{r3, r4, r5, pc}
 800d040:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d042:	b112      	cbz	r2, 800d04a <_raise_r+0x1e>
 800d044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d048:	b94b      	cbnz	r3, 800d05e <_raise_r+0x32>
 800d04a:	4628      	mov	r0, r5
 800d04c:	f000 f830 	bl	800d0b0 <_getpid_r>
 800d050:	4622      	mov	r2, r4
 800d052:	4601      	mov	r1, r0
 800d054:	4628      	mov	r0, r5
 800d056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d05a:	f000 b817 	b.w	800d08c <_kill_r>
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d00a      	beq.n	800d078 <_raise_r+0x4c>
 800d062:	1c59      	adds	r1, r3, #1
 800d064:	d103      	bne.n	800d06e <_raise_r+0x42>
 800d066:	2316      	movs	r3, #22
 800d068:	6003      	str	r3, [r0, #0]
 800d06a:	2001      	movs	r0, #1
 800d06c:	e7e7      	b.n	800d03e <_raise_r+0x12>
 800d06e:	2100      	movs	r1, #0
 800d070:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d074:	4620      	mov	r0, r4
 800d076:	4798      	blx	r3
 800d078:	2000      	movs	r0, #0
 800d07a:	e7e0      	b.n	800d03e <_raise_r+0x12>

0800d07c <raise>:
 800d07c:	4b02      	ldr	r3, [pc, #8]	@ (800d088 <raise+0xc>)
 800d07e:	4601      	mov	r1, r0
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	f7ff bfd3 	b.w	800d02c <_raise_r>
 800d086:	bf00      	nop
 800d088:	20000078 	.word	0x20000078

0800d08c <_kill_r>:
 800d08c:	b538      	push	{r3, r4, r5, lr}
 800d08e:	4d07      	ldr	r5, [pc, #28]	@ (800d0ac <_kill_r+0x20>)
 800d090:	2300      	movs	r3, #0
 800d092:	4604      	mov	r4, r0
 800d094:	4608      	mov	r0, r1
 800d096:	4611      	mov	r1, r2
 800d098:	602b      	str	r3, [r5, #0]
 800d09a:	f7f4 fed1 	bl	8001e40 <_kill>
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	d102      	bne.n	800d0a8 <_kill_r+0x1c>
 800d0a2:	682b      	ldr	r3, [r5, #0]
 800d0a4:	b103      	cbz	r3, 800d0a8 <_kill_r+0x1c>
 800d0a6:	6023      	str	r3, [r4, #0]
 800d0a8:	bd38      	pop	{r3, r4, r5, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20001158 	.word	0x20001158

0800d0b0 <_getpid_r>:
 800d0b0:	f7f4 bebe 	b.w	8001e30 <_getpid>

0800d0b4 <__swhatbuf_r>:
 800d0b4:	b570      	push	{r4, r5, r6, lr}
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	b096      	sub	sp, #88	@ 0x58
 800d0c0:	4615      	mov	r5, r2
 800d0c2:	461e      	mov	r6, r3
 800d0c4:	da0d      	bge.n	800d0e2 <__swhatbuf_r+0x2e>
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0cc:	f04f 0100 	mov.w	r1, #0
 800d0d0:	bf14      	ite	ne
 800d0d2:	2340      	movne	r3, #64	@ 0x40
 800d0d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0d8:	2000      	movs	r0, #0
 800d0da:	6031      	str	r1, [r6, #0]
 800d0dc:	602b      	str	r3, [r5, #0]
 800d0de:	b016      	add	sp, #88	@ 0x58
 800d0e0:	bd70      	pop	{r4, r5, r6, pc}
 800d0e2:	466a      	mov	r2, sp
 800d0e4:	f000 f848 	bl	800d178 <_fstat_r>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	dbec      	blt.n	800d0c6 <__swhatbuf_r+0x12>
 800d0ec:	9901      	ldr	r1, [sp, #4]
 800d0ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0f6:	4259      	negs	r1, r3
 800d0f8:	4159      	adcs	r1, r3
 800d0fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0fe:	e7eb      	b.n	800d0d8 <__swhatbuf_r+0x24>

0800d100 <__smakebuf_r>:
 800d100:	898b      	ldrh	r3, [r1, #12]
 800d102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d104:	079d      	lsls	r5, r3, #30
 800d106:	4606      	mov	r6, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	d507      	bpl.n	800d11c <__smakebuf_r+0x1c>
 800d10c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	6123      	str	r3, [r4, #16]
 800d114:	2301      	movs	r3, #1
 800d116:	6163      	str	r3, [r4, #20]
 800d118:	b003      	add	sp, #12
 800d11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d11c:	ab01      	add	r3, sp, #4
 800d11e:	466a      	mov	r2, sp
 800d120:	f7ff ffc8 	bl	800d0b4 <__swhatbuf_r>
 800d124:	9f00      	ldr	r7, [sp, #0]
 800d126:	4605      	mov	r5, r0
 800d128:	4639      	mov	r1, r7
 800d12a:	4630      	mov	r0, r6
 800d12c:	f7fd fbf0 	bl	800a910 <_malloc_r>
 800d130:	b948      	cbnz	r0, 800d146 <__smakebuf_r+0x46>
 800d132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d136:	059a      	lsls	r2, r3, #22
 800d138:	d4ee      	bmi.n	800d118 <__smakebuf_r+0x18>
 800d13a:	f023 0303 	bic.w	r3, r3, #3
 800d13e:	f043 0302 	orr.w	r3, r3, #2
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	e7e2      	b.n	800d10c <__smakebuf_r+0xc>
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	6020      	str	r0, [r4, #0]
 800d14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d14e:	81a3      	strh	r3, [r4, #12]
 800d150:	9b01      	ldr	r3, [sp, #4]
 800d152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d156:	b15b      	cbz	r3, 800d170 <__smakebuf_r+0x70>
 800d158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d15c:	4630      	mov	r0, r6
 800d15e:	f000 f81d 	bl	800d19c <_isatty_r>
 800d162:	b128      	cbz	r0, 800d170 <__smakebuf_r+0x70>
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	f023 0303 	bic.w	r3, r3, #3
 800d16a:	f043 0301 	orr.w	r3, r3, #1
 800d16e:	81a3      	strh	r3, [r4, #12]
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	431d      	orrs	r5, r3
 800d174:	81a5      	strh	r5, [r4, #12]
 800d176:	e7cf      	b.n	800d118 <__smakebuf_r+0x18>

0800d178 <_fstat_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d07      	ldr	r5, [pc, #28]	@ (800d198 <_fstat_r+0x20>)
 800d17c:	2300      	movs	r3, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	4608      	mov	r0, r1
 800d182:	4611      	mov	r1, r2
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	f7f4 febb 	bl	8001f00 <_fstat>
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	d102      	bne.n	800d194 <_fstat_r+0x1c>
 800d18e:	682b      	ldr	r3, [r5, #0]
 800d190:	b103      	cbz	r3, 800d194 <_fstat_r+0x1c>
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	bd38      	pop	{r3, r4, r5, pc}
 800d196:	bf00      	nop
 800d198:	20001158 	.word	0x20001158

0800d19c <_isatty_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	@ (800d1b8 <_isatty_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f4 feba 	bl	8001f20 <_isatty>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_isatty_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_isatty_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20001158 	.word	0x20001158

0800d1bc <sqrtf>:
 800d1bc:	b508      	push	{r3, lr}
 800d1be:	ed2d 8b02 	vpush	{d8}
 800d1c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d1c6:	f000 f8a1 	bl	800d30c <__ieee754_sqrtf>
 800d1ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d2:	d60c      	bvs.n	800d1ee <sqrtf+0x32>
 800d1d4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d1f4 <sqrtf+0x38>
 800d1d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	d505      	bpl.n	800d1ee <sqrtf+0x32>
 800d1e2:	f7fe f9e1 	bl	800b5a8 <__errno>
 800d1e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d1ea:	2321      	movs	r3, #33	@ 0x21
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	ecbd 8b02 	vpop	{d8}
 800d1f2:	bd08      	pop	{r3, pc}
 800d1f4:	00000000 	.word	0x00000000

0800d1f8 <cosf>:
 800d1f8:	ee10 3a10 	vmov	r3, s0
 800d1fc:	b507      	push	{r0, r1, r2, lr}
 800d1fe:	4a1e      	ldr	r2, [pc, #120]	@ (800d278 <cosf+0x80>)
 800d200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d204:	4293      	cmp	r3, r2
 800d206:	d806      	bhi.n	800d216 <cosf+0x1e>
 800d208:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d27c <cosf+0x84>
 800d20c:	b003      	add	sp, #12
 800d20e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d212:	f000 b87f 	b.w	800d314 <__kernel_cosf>
 800d216:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d21a:	d304      	bcc.n	800d226 <cosf+0x2e>
 800d21c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d220:	b003      	add	sp, #12
 800d222:	f85d fb04 	ldr.w	pc, [sp], #4
 800d226:	4668      	mov	r0, sp
 800d228:	f000 f914 	bl	800d454 <__ieee754_rem_pio2f>
 800d22c:	f000 0003 	and.w	r0, r0, #3
 800d230:	2801      	cmp	r0, #1
 800d232:	d009      	beq.n	800d248 <cosf+0x50>
 800d234:	2802      	cmp	r0, #2
 800d236:	d010      	beq.n	800d25a <cosf+0x62>
 800d238:	b9b0      	cbnz	r0, 800d268 <cosf+0x70>
 800d23a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d23e:	ed9d 0a00 	vldr	s0, [sp]
 800d242:	f000 f867 	bl	800d314 <__kernel_cosf>
 800d246:	e7eb      	b.n	800d220 <cosf+0x28>
 800d248:	eddd 0a01 	vldr	s1, [sp, #4]
 800d24c:	ed9d 0a00 	vldr	s0, [sp]
 800d250:	f000 f8b8 	bl	800d3c4 <__kernel_sinf>
 800d254:	eeb1 0a40 	vneg.f32	s0, s0
 800d258:	e7e2      	b.n	800d220 <cosf+0x28>
 800d25a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d25e:	ed9d 0a00 	vldr	s0, [sp]
 800d262:	f000 f857 	bl	800d314 <__kernel_cosf>
 800d266:	e7f5      	b.n	800d254 <cosf+0x5c>
 800d268:	eddd 0a01 	vldr	s1, [sp, #4]
 800d26c:	ed9d 0a00 	vldr	s0, [sp]
 800d270:	2001      	movs	r0, #1
 800d272:	f000 f8a7 	bl	800d3c4 <__kernel_sinf>
 800d276:	e7d3      	b.n	800d220 <cosf+0x28>
 800d278:	3f490fd8 	.word	0x3f490fd8
 800d27c:	00000000 	.word	0x00000000

0800d280 <sinf>:
 800d280:	ee10 3a10 	vmov	r3, s0
 800d284:	b507      	push	{r0, r1, r2, lr}
 800d286:	4a1f      	ldr	r2, [pc, #124]	@ (800d304 <sinf+0x84>)
 800d288:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d807      	bhi.n	800d2a0 <sinf+0x20>
 800d290:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d308 <sinf+0x88>
 800d294:	2000      	movs	r0, #0
 800d296:	b003      	add	sp, #12
 800d298:	f85d eb04 	ldr.w	lr, [sp], #4
 800d29c:	f000 b892 	b.w	800d3c4 <__kernel_sinf>
 800d2a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d2a4:	d304      	bcc.n	800d2b0 <sinf+0x30>
 800d2a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d2aa:	b003      	add	sp, #12
 800d2ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2b0:	4668      	mov	r0, sp
 800d2b2:	f000 f8cf 	bl	800d454 <__ieee754_rem_pio2f>
 800d2b6:	f000 0003 	and.w	r0, r0, #3
 800d2ba:	2801      	cmp	r0, #1
 800d2bc:	d00a      	beq.n	800d2d4 <sinf+0x54>
 800d2be:	2802      	cmp	r0, #2
 800d2c0:	d00f      	beq.n	800d2e2 <sinf+0x62>
 800d2c2:	b9c0      	cbnz	r0, 800d2f6 <sinf+0x76>
 800d2c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d2c8:	ed9d 0a00 	vldr	s0, [sp]
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	f000 f879 	bl	800d3c4 <__kernel_sinf>
 800d2d2:	e7ea      	b.n	800d2aa <sinf+0x2a>
 800d2d4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d2d8:	ed9d 0a00 	vldr	s0, [sp]
 800d2dc:	f000 f81a 	bl	800d314 <__kernel_cosf>
 800d2e0:	e7e3      	b.n	800d2aa <sinf+0x2a>
 800d2e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d2e6:	ed9d 0a00 	vldr	s0, [sp]
 800d2ea:	2001      	movs	r0, #1
 800d2ec:	f000 f86a 	bl	800d3c4 <__kernel_sinf>
 800d2f0:	eeb1 0a40 	vneg.f32	s0, s0
 800d2f4:	e7d9      	b.n	800d2aa <sinf+0x2a>
 800d2f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d2fa:	ed9d 0a00 	vldr	s0, [sp]
 800d2fe:	f000 f809 	bl	800d314 <__kernel_cosf>
 800d302:	e7f5      	b.n	800d2f0 <sinf+0x70>
 800d304:	3f490fd8 	.word	0x3f490fd8
 800d308:	00000000 	.word	0x00000000

0800d30c <__ieee754_sqrtf>:
 800d30c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d310:	4770      	bx	lr
	...

0800d314 <__kernel_cosf>:
 800d314:	ee10 3a10 	vmov	r3, s0
 800d318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d31c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d320:	eef0 6a40 	vmov.f32	s13, s0
 800d324:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d328:	d204      	bcs.n	800d334 <__kernel_cosf+0x20>
 800d32a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d32e:	ee17 2a90 	vmov	r2, s15
 800d332:	b342      	cbz	r2, 800d386 <__kernel_cosf+0x72>
 800d334:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d338:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d3a4 <__kernel_cosf+0x90>
 800d33c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d3a8 <__kernel_cosf+0x94>
 800d340:	4a1a      	ldr	r2, [pc, #104]	@ (800d3ac <__kernel_cosf+0x98>)
 800d342:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d346:	4293      	cmp	r3, r2
 800d348:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d3b0 <__kernel_cosf+0x9c>
 800d34c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d350:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d3b4 <__kernel_cosf+0xa0>
 800d354:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d358:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d3b8 <__kernel_cosf+0xa4>
 800d35c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d360:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d3bc <__kernel_cosf+0xa8>
 800d364:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d368:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d36c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d370:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d374:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d37c:	d804      	bhi.n	800d388 <__kernel_cosf+0x74>
 800d37e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d382:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d386:	4770      	bx	lr
 800d388:	4a0d      	ldr	r2, [pc, #52]	@ (800d3c0 <__kernel_cosf+0xac>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	bf9a      	itte	ls
 800d38e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d392:	ee07 3a10 	vmovls	s14, r3
 800d396:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d39a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d39e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3a2:	e7ec      	b.n	800d37e <__kernel_cosf+0x6a>
 800d3a4:	ad47d74e 	.word	0xad47d74e
 800d3a8:	310f74f6 	.word	0x310f74f6
 800d3ac:	3e999999 	.word	0x3e999999
 800d3b0:	b493f27c 	.word	0xb493f27c
 800d3b4:	37d00d01 	.word	0x37d00d01
 800d3b8:	bab60b61 	.word	0xbab60b61
 800d3bc:	3d2aaaab 	.word	0x3d2aaaab
 800d3c0:	3f480000 	.word	0x3f480000

0800d3c4 <__kernel_sinf>:
 800d3c4:	ee10 3a10 	vmov	r3, s0
 800d3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d3d0:	d204      	bcs.n	800d3dc <__kernel_sinf+0x18>
 800d3d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d3d6:	ee17 3a90 	vmov	r3, s15
 800d3da:	b35b      	cbz	r3, 800d434 <__kernel_sinf+0x70>
 800d3dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d3e0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d438 <__kernel_sinf+0x74>
 800d3e4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d43c <__kernel_sinf+0x78>
 800d3e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d3ec:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d440 <__kernel_sinf+0x7c>
 800d3f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d3f4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d444 <__kernel_sinf+0x80>
 800d3f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d3fc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d448 <__kernel_sinf+0x84>
 800d400:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d404:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d408:	b930      	cbnz	r0, 800d418 <__kernel_sinf+0x54>
 800d40a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d44c <__kernel_sinf+0x88>
 800d40e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d412:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d416:	4770      	bx	lr
 800d418:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d41c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d420:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d424:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d428:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d450 <__kernel_sinf+0x8c>
 800d42c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d430:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	2f2ec9d3 	.word	0x2f2ec9d3
 800d43c:	b2d72f34 	.word	0xb2d72f34
 800d440:	3638ef1b 	.word	0x3638ef1b
 800d444:	b9500d01 	.word	0xb9500d01
 800d448:	3c088889 	.word	0x3c088889
 800d44c:	be2aaaab 	.word	0xbe2aaaab
 800d450:	3e2aaaab 	.word	0x3e2aaaab

0800d454 <__ieee754_rem_pio2f>:
 800d454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d456:	ee10 6a10 	vmov	r6, s0
 800d45a:	4b88      	ldr	r3, [pc, #544]	@ (800d67c <__ieee754_rem_pio2f+0x228>)
 800d45c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d460:	429d      	cmp	r5, r3
 800d462:	b087      	sub	sp, #28
 800d464:	4604      	mov	r4, r0
 800d466:	d805      	bhi.n	800d474 <__ieee754_rem_pio2f+0x20>
 800d468:	2300      	movs	r3, #0
 800d46a:	ed80 0a00 	vstr	s0, [r0]
 800d46e:	6043      	str	r3, [r0, #4]
 800d470:	2000      	movs	r0, #0
 800d472:	e022      	b.n	800d4ba <__ieee754_rem_pio2f+0x66>
 800d474:	4b82      	ldr	r3, [pc, #520]	@ (800d680 <__ieee754_rem_pio2f+0x22c>)
 800d476:	429d      	cmp	r5, r3
 800d478:	d83a      	bhi.n	800d4f0 <__ieee754_rem_pio2f+0x9c>
 800d47a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d47e:	2e00      	cmp	r6, #0
 800d480:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d684 <__ieee754_rem_pio2f+0x230>
 800d484:	4a80      	ldr	r2, [pc, #512]	@ (800d688 <__ieee754_rem_pio2f+0x234>)
 800d486:	f023 030f 	bic.w	r3, r3, #15
 800d48a:	dd18      	ble.n	800d4be <__ieee754_rem_pio2f+0x6a>
 800d48c:	4293      	cmp	r3, r2
 800d48e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d492:	bf09      	itett	eq
 800d494:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d68c <__ieee754_rem_pio2f+0x238>
 800d498:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d690 <__ieee754_rem_pio2f+0x23c>
 800d49c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d694 <__ieee754_rem_pio2f+0x240>
 800d4a0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d4a4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d4a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4ac:	ed80 7a00 	vstr	s14, [r0]
 800d4b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4b4:	edc0 7a01 	vstr	s15, [r0, #4]
 800d4b8:	2001      	movs	r0, #1
 800d4ba:	b007      	add	sp, #28
 800d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d4c4:	bf09      	itett	eq
 800d4c6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d68c <__ieee754_rem_pio2f+0x238>
 800d4ca:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d690 <__ieee754_rem_pio2f+0x23c>
 800d4ce:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d694 <__ieee754_rem_pio2f+0x240>
 800d4d2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d4d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d4da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4de:	ed80 7a00 	vstr	s14, [r0]
 800d4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e6:	edc0 7a01 	vstr	s15, [r0, #4]
 800d4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ee:	e7e4      	b.n	800d4ba <__ieee754_rem_pio2f+0x66>
 800d4f0:	4b69      	ldr	r3, [pc, #420]	@ (800d698 <__ieee754_rem_pio2f+0x244>)
 800d4f2:	429d      	cmp	r5, r3
 800d4f4:	d873      	bhi.n	800d5de <__ieee754_rem_pio2f+0x18a>
 800d4f6:	f000 f8dd 	bl	800d6b4 <fabsf>
 800d4fa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d69c <__ieee754_rem_pio2f+0x248>
 800d4fe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d502:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d50a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d50e:	ee17 0a90 	vmov	r0, s15
 800d512:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d684 <__ieee754_rem_pio2f+0x230>
 800d516:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d51a:	281f      	cmp	r0, #31
 800d51c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d690 <__ieee754_rem_pio2f+0x23c>
 800d520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d524:	eeb1 6a47 	vneg.f32	s12, s14
 800d528:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d52c:	ee16 1a90 	vmov	r1, s13
 800d530:	dc09      	bgt.n	800d546 <__ieee754_rem_pio2f+0xf2>
 800d532:	4a5b      	ldr	r2, [pc, #364]	@ (800d6a0 <__ieee754_rem_pio2f+0x24c>)
 800d534:	1e47      	subs	r7, r0, #1
 800d536:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d53a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d53e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d542:	4293      	cmp	r3, r2
 800d544:	d107      	bne.n	800d556 <__ieee754_rem_pio2f+0x102>
 800d546:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d54a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d54e:	2a08      	cmp	r2, #8
 800d550:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d554:	dc14      	bgt.n	800d580 <__ieee754_rem_pio2f+0x12c>
 800d556:	6021      	str	r1, [r4, #0]
 800d558:	ed94 7a00 	vldr	s14, [r4]
 800d55c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d560:	2e00      	cmp	r6, #0
 800d562:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d566:	ed84 0a01 	vstr	s0, [r4, #4]
 800d56a:	daa6      	bge.n	800d4ba <__ieee754_rem_pio2f+0x66>
 800d56c:	eeb1 7a47 	vneg.f32	s14, s14
 800d570:	eeb1 0a40 	vneg.f32	s0, s0
 800d574:	ed84 7a00 	vstr	s14, [r4]
 800d578:	ed84 0a01 	vstr	s0, [r4, #4]
 800d57c:	4240      	negs	r0, r0
 800d57e:	e79c      	b.n	800d4ba <__ieee754_rem_pio2f+0x66>
 800d580:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d68c <__ieee754_rem_pio2f+0x238>
 800d584:	eef0 6a40 	vmov.f32	s13, s0
 800d588:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d58c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d590:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d594:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d694 <__ieee754_rem_pio2f+0x240>
 800d598:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d59c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d5a0:	ee15 2a90 	vmov	r2, s11
 800d5a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d5a8:	1a5b      	subs	r3, r3, r1
 800d5aa:	2b19      	cmp	r3, #25
 800d5ac:	dc04      	bgt.n	800d5b8 <__ieee754_rem_pio2f+0x164>
 800d5ae:	edc4 5a00 	vstr	s11, [r4]
 800d5b2:	eeb0 0a66 	vmov.f32	s0, s13
 800d5b6:	e7cf      	b.n	800d558 <__ieee754_rem_pio2f+0x104>
 800d5b8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d6a4 <__ieee754_rem_pio2f+0x250>
 800d5bc:	eeb0 0a66 	vmov.f32	s0, s13
 800d5c0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d5c4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d5c8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d6a8 <__ieee754_rem_pio2f+0x254>
 800d5cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d5d0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d5d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d5d8:	ed84 7a00 	vstr	s14, [r4]
 800d5dc:	e7bc      	b.n	800d558 <__ieee754_rem_pio2f+0x104>
 800d5de:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d5e2:	d306      	bcc.n	800d5f2 <__ieee754_rem_pio2f+0x19e>
 800d5e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d5e8:	edc0 7a01 	vstr	s15, [r0, #4]
 800d5ec:	edc0 7a00 	vstr	s15, [r0]
 800d5f0:	e73e      	b.n	800d470 <__ieee754_rem_pio2f+0x1c>
 800d5f2:	15ea      	asrs	r2, r5, #23
 800d5f4:	3a86      	subs	r2, #134	@ 0x86
 800d5f6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d602:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d6ac <__ieee754_rem_pio2f+0x258>
 800d606:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d60a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d60e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d612:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d616:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d61a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d61e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d622:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d626:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d62a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d632:	edcd 7a05 	vstr	s15, [sp, #20]
 800d636:	d11e      	bne.n	800d676 <__ieee754_rem_pio2f+0x222>
 800d638:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d640:	bf0c      	ite	eq
 800d642:	2301      	moveq	r3, #1
 800d644:	2302      	movne	r3, #2
 800d646:	491a      	ldr	r1, [pc, #104]	@ (800d6b0 <__ieee754_rem_pio2f+0x25c>)
 800d648:	9101      	str	r1, [sp, #4]
 800d64a:	2102      	movs	r1, #2
 800d64c:	9100      	str	r1, [sp, #0]
 800d64e:	a803      	add	r0, sp, #12
 800d650:	4621      	mov	r1, r4
 800d652:	f000 f837 	bl	800d6c4 <__kernel_rem_pio2f>
 800d656:	2e00      	cmp	r6, #0
 800d658:	f6bf af2f 	bge.w	800d4ba <__ieee754_rem_pio2f+0x66>
 800d65c:	edd4 7a00 	vldr	s15, [r4]
 800d660:	eef1 7a67 	vneg.f32	s15, s15
 800d664:	edc4 7a00 	vstr	s15, [r4]
 800d668:	edd4 7a01 	vldr	s15, [r4, #4]
 800d66c:	eef1 7a67 	vneg.f32	s15, s15
 800d670:	edc4 7a01 	vstr	s15, [r4, #4]
 800d674:	e782      	b.n	800d57c <__ieee754_rem_pio2f+0x128>
 800d676:	2303      	movs	r3, #3
 800d678:	e7e5      	b.n	800d646 <__ieee754_rem_pio2f+0x1f2>
 800d67a:	bf00      	nop
 800d67c:	3f490fd8 	.word	0x3f490fd8
 800d680:	4016cbe3 	.word	0x4016cbe3
 800d684:	3fc90f80 	.word	0x3fc90f80
 800d688:	3fc90fd0 	.word	0x3fc90fd0
 800d68c:	37354400 	.word	0x37354400
 800d690:	37354443 	.word	0x37354443
 800d694:	2e85a308 	.word	0x2e85a308
 800d698:	43490f80 	.word	0x43490f80
 800d69c:	3f22f984 	.word	0x3f22f984
 800d6a0:	0800e0a8 	.word	0x0800e0a8
 800d6a4:	2e85a300 	.word	0x2e85a300
 800d6a8:	248d3132 	.word	0x248d3132
 800d6ac:	43800000 	.word	0x43800000
 800d6b0:	0800e128 	.word	0x0800e128

0800d6b4 <fabsf>:
 800d6b4:	ee10 3a10 	vmov	r3, s0
 800d6b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6bc:	ee00 3a10 	vmov	s0, r3
 800d6c0:	4770      	bx	lr
	...

0800d6c4 <__kernel_rem_pio2f>:
 800d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	ed2d 8b04 	vpush	{d8-d9}
 800d6cc:	b0d9      	sub	sp, #356	@ 0x164
 800d6ce:	4690      	mov	r8, r2
 800d6d0:	9001      	str	r0, [sp, #4]
 800d6d2:	4ab9      	ldr	r2, [pc, #740]	@ (800d9b8 <__kernel_rem_pio2f+0x2f4>)
 800d6d4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d6d6:	f118 0f04 	cmn.w	r8, #4
 800d6da:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d6de:	460f      	mov	r7, r1
 800d6e0:	f103 3bff 	add.w	fp, r3, #4294967295
 800d6e4:	db27      	blt.n	800d736 <__kernel_rem_pio2f+0x72>
 800d6e6:	f1b8 0203 	subs.w	r2, r8, #3
 800d6ea:	bf48      	it	mi
 800d6ec:	f108 0204 	addmi.w	r2, r8, #4
 800d6f0:	10d2      	asrs	r2, r2, #3
 800d6f2:	1c55      	adds	r5, r2, #1
 800d6f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d6f6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800d6fa:	00e8      	lsls	r0, r5, #3
 800d6fc:	eba2 060b 	sub.w	r6, r2, fp
 800d700:	9002      	str	r0, [sp, #8]
 800d702:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d706:	eb0a 0c0b 	add.w	ip, sl, fp
 800d70a:	ac1c      	add	r4, sp, #112	@ 0x70
 800d70c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d710:	2000      	movs	r0, #0
 800d712:	4560      	cmp	r0, ip
 800d714:	dd11      	ble.n	800d73a <__kernel_rem_pio2f+0x76>
 800d716:	a91c      	add	r1, sp, #112	@ 0x70
 800d718:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d71c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d720:	f04f 0c00 	mov.w	ip, #0
 800d724:	45d4      	cmp	ip, sl
 800d726:	dc27      	bgt.n	800d778 <__kernel_rem_pio2f+0xb4>
 800d728:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d72c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800d730:	4606      	mov	r6, r0
 800d732:	2400      	movs	r4, #0
 800d734:	e016      	b.n	800d764 <__kernel_rem_pio2f+0xa0>
 800d736:	2200      	movs	r2, #0
 800d738:	e7db      	b.n	800d6f2 <__kernel_rem_pio2f+0x2e>
 800d73a:	42c6      	cmn	r6, r0
 800d73c:	bf5d      	ittte	pl
 800d73e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d742:	ee07 1a90 	vmovpl	s15, r1
 800d746:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d74a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d74e:	ece4 7a01 	vstmia	r4!, {s15}
 800d752:	3001      	adds	r0, #1
 800d754:	e7dd      	b.n	800d712 <__kernel_rem_pio2f+0x4e>
 800d756:	ecfe 6a01 	vldmia	lr!, {s13}
 800d75a:	ed96 7a00 	vldr	s14, [r6]
 800d75e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d762:	3401      	adds	r4, #1
 800d764:	455c      	cmp	r4, fp
 800d766:	f1a6 0604 	sub.w	r6, r6, #4
 800d76a:	ddf4      	ble.n	800d756 <__kernel_rem_pio2f+0x92>
 800d76c:	ece9 7a01 	vstmia	r9!, {s15}
 800d770:	f10c 0c01 	add.w	ip, ip, #1
 800d774:	3004      	adds	r0, #4
 800d776:	e7d5      	b.n	800d724 <__kernel_rem_pio2f+0x60>
 800d778:	a908      	add	r1, sp, #32
 800d77a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d77e:	9104      	str	r1, [sp, #16]
 800d780:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d782:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d9c4 <__kernel_rem_pio2f+0x300>
 800d786:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d9c0 <__kernel_rem_pio2f+0x2fc>
 800d78a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d78e:	9203      	str	r2, [sp, #12]
 800d790:	4654      	mov	r4, sl
 800d792:	00a2      	lsls	r2, r4, #2
 800d794:	9205      	str	r2, [sp, #20]
 800d796:	aa58      	add	r2, sp, #352	@ 0x160
 800d798:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d79c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d7a0:	a944      	add	r1, sp, #272	@ 0x110
 800d7a2:	aa08      	add	r2, sp, #32
 800d7a4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d7a8:	4694      	mov	ip, r2
 800d7aa:	4626      	mov	r6, r4
 800d7ac:	2e00      	cmp	r6, #0
 800d7ae:	f1a0 0004 	sub.w	r0, r0, #4
 800d7b2:	dc4c      	bgt.n	800d84e <__kernel_rem_pio2f+0x18a>
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7ba:	f000 f9f5 	bl	800dba8 <scalbnf>
 800d7be:	eeb0 8a40 	vmov.f32	s16, s0
 800d7c2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d7c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d7ca:	f000 fa53 	bl	800dc74 <floorf>
 800d7ce:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d7d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d7d6:	2d00      	cmp	r5, #0
 800d7d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d7e0:	ee17 9a90 	vmov	r9, s15
 800d7e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7e8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d7ec:	dd41      	ble.n	800d872 <__kernel_rem_pio2f+0x1ae>
 800d7ee:	f104 3cff 	add.w	ip, r4, #4294967295
 800d7f2:	a908      	add	r1, sp, #32
 800d7f4:	f1c5 0e08 	rsb	lr, r5, #8
 800d7f8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d7fc:	fa46 f00e 	asr.w	r0, r6, lr
 800d800:	4481      	add	r9, r0
 800d802:	fa00 f00e 	lsl.w	r0, r0, lr
 800d806:	1a36      	subs	r6, r6, r0
 800d808:	f1c5 0007 	rsb	r0, r5, #7
 800d80c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d810:	4106      	asrs	r6, r0
 800d812:	2e00      	cmp	r6, #0
 800d814:	dd3c      	ble.n	800d890 <__kernel_rem_pio2f+0x1cc>
 800d816:	f04f 0e00 	mov.w	lr, #0
 800d81a:	f109 0901 	add.w	r9, r9, #1
 800d81e:	4670      	mov	r0, lr
 800d820:	4574      	cmp	r4, lr
 800d822:	dc68      	bgt.n	800d8f6 <__kernel_rem_pio2f+0x232>
 800d824:	2d00      	cmp	r5, #0
 800d826:	dd03      	ble.n	800d830 <__kernel_rem_pio2f+0x16c>
 800d828:	2d01      	cmp	r5, #1
 800d82a:	d074      	beq.n	800d916 <__kernel_rem_pio2f+0x252>
 800d82c:	2d02      	cmp	r5, #2
 800d82e:	d07d      	beq.n	800d92c <__kernel_rem_pio2f+0x268>
 800d830:	2e02      	cmp	r6, #2
 800d832:	d12d      	bne.n	800d890 <__kernel_rem_pio2f+0x1cc>
 800d834:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d838:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d83c:	b340      	cbz	r0, 800d890 <__kernel_rem_pio2f+0x1cc>
 800d83e:	4628      	mov	r0, r5
 800d840:	9306      	str	r3, [sp, #24]
 800d842:	f000 f9b1 	bl	800dba8 <scalbnf>
 800d846:	9b06      	ldr	r3, [sp, #24]
 800d848:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d84c:	e020      	b.n	800d890 <__kernel_rem_pio2f+0x1cc>
 800d84e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d852:	3e01      	subs	r6, #1
 800d854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d85c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d860:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d864:	ecac 0a01 	vstmia	ip!, {s0}
 800d868:	ed90 0a00 	vldr	s0, [r0]
 800d86c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d870:	e79c      	b.n	800d7ac <__kernel_rem_pio2f+0xe8>
 800d872:	d105      	bne.n	800d880 <__kernel_rem_pio2f+0x1bc>
 800d874:	1e60      	subs	r0, r4, #1
 800d876:	a908      	add	r1, sp, #32
 800d878:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d87c:	11f6      	asrs	r6, r6, #7
 800d87e:	e7c8      	b.n	800d812 <__kernel_rem_pio2f+0x14e>
 800d880:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d884:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88c:	da31      	bge.n	800d8f2 <__kernel_rem_pio2f+0x22e>
 800d88e:	2600      	movs	r6, #0
 800d890:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d898:	f040 8098 	bne.w	800d9cc <__kernel_rem_pio2f+0x308>
 800d89c:	1e60      	subs	r0, r4, #1
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4550      	cmp	r0, sl
 800d8a2:	da4b      	bge.n	800d93c <__kernel_rem_pio2f+0x278>
 800d8a4:	2a00      	cmp	r2, #0
 800d8a6:	d065      	beq.n	800d974 <__kernel_rem_pio2f+0x2b0>
 800d8a8:	3c01      	subs	r4, #1
 800d8aa:	ab08      	add	r3, sp, #32
 800d8ac:	3d08      	subs	r5, #8
 800d8ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d0f8      	beq.n	800d8a8 <__kernel_rem_pio2f+0x1e4>
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d8bc:	f000 f974 	bl	800dba8 <scalbnf>
 800d8c0:	1c63      	adds	r3, r4, #1
 800d8c2:	aa44      	add	r2, sp, #272	@ 0x110
 800d8c4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d9c4 <__kernel_rem_pio2f+0x300>
 800d8c8:	0099      	lsls	r1, r3, #2
 800d8ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d8ce:	4623      	mov	r3, r4
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f280 80a9 	bge.w	800da28 <__kernel_rem_pio2f+0x364>
 800d8d6:	4623      	mov	r3, r4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f2c0 80c7 	blt.w	800da6c <__kernel_rem_pio2f+0x3a8>
 800d8de:	aa44      	add	r2, sp, #272	@ 0x110
 800d8e0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d8e4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d9bc <__kernel_rem_pio2f+0x2f8>
 800d8e8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	1ae2      	subs	r2, r4, r3
 800d8f0:	e0b1      	b.n	800da56 <__kernel_rem_pio2f+0x392>
 800d8f2:	2602      	movs	r6, #2
 800d8f4:	e78f      	b.n	800d816 <__kernel_rem_pio2f+0x152>
 800d8f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d8fa:	b948      	cbnz	r0, 800d910 <__kernel_rem_pio2f+0x24c>
 800d8fc:	b121      	cbz	r1, 800d908 <__kernel_rem_pio2f+0x244>
 800d8fe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d902:	f842 1c04 	str.w	r1, [r2, #-4]
 800d906:	2101      	movs	r1, #1
 800d908:	f10e 0e01 	add.w	lr, lr, #1
 800d90c:	4608      	mov	r0, r1
 800d90e:	e787      	b.n	800d820 <__kernel_rem_pio2f+0x15c>
 800d910:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d914:	e7f5      	b.n	800d902 <__kernel_rem_pio2f+0x23e>
 800d916:	f104 3cff 	add.w	ip, r4, #4294967295
 800d91a:	aa08      	add	r2, sp, #32
 800d91c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d920:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d924:	a908      	add	r1, sp, #32
 800d926:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d92a:	e781      	b.n	800d830 <__kernel_rem_pio2f+0x16c>
 800d92c:	f104 3cff 	add.w	ip, r4, #4294967295
 800d930:	aa08      	add	r2, sp, #32
 800d932:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d936:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d93a:	e7f3      	b.n	800d924 <__kernel_rem_pio2f+0x260>
 800d93c:	a908      	add	r1, sp, #32
 800d93e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d942:	3801      	subs	r0, #1
 800d944:	430a      	orrs	r2, r1
 800d946:	e7ab      	b.n	800d8a0 <__kernel_rem_pio2f+0x1dc>
 800d948:	3201      	adds	r2, #1
 800d94a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d94e:	2e00      	cmp	r6, #0
 800d950:	d0fa      	beq.n	800d948 <__kernel_rem_pio2f+0x284>
 800d952:	9905      	ldr	r1, [sp, #20]
 800d954:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d958:	eb0d 0001 	add.w	r0, sp, r1
 800d95c:	18e6      	adds	r6, r4, r3
 800d95e:	a91c      	add	r1, sp, #112	@ 0x70
 800d960:	f104 0c01 	add.w	ip, r4, #1
 800d964:	384c      	subs	r0, #76	@ 0x4c
 800d966:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d96a:	4422      	add	r2, r4
 800d96c:	4562      	cmp	r2, ip
 800d96e:	da04      	bge.n	800d97a <__kernel_rem_pio2f+0x2b6>
 800d970:	4614      	mov	r4, r2
 800d972:	e70e      	b.n	800d792 <__kernel_rem_pio2f+0xce>
 800d974:	9804      	ldr	r0, [sp, #16]
 800d976:	2201      	movs	r2, #1
 800d978:	e7e7      	b.n	800d94a <__kernel_rem_pio2f+0x286>
 800d97a:	9903      	ldr	r1, [sp, #12]
 800d97c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d980:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d984:	9105      	str	r1, [sp, #20]
 800d986:	ee07 1a90 	vmov	s15, r1
 800d98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d98e:	2400      	movs	r4, #0
 800d990:	ece6 7a01 	vstmia	r6!, {s15}
 800d994:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800d998:	46b1      	mov	r9, r6
 800d99a:	455c      	cmp	r4, fp
 800d99c:	dd04      	ble.n	800d9a8 <__kernel_rem_pio2f+0x2e4>
 800d99e:	ece0 7a01 	vstmia	r0!, {s15}
 800d9a2:	f10c 0c01 	add.w	ip, ip, #1
 800d9a6:	e7e1      	b.n	800d96c <__kernel_rem_pio2f+0x2a8>
 800d9a8:	ecfe 6a01 	vldmia	lr!, {s13}
 800d9ac:	ed39 7a01 	vldmdb	r9!, {s14}
 800d9b0:	3401      	adds	r4, #1
 800d9b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d9b6:	e7f0      	b.n	800d99a <__kernel_rem_pio2f+0x2d6>
 800d9b8:	0800e46c 	.word	0x0800e46c
 800d9bc:	0800e440 	.word	0x0800e440
 800d9c0:	43800000 	.word	0x43800000
 800d9c4:	3b800000 	.word	0x3b800000
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	9b02      	ldr	r3, [sp, #8]
 800d9ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d2:	eba3 0008 	sub.w	r0, r3, r8
 800d9d6:	f000 f8e7 	bl	800dba8 <scalbnf>
 800d9da:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d9c0 <__kernel_rem_pio2f+0x2fc>
 800d9de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e6:	db19      	blt.n	800da1c <__kernel_rem_pio2f+0x358>
 800d9e8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d9c4 <__kernel_rem_pio2f+0x300>
 800d9ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d9f0:	aa08      	add	r2, sp, #32
 800d9f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9f6:	3508      	adds	r5, #8
 800d9f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800da00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800da08:	ee10 3a10 	vmov	r3, s0
 800da0c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800da10:	ee17 3a90 	vmov	r3, s15
 800da14:	3401      	adds	r4, #1
 800da16:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800da1a:	e74c      	b.n	800d8b6 <__kernel_rem_pio2f+0x1f2>
 800da1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800da20:	aa08      	add	r2, sp, #32
 800da22:	ee10 3a10 	vmov	r3, s0
 800da26:	e7f6      	b.n	800da16 <__kernel_rem_pio2f+0x352>
 800da28:	a808      	add	r0, sp, #32
 800da2a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800da2e:	9001      	str	r0, [sp, #4]
 800da30:	ee07 0a90 	vmov	s15, r0
 800da34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da38:	3b01      	subs	r3, #1
 800da3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800da42:	ed62 7a01 	vstmdb	r2!, {s15}
 800da46:	e743      	b.n	800d8d0 <__kernel_rem_pio2f+0x20c>
 800da48:	ecfc 6a01 	vldmia	ip!, {s13}
 800da4c:	ecb5 7a01 	vldmia	r5!, {s14}
 800da50:	eee6 7a87 	vfma.f32	s15, s13, s14
 800da54:	3001      	adds	r0, #1
 800da56:	4550      	cmp	r0, sl
 800da58:	dc01      	bgt.n	800da5e <__kernel_rem_pio2f+0x39a>
 800da5a:	4282      	cmp	r2, r0
 800da5c:	daf4      	bge.n	800da48 <__kernel_rem_pio2f+0x384>
 800da5e:	a858      	add	r0, sp, #352	@ 0x160
 800da60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800da64:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800da68:	3b01      	subs	r3, #1
 800da6a:	e735      	b.n	800d8d8 <__kernel_rem_pio2f+0x214>
 800da6c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800da6e:	2b02      	cmp	r3, #2
 800da70:	dc09      	bgt.n	800da86 <__kernel_rem_pio2f+0x3c2>
 800da72:	2b00      	cmp	r3, #0
 800da74:	dc2b      	bgt.n	800dace <__kernel_rem_pio2f+0x40a>
 800da76:	d044      	beq.n	800db02 <__kernel_rem_pio2f+0x43e>
 800da78:	f009 0007 	and.w	r0, r9, #7
 800da7c:	b059      	add	sp, #356	@ 0x164
 800da7e:	ecbd 8b04 	vpop	{d8-d9}
 800da82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da86:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d1f5      	bne.n	800da78 <__kernel_rem_pio2f+0x3b4>
 800da8c:	aa30      	add	r2, sp, #192	@ 0xc0
 800da8e:	1f0b      	subs	r3, r1, #4
 800da90:	4413      	add	r3, r2
 800da92:	461a      	mov	r2, r3
 800da94:	4620      	mov	r0, r4
 800da96:	2800      	cmp	r0, #0
 800da98:	f1a2 0204 	sub.w	r2, r2, #4
 800da9c:	dc52      	bgt.n	800db44 <__kernel_rem_pio2f+0x480>
 800da9e:	4622      	mov	r2, r4
 800daa0:	2a01      	cmp	r2, #1
 800daa2:	f1a3 0304 	sub.w	r3, r3, #4
 800daa6:	dc5d      	bgt.n	800db64 <__kernel_rem_pio2f+0x4a0>
 800daa8:	ab30      	add	r3, sp, #192	@ 0xc0
 800daaa:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800daae:	440b      	add	r3, r1
 800dab0:	2c01      	cmp	r4, #1
 800dab2:	dc67      	bgt.n	800db84 <__kernel_rem_pio2f+0x4c0>
 800dab4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800dab8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	d167      	bne.n	800db90 <__kernel_rem_pio2f+0x4cc>
 800dac0:	edc7 6a00 	vstr	s13, [r7]
 800dac4:	ed87 7a01 	vstr	s14, [r7, #4]
 800dac8:	edc7 7a02 	vstr	s15, [r7, #8]
 800dacc:	e7d4      	b.n	800da78 <__kernel_rem_pio2f+0x3b4>
 800dace:	ab30      	add	r3, sp, #192	@ 0xc0
 800dad0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800dad4:	440b      	add	r3, r1
 800dad6:	4622      	mov	r2, r4
 800dad8:	2a00      	cmp	r2, #0
 800dada:	da24      	bge.n	800db26 <__kernel_rem_pio2f+0x462>
 800dadc:	b34e      	cbz	r6, 800db32 <__kernel_rem_pio2f+0x46e>
 800dade:	eef1 7a47 	vneg.f32	s15, s14
 800dae2:	edc7 7a00 	vstr	s15, [r7]
 800dae6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800daea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800daee:	aa31      	add	r2, sp, #196	@ 0xc4
 800daf0:	2301      	movs	r3, #1
 800daf2:	429c      	cmp	r4, r3
 800daf4:	da20      	bge.n	800db38 <__kernel_rem_pio2f+0x474>
 800daf6:	b10e      	cbz	r6, 800dafc <__kernel_rem_pio2f+0x438>
 800daf8:	eef1 7a67 	vneg.f32	s15, s15
 800dafc:	edc7 7a01 	vstr	s15, [r7, #4]
 800db00:	e7ba      	b.n	800da78 <__kernel_rem_pio2f+0x3b4>
 800db02:	ab30      	add	r3, sp, #192	@ 0xc0
 800db04:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d9c8 <__kernel_rem_pio2f+0x304>
 800db08:	440b      	add	r3, r1
 800db0a:	2c00      	cmp	r4, #0
 800db0c:	da05      	bge.n	800db1a <__kernel_rem_pio2f+0x456>
 800db0e:	b10e      	cbz	r6, 800db14 <__kernel_rem_pio2f+0x450>
 800db10:	eef1 7a67 	vneg.f32	s15, s15
 800db14:	edc7 7a00 	vstr	s15, [r7]
 800db18:	e7ae      	b.n	800da78 <__kernel_rem_pio2f+0x3b4>
 800db1a:	ed33 7a01 	vldmdb	r3!, {s14}
 800db1e:	3c01      	subs	r4, #1
 800db20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db24:	e7f1      	b.n	800db0a <__kernel_rem_pio2f+0x446>
 800db26:	ed73 7a01 	vldmdb	r3!, {s15}
 800db2a:	3a01      	subs	r2, #1
 800db2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db30:	e7d2      	b.n	800dad8 <__kernel_rem_pio2f+0x414>
 800db32:	eef0 7a47 	vmov.f32	s15, s14
 800db36:	e7d4      	b.n	800dae2 <__kernel_rem_pio2f+0x41e>
 800db38:	ecb2 7a01 	vldmia	r2!, {s14}
 800db3c:	3301      	adds	r3, #1
 800db3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db42:	e7d6      	b.n	800daf2 <__kernel_rem_pio2f+0x42e>
 800db44:	edd2 7a00 	vldr	s15, [r2]
 800db48:	edd2 6a01 	vldr	s13, [r2, #4]
 800db4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db50:	3801      	subs	r0, #1
 800db52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db56:	ed82 7a00 	vstr	s14, [r2]
 800db5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db5e:	edc2 7a01 	vstr	s15, [r2, #4]
 800db62:	e798      	b.n	800da96 <__kernel_rem_pio2f+0x3d2>
 800db64:	edd3 7a00 	vldr	s15, [r3]
 800db68:	edd3 6a01 	vldr	s13, [r3, #4]
 800db6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db70:	3a01      	subs	r2, #1
 800db72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db76:	ed83 7a00 	vstr	s14, [r3]
 800db7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db7e:	edc3 7a01 	vstr	s15, [r3, #4]
 800db82:	e78d      	b.n	800daa0 <__kernel_rem_pio2f+0x3dc>
 800db84:	ed33 7a01 	vldmdb	r3!, {s14}
 800db88:	3c01      	subs	r4, #1
 800db8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db8e:	e78f      	b.n	800dab0 <__kernel_rem_pio2f+0x3ec>
 800db90:	eef1 6a66 	vneg.f32	s13, s13
 800db94:	eeb1 7a47 	vneg.f32	s14, s14
 800db98:	edc7 6a00 	vstr	s13, [r7]
 800db9c:	ed87 7a01 	vstr	s14, [r7, #4]
 800dba0:	eef1 7a67 	vneg.f32	s15, s15
 800dba4:	e790      	b.n	800dac8 <__kernel_rem_pio2f+0x404>
 800dba6:	bf00      	nop

0800dba8 <scalbnf>:
 800dba8:	ee10 3a10 	vmov	r3, s0
 800dbac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800dbb0:	d02b      	beq.n	800dc0a <scalbnf+0x62>
 800dbb2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dbb6:	d302      	bcc.n	800dbbe <scalbnf+0x16>
 800dbb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dbbc:	4770      	bx	lr
 800dbbe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800dbc2:	d123      	bne.n	800dc0c <scalbnf+0x64>
 800dbc4:	4b24      	ldr	r3, [pc, #144]	@ (800dc58 <scalbnf+0xb0>)
 800dbc6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dc5c <scalbnf+0xb4>
 800dbca:	4298      	cmp	r0, r3
 800dbcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dbd0:	db17      	blt.n	800dc02 <scalbnf+0x5a>
 800dbd2:	ee10 3a10 	vmov	r3, s0
 800dbd6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dbda:	3a19      	subs	r2, #25
 800dbdc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800dbe0:	4288      	cmp	r0, r1
 800dbe2:	dd15      	ble.n	800dc10 <scalbnf+0x68>
 800dbe4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800dc60 <scalbnf+0xb8>
 800dbe8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800dc64 <scalbnf+0xbc>
 800dbec:	ee10 3a10 	vmov	r3, s0
 800dbf0:	eeb0 7a67 	vmov.f32	s14, s15
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	bfb8      	it	lt
 800dbf8:	eef0 7a66 	vmovlt.f32	s15, s13
 800dbfc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800dc00:	4770      	bx	lr
 800dc02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dc68 <scalbnf+0xc0>
 800dc06:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dc0a:	4770      	bx	lr
 800dc0c:	0dd2      	lsrs	r2, r2, #23
 800dc0e:	e7e5      	b.n	800dbdc <scalbnf+0x34>
 800dc10:	4410      	add	r0, r2
 800dc12:	28fe      	cmp	r0, #254	@ 0xfe
 800dc14:	dce6      	bgt.n	800dbe4 <scalbnf+0x3c>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	dd06      	ble.n	800dc28 <scalbnf+0x80>
 800dc1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dc1e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dc22:	ee00 3a10 	vmov	s0, r3
 800dc26:	4770      	bx	lr
 800dc28:	f110 0f16 	cmn.w	r0, #22
 800dc2c:	da09      	bge.n	800dc42 <scalbnf+0x9a>
 800dc2e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800dc68 <scalbnf+0xc0>
 800dc32:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800dc6c <scalbnf+0xc4>
 800dc36:	ee10 3a10 	vmov	r3, s0
 800dc3a:	eeb0 7a67 	vmov.f32	s14, s15
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	e7d9      	b.n	800dbf6 <scalbnf+0x4e>
 800dc42:	3019      	adds	r0, #25
 800dc44:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dc48:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dc4c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800dc70 <scalbnf+0xc8>
 800dc50:	ee07 3a90 	vmov	s15, r3
 800dc54:	e7d7      	b.n	800dc06 <scalbnf+0x5e>
 800dc56:	bf00      	nop
 800dc58:	ffff3cb0 	.word	0xffff3cb0
 800dc5c:	4c000000 	.word	0x4c000000
 800dc60:	7149f2ca 	.word	0x7149f2ca
 800dc64:	f149f2ca 	.word	0xf149f2ca
 800dc68:	0da24260 	.word	0x0da24260
 800dc6c:	8da24260 	.word	0x8da24260
 800dc70:	33000000 	.word	0x33000000

0800dc74 <floorf>:
 800dc74:	ee10 3a10 	vmov	r3, s0
 800dc78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dc7c:	3a7f      	subs	r2, #127	@ 0x7f
 800dc7e:	2a16      	cmp	r2, #22
 800dc80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dc84:	dc2b      	bgt.n	800dcde <floorf+0x6a>
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	da12      	bge.n	800dcb0 <floorf+0x3c>
 800dc8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dcf0 <floorf+0x7c>
 800dc8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc9a:	dd06      	ble.n	800dcaa <floorf+0x36>
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	da24      	bge.n	800dcea <floorf+0x76>
 800dca0:	2900      	cmp	r1, #0
 800dca2:	4b14      	ldr	r3, [pc, #80]	@ (800dcf4 <floorf+0x80>)
 800dca4:	bf08      	it	eq
 800dca6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800dcaa:	ee00 3a10 	vmov	s0, r3
 800dcae:	4770      	bx	lr
 800dcb0:	4911      	ldr	r1, [pc, #68]	@ (800dcf8 <floorf+0x84>)
 800dcb2:	4111      	asrs	r1, r2
 800dcb4:	420b      	tst	r3, r1
 800dcb6:	d0fa      	beq.n	800dcae <floorf+0x3a>
 800dcb8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800dcf0 <floorf+0x7c>
 800dcbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dcc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc8:	ddef      	ble.n	800dcaa <floorf+0x36>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	bfbe      	ittt	lt
 800dcce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800dcd2:	fa40 f202 	asrlt.w	r2, r0, r2
 800dcd6:	189b      	addlt	r3, r3, r2
 800dcd8:	ea23 0301 	bic.w	r3, r3, r1
 800dcdc:	e7e5      	b.n	800dcaa <floorf+0x36>
 800dcde:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800dce2:	d3e4      	bcc.n	800dcae <floorf+0x3a>
 800dce4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dce8:	4770      	bx	lr
 800dcea:	2300      	movs	r3, #0
 800dcec:	e7dd      	b.n	800dcaa <floorf+0x36>
 800dcee:	bf00      	nop
 800dcf0:	7149f2ca 	.word	0x7149f2ca
 800dcf4:	bf800000 	.word	0xbf800000
 800dcf8:	007fffff 	.word	0x007fffff

0800dcfc <_init>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	bf00      	nop
 800dd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd02:	bc08      	pop	{r3}
 800dd04:	469e      	mov	lr, r3
 800dd06:	4770      	bx	lr

0800dd08 <_fini>:
 800dd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0a:	bf00      	nop
 800dd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd0e:	bc08      	pop	{r3}
 800dd10:	469e      	mov	lr, r3
 800dd12:	4770      	bx	lr
